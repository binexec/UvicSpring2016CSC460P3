
base.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ee  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003e2  00000000  00000000  00000a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000580  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  000013f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f0  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000043f  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00001cbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e0       	ldi	r30, 0x0A	; 10
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 30       	cpi	r26, 0x00	; 0
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	4d d0       	rcall	.+154    	; 0x1ba <main>
 120:	72 c0       	rjmp	.+228    	; 0x206 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <InitADC>:
#include "adc.h"

void InitADC(void)
{
	ADMUX|=(1<<REFS0);
 124:	ec e7       	ldi	r30, 0x7C	; 124
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //ENABLE ADC, PRESCALER 128
 12e:	ea e7       	ldi	r30, 0x7A	; 122
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	87 68       	ori	r24, 0x87	; 135
 136:	80 83       	st	Z, r24
 138:	08 95       	ret

0000013a <readadc>:
}
uint16_t readadc(uint8_t ch)
{
	ch&=0b00000111;         //ANDing to limit input to 7
	ADMUX = (ADMUX & 0xf8)|ch;  //Clear last 3 bits of ADMUX, OR with ch
 13a:	ec e7       	ldi	r30, 0x7C	; 124
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	90 81       	ld	r25, Z
	ADMUX|=(1<<REFS0);
	ADCSRA|=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //ENABLE ADC, PRESCALER 128
}
uint16_t readadc(uint8_t ch)
{
	ch&=0b00000111;         //ANDing to limit input to 7
 140:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xf8)|ch;  //Clear last 3 bits of ADMUX, OR with ch
 142:	98 7f       	andi	r25, 0xF8	; 248
 144:	89 2b       	or	r24, r25
 146:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADSC);        //START CONVERSION
 148:	ea e7       	ldi	r30, 0x7A	; 122
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	80 83       	st	Z, r24
	while((ADCSRA)&(1<<ADSC));    //WAIT UNTIL CONVERSION IS COMPLETE
 152:	80 81       	ld	r24, Z
 154:	86 fd       	sbrc	r24, 6
 156:	fd cf       	rjmp	.-6      	; 0x152 <readadc+0x18>
	return(ADC);        //RETURN ADC VALUE
 158:	80 91 78 00 	lds	r24, 0x0078
 15c:	90 91 79 00 	lds	r25, 0x0079
 160:	08 95       	ret

00000162 <readAndFilter>:
// within low and high threshold is 0
// higher than 1000, lower than 24 is high speed 2/-2
// in between the threshold and high speed is low speed, 1/-1
char readAndFilter(uint8_t ch)
{
	uint16_t num = readadc(ch);
 162:	eb df       	rcall	.-42     	; 0x13a <readadc>
	if (num < THRESHOLD_1)
 164:	82 33       	cpi	r24, 0x32	; 50
 166:	91 05       	cpc	r25, r1
 168:	68 f0       	brcs	.+26     	; 0x184 <readAndFilter+0x22>
		return (NEGATIVE_HIGH);
	else if (num < THRESHOLD_2)
 16a:	82 3e       	cpi	r24, 0xE2	; 226
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	92 07       	cpc	r25, r18
 170:	58 f0       	brcs	.+22     	; 0x188 <readAndFilter+0x26>
		return (NEGATIVE_LOW);
	else if (num < THRESHOLD_3)
 172:	8e 31       	cpi	r24, 0x1E	; 30
 174:	22 e0       	ldi	r18, 0x02	; 2
 176:	92 07       	cpc	r25, r18
 178:	48 f0       	brcs	.+18     	; 0x18c <readAndFilter+0x2a>
		return (NOT_MOVING);
	else if (num < THRESHOLD_4)
 17a:	8e 3c       	cpi	r24, 0xCE	; 206
 17c:	93 40       	sbci	r25, 0x03	; 3
 17e:	40 f0       	brcs	.+16     	; 0x190 <readAndFilter+0x2e>
		return (POSITIVE_LOW);
	else
		return (POSITIVE_HIGH);	
 180:	80 e5       	ldi	r24, 0x50	; 80
 182:	08 95       	ret
// in between the threshold and high speed is low speed, 1/-1
char readAndFilter(uint8_t ch)
{
	uint16_t num = readadc(ch);
	if (num < THRESHOLD_1)
		return (NEGATIVE_HIGH);
 184:	8e e4       	ldi	r24, 0x4E	; 78
 186:	08 95       	ret
	else if (num < THRESHOLD_2)
		return (NEGATIVE_LOW);
 188:	8e e6       	ldi	r24, 0x6E	; 110
 18a:	08 95       	ret
	else if (num < THRESHOLD_3)
		return (NOT_MOVING);
 18c:	8a e7       	ldi	r24, 0x7A	; 122
 18e:	08 95       	ret
	else if (num < THRESHOLD_4)
		return (POSITIVE_LOW);
 190:	80 e7       	ldi	r24, 0x70	; 112
	else
		return (POSITIVE_HIGH);	
}
 192:	08 95       	ret

00000194 <readAndSend>:

void readAndSend()
{
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
	char direction = readAndFilter(0);   // read ch 0 which is to Y of the joystick
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	e3 df       	rcall	.-58     	; 0x162 <readAndFilter>
 19c:	d8 2f       	mov	r29, r24
	char speed = readAndFilter(1);		// read ch 1 which is the X of the joystick
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	e0 df       	rcall	.-64     	; 0x162 <readAndFilter>
 1a2:	c8 2f       	mov	r28, r24
	char a,b;
	a = direction  + '0';
	b = speed + '0';
	uart0_sendbyte('$');
 1a4:	84 e2       	ldi	r24, 0x24	; 36
 1a6:	27 d0       	rcall	.+78     	; 0x1f6 <uart0_sendbyte>
	uart0_sendbyte(direction);
 1a8:	8d 2f       	mov	r24, r29
 1aa:	25 d0       	rcall	.+74     	; 0x1f6 <uart0_sendbyte>
	uart0_sendbyte(speed);
 1ac:	8c 2f       	mov	r24, r28
 1ae:	23 d0       	rcall	.+70     	; 0x1f6 <uart0_sendbyte>
	uart0_sendbyte('#');
 1b0:	83 e2       	ldi	r24, 0x23	; 35
 1b2:	21 d0       	rcall	.+66     	; 0x1f6 <uart0_sendbyte>
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <main>:

int main(void)
{
	uart0_init();
 1ba:	0c d0       	rcall	.+24     	; 0x1d4 <uart0_init>
	InitADC();
 1bc:	b3 df       	rcall	.-154    	; 0x124 <InitADC>
		printf("%d\n",num);
		num = readadc(1);
		itoa(num, a, 10);
		printf("adc1: %s\n", a);
		*/
		readAndSend();
 1be:	ea df       	rcall	.-44     	; 0x194 <readAndSend>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	81 ee       	ldi	r24, 0xE1	; 225
 1c4:	94 e0       	ldi	r25, 0x04	; 4
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0xc>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x16>
 1d0:	00 00       	nop
 1d2:	f5 cf       	rjmp	.-22     	; 0x1be <main+0x4>

000001d4 <uart0_init>:
	#else
	UCSR1A &= ~(_BV(U2X1));
	#endif

	UCSR1C = _BV(UCSZ11) | _BV(UCSZ10); /* 8-bit data */
	UCSR1B = _BV(RXEN1) | _BV(TXEN1);   /* Enable RX and TX */
 1d4:	10 92 c5 00 	sts	0x00C5, r1
 1d8:	83 e3       	ldi	r24, 0x33	; 51
 1da:	80 93 c4 00 	sts	0x00C4, r24
 1de:	e0 ec       	ldi	r30, 0xC0	; 192
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	8d 7f       	andi	r24, 0xFD	; 253
 1e6:	80 83       	st	Z, r24
 1e8:	86 e0       	ldi	r24, 0x06	; 6
 1ea:	80 93 c2 00 	sts	0x00C2, r24
 1ee:	88 e1       	ldi	r24, 0x18	; 24
 1f0:	80 93 c1 00 	sts	0x00C1, r24
 1f4:	08 95       	ret

000001f6 <uart0_sendbyte>:

/*Simple Send/Receive characters without streams*/

void uart0_sendbyte(uint8_t data)
{
	while(!(UCSR0A & (1<<UDRE0)));
 1f6:	e0 ec       	ldi	r30, 0xC0	; 192
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	90 81       	ld	r25, Z
 1fc:	95 ff       	sbrs	r25, 5
 1fe:	fd cf       	rjmp	.-6      	; 0x1fa <uart0_sendbyte+0x4>
	UDR0 = data;
 200:	80 93 c6 00 	sts	0x00C6, r24
 204:	08 95       	ret

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
