
roomba_remote_station.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800200  000019ee  00001a82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000140c  0080022c  0080022c  00001aae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001aae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ae0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00001b20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023ec  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a11  00000000  00000000  0000414c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001836  00000000  00000000  00004b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004bc  00000000  00000000  00006394  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ec  00000000  00000000  00006850  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000179a  00000000  00000000  0000723c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  000089d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	9d c0       	rjmp	.+314    	; 0x140 <__bad_interrupt>
       6:	00 00       	nop
       8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c0       	rjmp	.+306    	; 0x140 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c0       	rjmp	.+294    	; 0x140 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c0       	rjmp	.+254    	; 0x140 <__bad_interrupt>
      42:	00 00       	nop
      44:	a3 c4       	rjmp	.+2374   	; 0x98c <__vector_17>
      46:	00 00       	nop
      48:	7b c0       	rjmp	.+246    	; 0x140 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c0       	rjmp	.+238    	; 0x140 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c0       	rjmp	.+230    	; 0x140 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	6d c0       	rjmp	.+218    	; 0x140 <__bad_interrupt>
      66:	00 00       	nop
      68:	6b c0       	rjmp	.+214    	; 0x140 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c0       	rjmp	.+206    	; 0x140 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c0       	rjmp	.+202    	; 0x140 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c0       	rjmp	.+198    	; 0x140 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5f c0       	rjmp	.+190    	; 0x140 <__bad_interrupt>
      82:	00 00       	nop
      84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c0       	rjmp	.+178    	; 0x140 <__bad_interrupt>
      8e:	00 00       	nop
      90:	57 c0       	rjmp	.+174    	; 0x140 <__bad_interrupt>
      92:	00 00       	nop
      94:	55 c0       	rjmp	.+170    	; 0x140 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c0       	rjmp	.+166    	; 0x140 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c0       	rjmp	.+162    	; 0x140 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c0       	rjmp	.+158    	; 0x140 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c0       	rjmp	.+154    	; 0x140 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c0       	rjmp	.+150    	; 0x140 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c0       	rjmp	.+146    	; 0x140 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c0       	rjmp	.+142    	; 0x140 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c0       	rjmp	.+138    	; 0x140 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c0       	rjmp	.+134    	; 0x140 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	41 c0       	rjmp	.+130    	; 0x140 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3f c0       	rjmp	.+126    	; 0x140 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c0       	rjmp	.+122    	; 0x140 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c0       	rjmp	.+118    	; 0x140 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c0       	rjmp	.+114    	; 0x140 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c0       	rjmp	.+110    	; 0x140 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c0       	rjmp	.+106    	; 0x140 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c0       	rjmp	.+102    	; 0x140 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c0       	rjmp	.+98     	; 0x140 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c0       	rjmp	.+94     	; 0x140 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ee 0a       	sbc	r14, r30
      e6:	2e 08       	sbc	r2, r14
      e8:	ee 0a       	sbc	r14, r30
      ea:	37 08       	sbc	r3, r7
      ec:	0f 09       	sbc	r16, r15
      ee:	53 09       	sbc	r21, r3
      f0:	6e 09       	sbc	r22, r14
      f2:	72 09       	sbc	r23, r2
      f4:	74 09       	sbc	r23, r4
      f6:	b7 09       	sbc	r27, r7
      f8:	eb 09       	sbc	r30, r11
      fa:	ed 09       	sbc	r30, r13
      fc:	65 0a       	sbc	r6, r21

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	ee ee       	ldi	r30, 0xEE	; 238
     116:	f9 e1       	ldi	r31, 0x19	; 25
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	ac 32       	cpi	r26, 0x2C	; 44
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	26 e1       	ldi	r18, 0x16	; 22
     12a:	ac e2       	ldi	r26, 0x2C	; 44
     12c:	b2 e0       	ldi	r27, 0x02	; 2
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	a8 33       	cpi	r26, 0x38	; 56
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 55 0b 	call	0x16aa	; 0x16aa <main>
     13c:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <_exit>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     142:	0f 92       	push	r0
     144:	1f 92       	push	r1
     146:	2f 92       	push	r2
     148:	3f 92       	push	r3
     14a:	4f 92       	push	r4
     14c:	5f 92       	push	r5
     14e:	6f 92       	push	r6
     150:	7f 92       	push	r7
     152:	8f 92       	push	r8
     154:	9f 92       	push	r9
     156:	af 92       	push	r10
     158:	bf 92       	push	r11
     15a:	cf 92       	push	r12
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	2f 93       	push	r18
     168:	3f 93       	push	r19
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	ef 93       	push	r30
     180:	ff 93       	push	r31
     182:	fc b7       	in	r31, 0x3c	; 60
     184:	ff 93       	push	r31
     186:	ff b7       	in	r31, 0x3f	; 63
     188:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     18a:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     18c:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     18e:	e0 93 30 16 	sts	0x1630, r30
        sts  KernelSp+1, r31
     192:	f0 93 31 16 	sts	0x1631, r31
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     196:	e0 91 2a 16 	lds	r30, 0x162A
        lds  r31, CurrentSp+1
     19a:	f0 91 2b 16 	lds	r31, 0x162B
        out  SPL, r30
     19e:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     1a0:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     1a2:	ff 91       	pop	r31
     1a4:	ff bf       	out	0x3f, r31	; 63
     1a6:	ff 91       	pop	r31
     1a8:	fc bf       	out	0x3c, r31	; 60
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	bf 91       	pop	r27
     1b4:	af 91       	pop	r26
     1b6:	9f 91       	pop	r25
     1b8:	8f 91       	pop	r24
     1ba:	7f 91       	pop	r23
     1bc:	6f 91       	pop	r22
     1be:	5f 91       	pop	r21
     1c0:	4f 91       	pop	r20
     1c2:	3f 91       	pop	r19
     1c4:	2f 91       	pop	r18
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	bf 90       	pop	r11
     1d4:	af 90       	pop	r10
     1d6:	9f 90       	pop	r9
     1d8:	8f 90       	pop	r8
     1da:	7f 90       	pop	r7
     1dc:	6f 90       	pop	r6
     1de:	5f 90       	pop	r5
     1e0:	4f 90       	pop	r4
     1e2:	3f 90       	pop	r3
     1e4:	2f 90       	pop	r2
     1e6:	1f 90       	pop	r1
     1e8:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1ea:	18 95       	reti

000001ec <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1ec:	0f 92       	push	r0
     1ee:	1f 92       	push	r1
     1f0:	2f 92       	push	r2
     1f2:	3f 92       	push	r3
     1f4:	4f 92       	push	r4
     1f6:	5f 92       	push	r5
     1f8:	6f 92       	push	r6
     1fa:	7f 92       	push	r7
     1fc:	8f 92       	push	r8
     1fe:	9f 92       	push	r9
     200:	af 92       	push	r10
     202:	bf 92       	push	r11
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	2f 93       	push	r18
     212:	3f 93       	push	r19
     214:	4f 93       	push	r20
     216:	5f 93       	push	r21
     218:	6f 93       	push	r22
     21a:	7f 93       	push	r23
     21c:	8f 93       	push	r24
     21e:	9f 93       	push	r25
     220:	af 93       	push	r26
     222:	bf 93       	push	r27
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
     22c:	fc b7       	in	r31, 0x3c	; 60
     22e:	ff 93       	push	r31
     230:	ff b7       	in	r31, 0x3f	; 63
     232:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     234:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     236:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     238:	e0 93 2a 16 	sts	0x162A, r30
        sts  CurrentSp+1, r31
     23c:	f0 93 2b 16 	sts	0x162B, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     240:	e0 91 30 16 	lds	r30, 0x1630
        lds  r31, KernelSp+1
     244:	f0 91 31 16 	lds	r31, 0x1631
        out  SPL, r30
     248:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     24a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     24c:	ff 91       	pop	r31
     24e:	ff bf       	out	0x3f, r31	; 63
     250:	ff 91       	pop	r31
     252:	fc bf       	out	0x3c, r31	; 60
     254:	ff 91       	pop	r31
     256:	ef 91       	pop	r30
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	bf 91       	pop	r27
     25e:	af 91       	pop	r26
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	7f 91       	pop	r23
     266:	6f 91       	pop	r22
     268:	5f 91       	pop	r21
     26a:	4f 91       	pop	r20
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	bf 90       	pop	r11
     27e:	af 90       	pop	r10
     280:	9f 90       	pop	r9
     282:	8f 90       	pop	r8
     284:	7f 90       	pop	r7
     286:	6f 90       	pop	r6
     288:	5f 90       	pop	r5
     28a:	4f 90       	pop	r4
     28c:	3f 90       	pop	r3
     28e:	2f 90       	pop	r2
     290:	1f 90       	pop	r1
     292:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     294:	08 95       	ret

00000296 <readadc>:
	ADCSRA|=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //ENABLE ADC, PRESCALER 128
}
uint16_t readadc(uint8_t ch)
{
	ch&=0b00000111;         //ANDing to limit input to 7
	ADMUX = (ADMUX & 0xf8)|ch;  //Clear last 3 bits of ADMUX, OR with ch
     296:	ec e7       	ldi	r30, 0x7C	; 124
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	90 81       	ld	r25, Z
	ADMUX|=(1<<REFS0);
	ADCSRA|=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //ENABLE ADC, PRESCALER 128
}
uint16_t readadc(uint8_t ch)
{
	ch&=0b00000111;         //ANDing to limit input to 7
     29c:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xf8)|ch;  //Clear last 3 bits of ADMUX, OR with ch
     29e:	98 7f       	andi	r25, 0xF8	; 248
     2a0:	89 2b       	or	r24, r25
     2a2:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADSC);        //START CONVERSION
     2a4:	ea e7       	ldi	r30, 0x7A	; 122
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	80 81       	ld	r24, Z
     2aa:	80 64       	ori	r24, 0x40	; 64
     2ac:	80 83       	st	Z, r24
	while((ADCSRA)&(1<<ADSC));    //WAIT UNTIL CONVERSION IS COMPLETE
     2ae:	80 81       	ld	r24, Z
     2b0:	86 fd       	sbrc	r24, 6
     2b2:	fd cf       	rjmp	.-6      	; 0x2ae <readadc+0x18>
	return(ADC);        //RETURN ADC VALUE
     2b4:	80 91 78 00 	lds	r24, 0x0078
     2b8:	90 91 79 00 	lds	r25, 0x0079
     2bc:	08 95       	ret

000002be <receive_and_update>:
			Task_Terminate();
		}
		
		curbyte = uart0_recvbyte();
		count = 0;
		while (curbyte != '$')
     2be:	d6 e0       	ldi	r29, 0x06	; 6
{
	uint8_t curbyte;
	uint8_t count;
	while(1)
	{
		if (isDead) {
     2c0:	80 91 2c 02 	lds	r24, 0x022C
     2c4:	88 23       	and	r24, r24
     2c6:	21 f1       	breq	.+72     	; 0x310 <receive_and_update+0x52>
			Task_Terminate();
     2c8:	0e 94 2b 0b 	call	0x1656	; 0x1656 <Task_Terminate>
     2cc:	21 c0       	rjmp	.+66     	; 0x310 <receive_and_update+0x52>
     2ce:	c1 50       	subi	r28, 0x01	; 1
		
		curbyte = uart0_recvbyte();
		count = 0;
		while (curbyte != '$')
		{
			if (++count > 6)
     2d0:	11 f4       	brne	.+4      	; 0x2d6 <receive_and_update+0x18>
     2d2:	19 c0       	rjmp	.+50     	; 0x306 <receive_and_update+0x48>
			Task_Terminate();
		}
		
		curbyte = uart0_recvbyte();
		count = 0;
		while (curbyte != '$')
     2d4:	cd 2f       	mov	r28, r29
		{
			if (++count > 6)
				goto receive_and_update_continue;
				
			curbyte = uart0_recvbyte();
     2d6:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <uart0_recvbyte>
			Task_Terminate();
		}
		
		curbyte = uart0_recvbyte();
		count = 0;
		while (curbyte != '$')
     2da:	84 32       	cpi	r24, 0x24	; 36
     2dc:	c1 f7       	brne	.-16     	; 0x2ce <receive_and_update+0x10>
				goto receive_and_update_continue;
				
			curbyte = uart0_recvbyte();
		}
	
		last_direction = direction;
     2de:	80 91 04 02 	lds	r24, 0x0204
     2e2:	80 93 03 02 	sts	0x0203, r24
		last_speed = speed;
     2e6:	80 91 02 02 	lds	r24, 0x0202
     2ea:	80 93 01 02 	sts	0x0201, r24
	
		direction = uart0_recvbyte();
     2ee:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <uart0_recvbyte>
     2f2:	80 93 04 02 	sts	0x0204, r24
		speed = uart0_recvbyte();
     2f6:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <uart0_recvbyte>
     2fa:	80 93 02 02 	sts	0x0202, r24
		fire = uart0_recvbyte();
     2fe:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <uart0_recvbyte>
     302:	80 93 00 02 	sts	0x0200, r24
		
receive_and_update_continue:
		Task_Sleep(8);	
     306:	88 e0       	ldi	r24, 0x08	; 8
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e 94 3f 0b 	call	0x167e	; 0x167e <Task_Sleep>
	}
     30e:	d8 cf       	rjmp	.-80     	; 0x2c0 <receive_and_update+0x2>
	{
		if (isDead) {
			Task_Terminate();
		}
		
		curbyte = uart0_recvbyte();
     310:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <uart0_recvbyte>
		count = 0;
		while (curbyte != '$')
     314:	84 32       	cpi	r24, 0x24	; 36
     316:	f1 f6       	brne	.-68     	; 0x2d4 <receive_and_update+0x16>
     318:	e2 cf       	rjmp	.-60     	; 0x2de <receive_and_update+0x20>

0000031a <switch_uart_19200>:
volatile uint16_t photores_neutral;
volatile uint8_t isDead = 0;

void switch_uart_19200()
{
	DDRB |= (1<<PB0);		//Use ping 53 for BRC
     31a:	20 9a       	sbi	0x04, 0	; 4
	PORTB |= (1<<PB0);		//Initialize BRC as high
     31c:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     31e:	2f ef       	ldi	r18, 0xFF	; 255
     320:	87 ea       	ldi	r24, 0xA7	; 167
     322:	91 e6       	ldi	r25, 0x61	; 97
     324:	21 50       	subi	r18, 0x01	; 1
     326:	80 40       	sbci	r24, 0x00	; 0
     328:	90 40       	sbci	r25, 0x00	; 0
     32a:	e1 f7       	brne	.-8      	; 0x324 <switch_uart_19200+0xa>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <switch_uart_19200+0x14>
     32e:	00 00       	nop
	_delay_ms(2000);
	
	//Pulse BRC three times
	PORTB &= ~(1<<PB0);
     330:	28 98       	cbi	0x05, 0	; 5
     332:	2f ef       	ldi	r18, 0xFF	; 255
     334:	81 ee       	ldi	r24, 0xE1	; 225
     336:	94 e0       	ldi	r25, 0x04	; 4
     338:	21 50       	subi	r18, 0x01	; 1
     33a:	80 40       	sbci	r24, 0x00	; 0
     33c:	90 40       	sbci	r25, 0x00	; 0
     33e:	e1 f7       	brne	.-8      	; 0x338 <switch_uart_19200+0x1e>
     340:	00 c0       	rjmp	.+0      	; 0x342 <switch_uart_19200+0x28>
     342:	00 00       	nop
	_delay_ms(100);
	PORTB |= (1<<PB0);
     344:	28 9a       	sbi	0x05, 0	; 5
     346:	2f ef       	ldi	r18, 0xFF	; 255
     348:	81 ee       	ldi	r24, 0xE1	; 225
     34a:	94 e0       	ldi	r25, 0x04	; 4
     34c:	21 50       	subi	r18, 0x01	; 1
     34e:	80 40       	sbci	r24, 0x00	; 0
     350:	90 40       	sbci	r25, 0x00	; 0
     352:	e1 f7       	brne	.-8      	; 0x34c <switch_uart_19200+0x32>
     354:	00 c0       	rjmp	.+0      	; 0x356 <switch_uart_19200+0x3c>
     356:	00 00       	nop
	_delay_ms(100);
	
	PORTB &= ~(1<<PB0);
     358:	28 98       	cbi	0x05, 0	; 5
     35a:	2f ef       	ldi	r18, 0xFF	; 255
     35c:	81 ee       	ldi	r24, 0xE1	; 225
     35e:	94 e0       	ldi	r25, 0x04	; 4
     360:	21 50       	subi	r18, 0x01	; 1
     362:	80 40       	sbci	r24, 0x00	; 0
     364:	90 40       	sbci	r25, 0x00	; 0
     366:	e1 f7       	brne	.-8      	; 0x360 <switch_uart_19200+0x46>
     368:	00 c0       	rjmp	.+0      	; 0x36a <switch_uart_19200+0x50>
     36a:	00 00       	nop
	_delay_ms(100);
	PORTB |= (1<<PB0);
     36c:	28 9a       	sbi	0x05, 0	; 5
     36e:	2f ef       	ldi	r18, 0xFF	; 255
     370:	81 ee       	ldi	r24, 0xE1	; 225
     372:	94 e0       	ldi	r25, 0x04	; 4
     374:	21 50       	subi	r18, 0x01	; 1
     376:	80 40       	sbci	r24, 0x00	; 0
     378:	90 40       	sbci	r25, 0x00	; 0
     37a:	e1 f7       	brne	.-8      	; 0x374 <switch_uart_19200+0x5a>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <switch_uart_19200+0x64>
     37e:	00 00       	nop
	_delay_ms(100);
	
	PORTB &= ~(1<<PB0);
     380:	28 98       	cbi	0x05, 0	; 5
     382:	2f ef       	ldi	r18, 0xFF	; 255
     384:	81 ee       	ldi	r24, 0xE1	; 225
     386:	94 e0       	ldi	r25, 0x04	; 4
     388:	21 50       	subi	r18, 0x01	; 1
     38a:	80 40       	sbci	r24, 0x00	; 0
     38c:	90 40       	sbci	r25, 0x00	; 0
     38e:	e1 f7       	brne	.-8      	; 0x388 <switch_uart_19200+0x6e>
     390:	00 c0       	rjmp	.+0      	; 0x392 <switch_uart_19200+0x78>
     392:	00 00       	nop
	_delay_ms(100);
	PORTB |= (1<<PB0);
     394:	28 9a       	sbi	0x05, 0	; 5
     396:	08 95       	ret

00000398 <start_robot_safe>:
}

void start_robot_safe()
{
	uart1_sendbyte(128);		//Send START command
     398:	80 e8       	ldi	r24, 0x80	; 128
     39a:	0e 94 81 0b 	call	0x1702	; 0x1702 <uart1_sendbyte>
	uart1_sendbyte(131);		//Switch to SAFE mode
     39e:	83 e8       	ldi	r24, 0x83	; 131
     3a0:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <uart1_sendbyte>
     3a4:	08 95       	ret

000003a6 <beep>:
}

void beep()
{
	//Play the beep "song" created in roomba_init
	uart1_sendbyte(141);
     3a6:	8d e8       	ldi	r24, 0x8D	; 141
     3a8:	0e 94 81 0b 	call	0x1702	; 0x1702 <uart1_sendbyte>
	uart1_sendbyte(0);
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <uart1_sendbyte>
     3b2:	08 95       	ret

000003b4 <calibratePhotores>:
}

void calibratePhotores()
{
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	ca e0       	ldi	r28, 0x0A	; 10
     3ba:	d0 e0       	ldi	r29, 0x00	; 0
	int i;

	//Sample the ambient lighting 10 times
	for(i=0; i<10; i++)
	{
		photores_neutral += readadc(PHOTORESIS_PIN);
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	6b df       	rcall	.-298    	; 0x296 <readadc>
     3c0:	20 91 21 16 	lds	r18, 0x1621
     3c4:	30 91 22 16 	lds	r19, 0x1622
     3c8:	82 0f       	add	r24, r18
     3ca:	93 1f       	adc	r25, r19
     3cc:	90 93 22 16 	sts	0x1622, r25
     3d0:	80 93 21 16 	sts	0x1621, r24
     3d4:	2f ef       	ldi	r18, 0xFF	; 255
     3d6:	81 ee       	ldi	r24, 0xE1	; 225
     3d8:	94 e0       	ldi	r25, 0x04	; 4
     3da:	21 50       	subi	r18, 0x01	; 1
     3dc:	80 40       	sbci	r24, 0x00	; 0
     3de:	90 40       	sbci	r25, 0x00	; 0
     3e0:	e1 f7       	brne	.-8      	; 0x3da <calibratePhotores+0x26>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <calibratePhotores+0x30>
     3e4:	00 00       	nop
     3e6:	21 97       	sbiw	r28, 0x01	; 1
void calibratePhotores()
{
	int i;

	//Sample the ambient lighting 10 times
	for(i=0; i<10; i++)
     3e8:	49 f7       	brne	.-46     	; 0x3bc <calibratePhotores+0x8>
	{
		photores_neutral += readadc(PHOTORESIS_PIN);
		_delay_ms(100);
	}
	photores_neutral /= i;     //Use the average as neutral value
     3ea:	20 91 21 16 	lds	r18, 0x1621
     3ee:	30 91 22 16 	lds	r19, 0x1622
     3f2:	ad ec       	ldi	r26, 0xCD	; 205
     3f4:	bc ec       	ldi	r27, 0xCC	; 204
     3f6:	0e 94 b6 0c 	call	0x196c	; 0x196c <__umulhisi3>
     3fa:	96 95       	lsr	r25
     3fc:	87 95       	ror	r24
     3fe:	96 95       	lsr	r25
     400:	87 95       	ror	r24
     402:	96 95       	lsr	r25
     404:	87 95       	ror	r24
     406:	90 93 22 16 	sts	0x1622, r25
     40a:	80 93 21 16 	sts	0x1621, r24
	photores_thres = 1.1*photores_neutral;
     40e:	60 91 21 16 	lds	r22, 0x1621
     412:	70 91 22 16 	lds	r23, 0x1622
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 bd 0b 	call	0x177a	; 0x177a <__floatunsisf>
     41e:	2d ec       	ldi	r18, 0xCD	; 205
     420:	3c ec       	ldi	r19, 0xCC	; 204
     422:	4c e8       	ldi	r20, 0x8C	; 140
     424:	5f e3       	ldi	r21, 0x3F	; 63
     426:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsf3>
     42a:	0e 94 91 0b 	call	0x1722	; 0x1722 <__fixunssfsi>
     42e:	70 93 20 16 	sts	0x1620, r23
     432:	60 93 1f 16 	sts	0x161F, r22
}
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	08 95       	ret

0000043c <roomba_init>:

void roomba_init()
{
	//Default values
	direction = NOT_MOVING;
     43c:	8a e7       	ldi	r24, 0x7A	; 122
     43e:	80 93 04 02 	sts	0x0204, r24
	speed = NOT_MOVING;
     442:	80 93 02 02 	sts	0x0202, r24
	
	switch_uart_19200();
     446:	69 df       	rcall	.-302    	; 0x31a <switch_uart_19200>
	start_robot_safe();
     448:	a7 df       	rcall	.-178    	; 0x398 <start_robot_safe>
	calibratePhotores();
     44a:	b4 df       	rcall	.-152    	; 0x3b4 <calibratePhotores>
	
	//Write a "song" for the beep into slot 0
	//Example from: http://www.robotappstore.com/Knowledge-Base/4-How-to-Send-Commands-to-Roomba/18.html
	uart1_sendbyte(140);
     44c:	8c e8       	ldi	r24, 0x8C	; 140
     44e:	0e 94 81 0b 	call	0x1702	; 0x1702 <uart1_sendbyte>
	uart1_sendbyte(0);
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	0e 94 81 0b 	call	0x1702	; 0x1702 <uart1_sendbyte>
	uart1_sendbyte(1);
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	0e 94 81 0b 	call	0x1702	; 0x1702 <uart1_sendbyte>
	uart1_sendbyte(62);
     45e:	8e e3       	ldi	r24, 0x3E	; 62
     460:	0e 94 81 0b 	call	0x1702	; 0x1702 <uart1_sendbyte>
	uart1_sendbyte(32);
     464:	80 e2       	ldi	r24, 0x20	; 32
     466:	0e 94 81 0b 	call	0x1702	; 0x1702 <uart1_sendbyte>
	beep();
     46a:	9d cf       	rjmp	.-198    	; 0x3a6 <beep>
     46c:	08 95       	ret

0000046e <drive>:
}

void drive(int16_t vel, int16_t rad)
{
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	8b 01       	movw	r16, r22
     478:	85 3f       	cpi	r24, 0xF5	; 245
     47a:	21 e0       	ldi	r18, 0x01	; 1
     47c:	92 07       	cpc	r25, r18
     47e:	14 f0       	brlt	.+4      	; 0x484 <drive+0x16>
     480:	84 ef       	ldi	r24, 0xF4	; 244
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	ec 01       	movw	r28, r24
     486:	cc 30       	cpi	r28, 0x0C	; 12
     488:	8e ef       	ldi	r24, 0xFE	; 254
     48a:	d8 07       	cpc	r29, r24
     48c:	14 f4       	brge	.+4      	; 0x492 <drive+0x24>
     48e:	cc e0       	ldi	r28, 0x0C	; 12
     490:	de ef       	ldi	r29, 0xFE	; 254
		vel = -500;
	else if (vel > 500)
		vel = 500;
	
	//Making sure radius is within valid range
	if(rad < -2000)
     492:	00 33       	cpi	r16, 0x30	; 48
     494:	28 ef       	ldi	r18, 0xF8	; 248
     496:	12 07       	cpc	r17, r18
     498:	4c f0       	brlt	.+18     	; 0x4ac <drive+0x3e>
		rad = -2000;
	else if(rad > 2000 && rad != DRIVE_STRAIGHT)	//32767 and 32768 are special cases to drive straight
     49a:	c8 01       	movw	r24, r16
     49c:	81 5d       	subi	r24, 0xD1	; 209
     49e:	97 40       	sbci	r25, 0x07	; 7
     4a0:	8e 32       	cpi	r24, 0x2E	; 46
     4a2:	98 47       	sbci	r25, 0x78	; 120
     4a4:	28 f4       	brcc	.+10     	; 0x4b0 <drive+0x42>
		rad = 2000;
     4a6:	00 ed       	ldi	r16, 0xD0	; 208
     4a8:	17 e0       	ldi	r17, 0x07	; 7
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <drive+0x42>
	else if (vel > 500)
		vel = 500;
	
	//Making sure radius is within valid range
	if(rad < -2000)
		rad = -2000;
     4ac:	00 e3       	ldi	r16, 0x30	; 48
     4ae:	18 ef       	ldi	r17, 0xF8	; 248
	else if(rad > 2000 && rad != DRIVE_STRAIGHT)	//32767 and 32768 are special cases to drive straight
		rad = 2000;
	
	uart1_sendbyte(137);				//Opcode for drive
     4b0:	89 e8       	ldi	r24, 0x89	; 137
     4b2:	0e 94 81 0b 	call	0x1702	; 0x1702 <uart1_sendbyte>
	uart1_sendbyte(vel >> 8);			//Velocity high byte
     4b6:	8d 2f       	mov	r24, r29
     4b8:	0e 94 81 0b 	call	0x1702	; 0x1702 <uart1_sendbyte>
	uart1_sendbyte(vel);				//velocity low byte
     4bc:	8c 2f       	mov	r24, r28
     4be:	0e 94 81 0b 	call	0x1702	; 0x1702 <uart1_sendbyte>
	uart1_sendbyte(rad >> 8);			//Radius high byte
     4c2:	81 2f       	mov	r24, r17
     4c4:	0e 94 81 0b 	call	0x1702	; 0x1702 <uart1_sendbyte>
	uart1_sendbyte(rad);				//Radius low byte
     4c8:	80 2f       	mov	r24, r16
     4ca:	0e 94 81 0b 	call	0x1702	; 0x1702 <uart1_sendbyte>
}
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	1f 91       	pop	r17
     4d4:	0f 91       	pop	r16
     4d6:	08 95       	ret

000004d8 <move_as_global>:
				break;
			case POSITIVE_LOW:
				rad = 500;
				break;
			case POSITIVE_HIGH:
				rad = 1;
     4d8:	66 24       	eor	r6, r6
     4da:	63 94       	inc	r6
     4dc:	71 2c       	mov	r7, r1
				vel = 0;
				break;
		}
	
		if (rad == 1 || rad == -1) {
			vel = 250;
     4de:	0a ef       	ldi	r16, 0xFA	; 250
     4e0:	10 e0       	ldi	r17, 0x00	; 0
			case POSITIVE_HIGH:
				vel = 500;
				break;
			case NOT_MOVING:
			default:
				vel = 0;
     4e2:	c1 2c       	mov	r12, r1
     4e4:	d1 2c       	mov	r13, r1
				break;
			case POSITIVE_LOW:
				vel = 250;
				break;
			case POSITIVE_HIGH:
				vel = 500;
     4e6:	0f 2e       	mov	r0, r31
     4e8:	f4 ef       	ldi	r31, 0xF4	; 244
     4ea:	ef 2e       	mov	r14, r31
     4ec:	f0 2d       	mov	r31, r0
     4ee:	ff 24       	eor	r15, r15
     4f0:	f3 94       	inc	r15
		{
			case NEGATIVE_HIGH:
				vel = -500;
				break;
			case NEGATIVE_LOW:
				vel = -250;
     4f2:	0f 2e       	mov	r0, r31
     4f4:	f6 e0       	ldi	r31, 0x06	; 6
     4f6:	8f 2e       	mov	r8, r31
     4f8:	f0 2d       	mov	r31, r0
     4fa:	99 24       	eor	r9, r9
     4fc:	9a 94       	dec	r9
		}
	
		switch(speed)
		{
			case NEGATIVE_HIGH:
				vel = -500;
     4fe:	0f 2e       	mov	r0, r31
     500:	fc e0       	ldi	r31, 0x0C	; 12
     502:	af 2e       	mov	r10, r31
     504:	f0 2d       	mov	r31, r0
     506:	0f 2e       	mov	r0, r31
     508:	fe ef       	ldi	r31, 0xFE	; 254
     50a:	bf 2e       	mov	r11, r31
     50c:	f0 2d       	mov	r31, r0
			goto move_as_global_continue;
		
		switch(direction)
		{
			case NEGATIVE_HIGH:
				rad = -1;
     50e:	df ef       	ldi	r29, 0xFF	; 255
     510:	cf ef       	ldi	r28, 0xFF	; 255
{
	int16_t vel;
	int16_t rad;
	while (1)
	{
		if (isDead) {
     512:	80 91 2c 02 	lds	r24, 0x022C
     516:	81 11       	cpse	r24, r1
			Task_Terminate();
     518:	0e 94 2b 0b 	call	0x1656	; 0x1656 <Task_Terminate>
		}
		if (direction == last_direction && speed == last_speed)
     51c:	90 91 04 02 	lds	r25, 0x0204
     520:	80 91 03 02 	lds	r24, 0x0203
     524:	98 13       	cpse	r25, r24
     526:	07 c0       	rjmp	.+14     	; 0x536 <move_as_global+0x5e>
     528:	90 91 02 02 	lds	r25, 0x0202
     52c:	80 91 01 02 	lds	r24, 0x0201
     530:	98 17       	cp	r25, r24
     532:	09 f4       	brne	.+2      	; 0x536 <move_as_global+0x5e>
     534:	7d c0       	rjmp	.+250    	; 0x630 <move_as_global+0x158>
			goto move_as_global_continue;
		
		switch(direction)
     536:	80 91 04 02 	lds	r24, 0x0204
     53a:	80 35       	cpi	r24, 0x50	; 80
     53c:	09 f4       	brne	.+2      	; 0x540 <move_as_global+0x68>
     53e:	a8 c0       	rjmp	.+336    	; 0x690 <move_as_global+0x1b8>
     540:	18 f4       	brcc	.+6      	; 0x548 <move_as_global+0x70>
     542:	8e 34       	cpi	r24, 0x4E	; 78
     544:	41 f0       	breq	.+16     	; 0x556 <move_as_global+0x7e>
     546:	84 c0       	rjmp	.+264    	; 0x650 <move_as_global+0x178>
     548:	8e 36       	cpi	r24, 0x6E	; 110
     54a:	09 f4       	brne	.+2      	; 0x54e <move_as_global+0x76>
     54c:	91 c0       	rjmp	.+290    	; 0x670 <move_as_global+0x198>
     54e:	80 37       	cpi	r24, 0x70	; 112
     550:	09 f4       	brne	.+2      	; 0x554 <move_as_global+0x7c>
     552:	8e c0       	rjmp	.+284    	; 0x670 <move_as_global+0x198>
     554:	7d c0       	rjmp	.+250    	; 0x650 <move_as_global+0x178>
			default:
				rad = 0;
				break;
		}
	
		switch(speed)
     556:	80 91 02 02 	lds	r24, 0x0202
     55a:	80 35       	cpi	r24, 0x50	; 80
     55c:	29 f1       	breq	.+74     	; 0x5a8 <move_as_global+0xd0>
     55e:	18 f4       	brcc	.+6      	; 0x566 <move_as_global+0x8e>
     560:	8e 34       	cpi	r24, 0x4E	; 78
     562:	f1 f1       	breq	.+124    	; 0x5e0 <move_as_global+0x108>
     564:	2f c0       	rjmp	.+94     	; 0x5c4 <move_as_global+0xec>
     566:	8e 36       	cpi	r24, 0x6E	; 110
     568:	19 f0       	breq	.+6      	; 0x570 <move_as_global+0x98>
     56a:	80 37       	cpi	r24, 0x70	; 112
     56c:	79 f0       	breq	.+30     	; 0x58c <move_as_global+0xb4>
     56e:	2a c0       	rjmp	.+84     	; 0x5c4 <move_as_global+0xec>
			goto move_as_global_continue;
		
		switch(direction)
		{
			case NEGATIVE_HIGH:
				rad = -1;
     570:	6d 2f       	mov	r22, r29
     572:	7c 2f       	mov	r23, r28
     574:	08 c0       	rjmp	.+16     	; 0x586 <move_as_global+0xae>
			case POSITIVE_HIGH:
				rad = 1;
				break;
			case NOT_MOVING:
			default:
				rad = 0;
     576:	6c 2d       	mov	r22, r12
     578:	7d 2d       	mov	r23, r13
     57a:	05 c0       	rjmp	.+10     	; 0x586 <move_as_global+0xae>
		{
			case NEGATIVE_HIGH:
				rad = -1;
				break;
			case NEGATIVE_LOW:
				rad = 500;
     57c:	6e 2d       	mov	r22, r14
     57e:	7f 2d       	mov	r23, r15
     580:	02 c0       	rjmp	.+4      	; 0x586 <move_as_global+0xae>
				break;
			case POSITIVE_LOW:
				rad = 500;
				break;
			case POSITIVE_HIGH:
				rad = 1;
     582:	66 2d       	mov	r22, r6
     584:	77 2d       	mov	r23, r7
		{
			case NEGATIVE_HIGH:
				vel = -500;
				break;
			case NEGATIVE_LOW:
				vel = -250;
     586:	88 2d       	mov	r24, r8
     588:	99 2d       	mov	r25, r9
				break;
     58a:	2e c0       	rjmp	.+92     	; 0x5e8 <move_as_global+0x110>
			goto move_as_global_continue;
		
		switch(direction)
		{
			case NEGATIVE_HIGH:
				rad = -1;
     58c:	6d 2f       	mov	r22, r29
     58e:	7c 2f       	mov	r23, r28
     590:	08 c0       	rjmp	.+16     	; 0x5a2 <move_as_global+0xca>
			case POSITIVE_HIGH:
				rad = 1;
				break;
			case NOT_MOVING:
			default:
				rad = 0;
     592:	6c 2d       	mov	r22, r12
     594:	7d 2d       	mov	r23, r13
     596:	05 c0       	rjmp	.+10     	; 0x5a2 <move_as_global+0xca>
		{
			case NEGATIVE_HIGH:
				rad = -1;
				break;
			case NEGATIVE_LOW:
				rad = 500;
     598:	6e 2d       	mov	r22, r14
     59a:	7f 2d       	mov	r23, r15
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <move_as_global+0xca>
				break;
			case POSITIVE_LOW:
				rad = 500;
				break;
			case POSITIVE_HIGH:
				rad = 1;
     59e:	66 2d       	mov	r22, r6
     5a0:	77 2d       	mov	r23, r7
				break;
			case NEGATIVE_LOW:
				vel = -250;
				break;
			case POSITIVE_LOW:
				vel = 250;
     5a2:	80 2f       	mov	r24, r16
     5a4:	91 2f       	mov	r25, r17
				break;
     5a6:	20 c0       	rjmp	.+64     	; 0x5e8 <move_as_global+0x110>
			goto move_as_global_continue;
		
		switch(direction)
		{
			case NEGATIVE_HIGH:
				rad = -1;
     5a8:	6d 2f       	mov	r22, r29
     5aa:	7c 2f       	mov	r23, r28
     5ac:	08 c0       	rjmp	.+16     	; 0x5be <move_as_global+0xe6>
			case POSITIVE_HIGH:
				rad = 1;
				break;
			case NOT_MOVING:
			default:
				rad = 0;
     5ae:	6c 2d       	mov	r22, r12
     5b0:	7d 2d       	mov	r23, r13
     5b2:	05 c0       	rjmp	.+10     	; 0x5be <move_as_global+0xe6>
		{
			case NEGATIVE_HIGH:
				rad = -1;
				break;
			case NEGATIVE_LOW:
				rad = 500;
     5b4:	6e 2d       	mov	r22, r14
     5b6:	7f 2d       	mov	r23, r15
     5b8:	02 c0       	rjmp	.+4      	; 0x5be <move_as_global+0xe6>
				break;
			case POSITIVE_LOW:
				rad = 500;
				break;
			case POSITIVE_HIGH:
				rad = 1;
     5ba:	66 2d       	mov	r22, r6
     5bc:	77 2d       	mov	r23, r7
				break;
			case POSITIVE_LOW:
				vel = 250;
				break;
			case POSITIVE_HIGH:
				vel = 500;
     5be:	8e 2d       	mov	r24, r14
     5c0:	9f 2d       	mov	r25, r15
				break;
     5c2:	12 c0       	rjmp	.+36     	; 0x5e8 <move_as_global+0x110>
			goto move_as_global_continue;
		
		switch(direction)
		{
			case NEGATIVE_HIGH:
				rad = -1;
     5c4:	6d 2f       	mov	r22, r29
     5c6:	7c 2f       	mov	r23, r28
     5c8:	08 c0       	rjmp	.+16     	; 0x5da <move_as_global+0x102>
			case POSITIVE_HIGH:
				rad = 1;
				break;
			case NOT_MOVING:
			default:
				rad = 0;
     5ca:	6c 2d       	mov	r22, r12
     5cc:	7d 2d       	mov	r23, r13
     5ce:	05 c0       	rjmp	.+10     	; 0x5da <move_as_global+0x102>
		{
			case NEGATIVE_HIGH:
				rad = -1;
				break;
			case NEGATIVE_LOW:
				rad = 500;
     5d0:	6e 2d       	mov	r22, r14
     5d2:	7f 2d       	mov	r23, r15
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <move_as_global+0x102>
				break;
			case POSITIVE_LOW:
				rad = 500;
				break;
			case POSITIVE_HIGH:
				rad = 1;
     5d6:	66 2d       	mov	r22, r6
     5d8:	77 2d       	mov	r23, r7
			case POSITIVE_HIGH:
				vel = 500;
				break;
			case NOT_MOVING:
			default:
				vel = 0;
     5da:	8c 2d       	mov	r24, r12
     5dc:	9d 2d       	mov	r25, r13
				break;
     5de:	04 c0       	rjmp	.+8      	; 0x5e8 <move_as_global+0x110>
			goto move_as_global_continue;
		
		switch(direction)
		{
			case NEGATIVE_HIGH:
				rad = -1;
     5e0:	6d 2f       	mov	r22, r29
     5e2:	7c 2f       	mov	r23, r28
		}
	
		switch(speed)
		{
			case NEGATIVE_HIGH:
				vel = -500;
     5e4:	8a 2d       	mov	r24, r10
     5e6:	9b 2d       	mov	r25, r11
			default:
				vel = 0;
				break;
		}
	
		if (rad == 1 || rad == -1) {
     5e8:	61 30       	cpi	r22, 0x01	; 1
     5ea:	71 05       	cpc	r23, r1
     5ec:	61 f0       	breq	.+24     	; 0x606 <move_as_global+0x12e>
     5ee:	6f 3f       	cpi	r22, 0xFF	; 255
     5f0:	2f ef       	ldi	r18, 0xFF	; 255
     5f2:	72 07       	cpc	r23, r18
     5f4:	59 f0       	breq	.+22     	; 0x60c <move_as_global+0x134>
			vel = 250;
		} else if (rad == 0 && vel == 0) {
     5f6:	61 15       	cp	r22, r1
     5f8:	71 05       	cpc	r23, r1
     5fa:	c9 f4       	brne	.+50     	; 0x62e <move_as_global+0x156>
     5fc:	00 97       	sbiw	r24, 0x00	; 0
     5fe:	b9 f4       	brne	.+46     	; 0x62e <move_as_global+0x156>
			vel = 250;
     600:	80 2f       	mov	r24, r16
     602:	91 2f       	mov	r25, r17
     604:	14 c0       	rjmp	.+40     	; 0x62e <move_as_global+0x156>
				vel = 0;
				break;
		}
	
		if (rad == 1 || rad == -1) {
			vel = 250;
     606:	80 2f       	mov	r24, r16
     608:	91 2f       	mov	r25, r17
     60a:	11 c0       	rjmp	.+34     	; 0x62e <move_as_global+0x156>
     60c:	80 2f       	mov	r24, r16
     60e:	91 2f       	mov	r25, r17
     610:	0e c0       	rjmp	.+28     	; 0x62e <move_as_global+0x156>
			case POSITIVE_HIGH:
				rad = 1;
				break;
			case NOT_MOVING:
			default:
				rad = 0;
     612:	6c 2d       	mov	r22, r12
     614:	7d 2d       	mov	r23, r13
		}
	
		switch(speed)
		{
			case NEGATIVE_HIGH:
				vel = -500;
     616:	8a 2d       	mov	r24, r10
     618:	9b 2d       	mov	r25, r11
     61a:	09 c0       	rjmp	.+18     	; 0x62e <move_as_global+0x156>
		{
			case NEGATIVE_HIGH:
				rad = -1;
				break;
			case NEGATIVE_LOW:
				rad = 500;
     61c:	6e 2d       	mov	r22, r14
     61e:	7f 2d       	mov	r23, r15
		}
	
		switch(speed)
		{
			case NEGATIVE_HIGH:
				vel = -500;
     620:	8a 2d       	mov	r24, r10
     622:	9b 2d       	mov	r25, r11
     624:	04 c0       	rjmp	.+8      	; 0x62e <move_as_global+0x156>
				break;
			case POSITIVE_LOW:
				rad = 500;
				break;
			case POSITIVE_HIGH:
				rad = 1;
     626:	66 2d       	mov	r22, r6
     628:	77 2d       	mov	r23, r7
				vel = 0;
				break;
		}
	
		if (rad == 1 || rad == -1) {
			vel = 250;
     62a:	80 2f       	mov	r24, r16
     62c:	91 2f       	mov	r25, r17
		} else if (rad == 0 && vel == 0) {
			vel = 250;
		}
	
		drive(vel, rad);
     62e:	1f df       	rcall	.-450    	; 0x46e <drive>

move_as_global_continue:
		if (fire == HOLD)
     630:	80 91 00 02 	lds	r24, 0x0200
     634:	88 34       	cpi	r24, 0x48	; 72
     636:	11 f4       	brne	.+4      	; 0x63c <move_as_global+0x164>
			PORTB &= ~(1<<PB2);	//pin 51 off
     638:	2a 98       	cbi	0x05, 2	; 5
     63a:	05 c0       	rjmp	.+10     	; 0x646 <move_as_global+0x16e>
		else
		if (fire == FIRE)
     63c:	80 91 00 02 	lds	r24, 0x0200
     640:	86 34       	cpi	r24, 0x46	; 70
     642:	09 f4       	brne	.+2      	; 0x646 <move_as_global+0x16e>
			PORTB |= (1<<PB2);	//pin 51 on
     644:	2a 9a       	sbi	0x05, 2	; 5
		Task_Sleep(3);
     646:	83 e0       	ldi	r24, 0x03	; 3
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 3f 0b 	call	0x167e	; 0x167e <Task_Sleep>
	}
     64e:	61 cf       	rjmp	.-318    	; 0x512 <move_as_global+0x3a>
			default:
				rad = 0;
				break;
		}
	
		switch(speed)
     650:	80 91 02 02 	lds	r24, 0x0202
     654:	80 35       	cpi	r24, 0x50	; 80
     656:	09 f4       	brne	.+2      	; 0x65a <move_as_global+0x182>
     658:	aa cf       	rjmp	.-172    	; 0x5ae <move_as_global+0xd6>
     65a:	18 f4       	brcc	.+6      	; 0x662 <move_as_global+0x18a>
     65c:	8e 34       	cpi	r24, 0x4E	; 78
     65e:	c9 f2       	breq	.-78     	; 0x612 <move_as_global+0x13a>
     660:	b4 cf       	rjmp	.-152    	; 0x5ca <move_as_global+0xf2>
     662:	8e 36       	cpi	r24, 0x6E	; 110
     664:	09 f4       	brne	.+2      	; 0x668 <move_as_global+0x190>
     666:	87 cf       	rjmp	.-242    	; 0x576 <move_as_global+0x9e>
     668:	80 37       	cpi	r24, 0x70	; 112
     66a:	09 f4       	brne	.+2      	; 0x66e <move_as_global+0x196>
     66c:	92 cf       	rjmp	.-220    	; 0x592 <move_as_global+0xba>
     66e:	ad cf       	rjmp	.-166    	; 0x5ca <move_as_global+0xf2>
     670:	80 91 02 02 	lds	r24, 0x0202
     674:	80 35       	cpi	r24, 0x50	; 80
     676:	09 f4       	brne	.+2      	; 0x67a <move_as_global+0x1a2>
     678:	9d cf       	rjmp	.-198    	; 0x5b4 <move_as_global+0xdc>
     67a:	18 f4       	brcc	.+6      	; 0x682 <move_as_global+0x1aa>
     67c:	8e 34       	cpi	r24, 0x4E	; 78
     67e:	71 f2       	breq	.-100    	; 0x61c <move_as_global+0x144>
     680:	a7 cf       	rjmp	.-178    	; 0x5d0 <move_as_global+0xf8>
     682:	8e 36       	cpi	r24, 0x6E	; 110
     684:	09 f4       	brne	.+2      	; 0x688 <move_as_global+0x1b0>
     686:	7a cf       	rjmp	.-268    	; 0x57c <move_as_global+0xa4>
     688:	80 37       	cpi	r24, 0x70	; 112
     68a:	09 f4       	brne	.+2      	; 0x68e <move_as_global+0x1b6>
     68c:	85 cf       	rjmp	.-246    	; 0x598 <move_as_global+0xc0>
     68e:	a0 cf       	rjmp	.-192    	; 0x5d0 <move_as_global+0xf8>
     690:	80 91 02 02 	lds	r24, 0x0202
     694:	80 35       	cpi	r24, 0x50	; 80
     696:	09 f4       	brne	.+2      	; 0x69a <move_as_global+0x1c2>
     698:	90 cf       	rjmp	.-224    	; 0x5ba <move_as_global+0xe2>
     69a:	18 f4       	brcc	.+6      	; 0x6a2 <move_as_global+0x1ca>
     69c:	8e 34       	cpi	r24, 0x4E	; 78
     69e:	19 f2       	breq	.-122    	; 0x626 <move_as_global+0x14e>
     6a0:	9a cf       	rjmp	.-204    	; 0x5d6 <move_as_global+0xfe>
     6a2:	8e 36       	cpi	r24, 0x6E	; 110
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <move_as_global+0x1d0>
     6a6:	6d cf       	rjmp	.-294    	; 0x582 <move_as_global+0xaa>
     6a8:	80 37       	cpi	r24, 0x70	; 112
     6aa:	09 f4       	brne	.+2      	; 0x6ae <move_as_global+0x1d6>
     6ac:	78 cf       	rjmp	.-272    	; 0x59e <move_as_global+0xc6>
     6ae:	93 cf       	rjmp	.-218    	; 0x5d6 <move_as_global+0xfe>

000006b0 <isHit>:
	}
}

int isHit()
{
	uint16_t val = readadc(PHOTORESIS_PIN); 
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	f1 dd       	rcall	.-1054   	; 0x296 <readadc>
	return val > photores_thres;
     6b4:	21 e0       	ldi	r18, 0x01	; 1
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	40 91 1f 16 	lds	r20, 0x161F
     6bc:	50 91 20 16 	lds	r21, 0x1620
     6c0:	48 17       	cp	r20, r24
     6c2:	59 07       	cpc	r21, r25
     6c4:	10 f0       	brcs	.+4      	; 0x6ca <isHit+0x1a>
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
}
     6ca:	c9 01       	movw	r24, r18
     6cc:	08 95       	ret

000006ce <handle_sensors>:
	
	while(1)
	{
		/*Queries the sensors*/
		
		uart1_sendbyte(149);				//Opcode for Query List
     6ce:	85 e9       	ldi	r24, 0x95	; 149
     6d0:	0e 94 81 0b 	call	0x1702	; 0x1702 <uart1_sendbyte>
		uart1_sendbyte(SENSORS_TO_QUERY);	//Query will send three sensors packets
     6d4:	82 e0       	ldi	r24, 0x02	; 2
     6d6:	0e 94 81 0b 	call	0x1702	; 0x1702 <uart1_sendbyte>
		uart1_sendbyte(7);					//Packet 7: Bump/Wheeldrop detection
     6da:	87 e0       	ldi	r24, 0x07	; 7
     6dc:	0e 94 81 0b 	call	0x1702	; 0x1702 <uart1_sendbyte>
		uart1_sendbyte(13);					//Packet 13: Virtual wall seen?
     6e0:	8d e0       	ldi	r24, 0x0D	; 13
     6e2:	0e 94 81 0b 	call	0x1702	; 0x1702 <uart1_sendbyte>
	
		Task_Sleep(2);						//End of upper half of handle_sensor
     6e6:	82 e0       	ldi	r24, 0x02	; 2
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	c9 d7       	rcall	.+3986   	; 0x167e <Task_Sleep>
		
		//Check if laser has hit our photosensor
		if (isHit()) 
     6ec:	e1 df       	rcall	.-62     	; 0x6b0 <isHit>
     6ee:	89 2b       	or	r24, r25
     6f0:	09 f4       	brne	.+2      	; 0x6f4 <handle_sensors+0x26>
     6f2:	86 c0       	rjmp	.+268    	; 0x800 <handle_sensors+0x132>
		{
			//isDead = 1;
			//drive(0,0);
			beep();
     6f4:	58 de       	rcall	.-848    	; 0x3a6 <beep>
     6f6:	2f ef       	ldi	r18, 0xFF	; 255
     6f8:	83 ec       	ldi	r24, 0xC3	; 195
     6fa:	99 e0       	ldi	r25, 0x09	; 9
     6fc:	21 50       	subi	r18, 0x01	; 1
     6fe:	80 40       	sbci	r24, 0x00	; 0
     700:	90 40       	sbci	r25, 0x00	; 0
     702:	e1 f7       	brne	.-8      	; 0x6fc <handle_sensors+0x2e>
     704:	00 c0       	rjmp	.+0      	; 0x706 <handle_sensors+0x38>
     706:	00 00       	nop
			_delay_ms(200);
			beep();
     708:	4e de       	rcall	.-868    	; 0x3a6 <beep>
     70a:	2f ef       	ldi	r18, 0xFF	; 255
     70c:	83 ec       	ldi	r24, 0xC3	; 195
     70e:	99 e0       	ldi	r25, 0x09	; 9
     710:	21 50       	subi	r18, 0x01	; 1
     712:	80 40       	sbci	r24, 0x00	; 0
     714:	90 40       	sbci	r25, 0x00	; 0
     716:	e1 f7       	brne	.-8      	; 0x710 <handle_sensors+0x42>
     718:	00 c0       	rjmp	.+0      	; 0x71a <handle_sensors+0x4c>
     71a:	00 00       	nop
			_delay_ms(200);
			beep();
     71c:	44 de       	rcall	.-888    	; 0x3a6 <beep>
     71e:	70 c0       	rjmp	.+224    	; 0x800 <handle_sensors+0x132>
		/*BELOW SENSOR ARE INTENDED FOR MANUAL CONTROLS*/
	
		//If the left bumper has been hit, back up a bit and then rotate 90 degrees to the right
		if(bytes[0] == 1)
		{
			beep();
     720:	42 de       	rcall	.-892    	; 0x3a6 <beep>
			drive(-200, DRIVE_STRAIGHT);
     722:	6f ef       	ldi	r22, 0xFF	; 255
     724:	7f e7       	ldi	r23, 0x7F	; 127
     726:	88 e3       	ldi	r24, 0x38	; 56
     728:	9f ef       	ldi	r25, 0xFF	; 255
     72a:	a1 de       	rcall	.-702    	; 0x46e <drive>
     72c:	2f ef       	ldi	r18, 0xFF	; 255
     72e:	83 ec       	ldi	r24, 0xC3	; 195
     730:	99 e0       	ldi	r25, 0x09	; 9
     732:	21 50       	subi	r18, 0x01	; 1
     734:	80 40       	sbci	r24, 0x00	; 0
     736:	90 40       	sbci	r25, 0x00	; 0
     738:	e1 f7       	brne	.-8      	; 0x732 <handle_sensors+0x64>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <handle_sensors+0x6e>
     73c:	00 00       	nop
			_delay_ms(200);
			drive(200,COUNTER_CLOCKWISE_TURN);
     73e:	61 e0       	ldi	r22, 0x01	; 1
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	88 ec       	ldi	r24, 0xC8	; 200
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	93 de       	rcall	.-730    	; 0x46e <drive>
     748:	2f ef       	ldi	r18, 0xFF	; 255
     74a:	83 ed       	ldi	r24, 0xD3	; 211
     74c:	90 e3       	ldi	r25, 0x30	; 48
     74e:	21 50       	subi	r18, 0x01	; 1
     750:	80 40       	sbci	r24, 0x00	; 0
     752:	90 40       	sbci	r25, 0x00	; 0
     754:	e1 f7       	brne	.-8      	; 0x74e <handle_sensors+0x80>
     756:	00 c0       	rjmp	.+0      	; 0x758 <handle_sensors+0x8a>
     758:	00 00       	nop
			_delay_ms(1000);
			drive(0,0);
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	85 de       	rcall	.-758    	; 0x46e <drive>
     764:	49 c0       	rjmp	.+146    	; 0x7f8 <handle_sensors+0x12a>
		}
		//If the right bumper has been hit, back up a bit and then rotate 90 degrees  to the right
		else if(bytes[0] == 2)
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	19 f5       	brne	.+70     	; 0x7b0 <handle_sensors+0xe2>
		{
			beep();
     76a:	1d de       	rcall	.-966    	; 0x3a6 <beep>
			drive(-200, DRIVE_STRAIGHT);
     76c:	6f ef       	ldi	r22, 0xFF	; 255
     76e:	7f e7       	ldi	r23, 0x7F	; 127
     770:	88 e3       	ldi	r24, 0x38	; 56
     772:	9f ef       	ldi	r25, 0xFF	; 255
     774:	7c de       	rcall	.-776    	; 0x46e <drive>
     776:	2f ef       	ldi	r18, 0xFF	; 255
     778:	83 ec       	ldi	r24, 0xC3	; 195
     77a:	99 e0       	ldi	r25, 0x09	; 9
     77c:	21 50       	subi	r18, 0x01	; 1
     77e:	80 40       	sbci	r24, 0x00	; 0
     780:	90 40       	sbci	r25, 0x00	; 0
     782:	e1 f7       	brne	.-8      	; 0x77c <handle_sensors+0xae>
     784:	00 c0       	rjmp	.+0      	; 0x786 <handle_sensors+0xb8>
     786:	00 00       	nop
			_delay_ms(200);
			drive(200,CLOCKWISE_TURN);
     788:	6f ef       	ldi	r22, 0xFF	; 255
     78a:	7f ef       	ldi	r23, 0xFF	; 255
     78c:	88 ec       	ldi	r24, 0xC8	; 200
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	6e de       	rcall	.-804    	; 0x46e <drive>
     792:	2f ef       	ldi	r18, 0xFF	; 255
     794:	83 ed       	ldi	r24, 0xD3	; 211
     796:	90 e3       	ldi	r25, 0x30	; 48
     798:	21 50       	subi	r18, 0x01	; 1
     79a:	80 40       	sbci	r24, 0x00	; 0
     79c:	90 40       	sbci	r25, 0x00	; 0
     79e:	e1 f7       	brne	.-8      	; 0x798 <handle_sensors+0xca>
     7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <handle_sensors+0xd4>
     7a2:	00 00       	nop
			_delay_ms(1000);
			drive(0,0);
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	60 de       	rcall	.-832    	; 0x46e <drive>
     7ae:	24 c0       	rjmp	.+72     	; 0x7f8 <handle_sensors+0x12a>
		}
		//If the middle has been hit or virtual wall has been detected, back up a bit and then rotate 180 degrees 
		//else if (bytes[0] == 3 || bytes[1] == 1)
		else if (bytes[0] == 3)
     7b0:	83 30       	cpi	r24, 0x03	; 3
     7b2:	11 f5       	brne	.+68     	; 0x7f8 <handle_sensors+0x12a>
		{
			beep();
     7b4:	f8 dd       	rcall	.-1040   	; 0x3a6 <beep>
			drive(-200, DRIVE_STRAIGHT);
     7b6:	6f ef       	ldi	r22, 0xFF	; 255
     7b8:	7f e7       	ldi	r23, 0x7F	; 127
     7ba:	88 e3       	ldi	r24, 0x38	; 56
     7bc:	9f ef       	ldi	r25, 0xFF	; 255
     7be:	57 de       	rcall	.-850    	; 0x46e <drive>
     7c0:	2f ef       	ldi	r18, 0xFF	; 255
     7c2:	83 ec       	ldi	r24, 0xC3	; 195
     7c4:	99 e0       	ldi	r25, 0x09	; 9
     7c6:	21 50       	subi	r18, 0x01	; 1
     7c8:	80 40       	sbci	r24, 0x00	; 0
     7ca:	90 40       	sbci	r25, 0x00	; 0
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <handle_sensors+0xf8>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <handle_sensors+0x102>
     7d0:	00 00       	nop
			_delay_ms(200);
			drive(200,COUNTER_CLOCKWISE_TURN);
     7d2:	61 e0       	ldi	r22, 0x01	; 1
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	88 ec       	ldi	r24, 0xC8	; 200
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	49 de       	rcall	.-878    	; 0x46e <drive>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	87 ea       	ldi	r24, 0xA7	; 167
     7e0:	91 e6       	ldi	r25, 0x61	; 97
     7e2:	21 50       	subi	r18, 0x01	; 1
     7e4:	80 40       	sbci	r24, 0x00	; 0
     7e6:	90 40       	sbci	r25, 0x00	; 0
     7e8:	e1 f7       	brne	.-8      	; 0x7e2 <handle_sensors+0x114>
     7ea:	00 c0       	rjmp	.+0      	; 0x7ec <handle_sensors+0x11e>
     7ec:	00 00       	nop
			_delay_ms(2000);
			drive(0,0);
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	3b de       	rcall	.-906    	; 0x46e <drive>
		}
	
		Task_Sleep(3);
     7f8:	83 e0       	ldi	r24, 0x03	; 3
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	40 d7       	rcall	.+3712   	; 0x167e <Task_Sleep>
	}
     7fe:	67 cf       	rjmp	.-306    	; 0x6ce <handle_sensors>
			//Task_Terminate();
		}
	
		//Read sensor data returned by the roomba
		for(i=0; i<SENSORS_TO_QUERY + TWO_BYTE_SENSORS; i++)
			bytes[i] = uart1_recvbyte();		//Read a byte returned by the robot
     800:	88 d7       	rcall	.+3856   	; 0x1712 <uart1_recvbyte>
     802:	c8 2f       	mov	r28, r24
     804:	86 d7       	rcall	.+3852   	; 0x1712 <uart1_recvbyte>
		*/
	
		/*BELOW SENSOR ARE INTENDED FOR MANUAL CONTROLS*/
	
		//If the left bumper has been hit, back up a bit and then rotate 90 degrees to the right
		if(bytes[0] == 1)
     806:	8c 2f       	mov	r24, r28
     808:	c1 30       	cpi	r28, 0x01	; 1
     80a:	09 f0       	breq	.+2      	; 0x80e <handle_sensors+0x140>
     80c:	ac cf       	rjmp	.-168    	; 0x766 <handle_sensors+0x98>
     80e:	88 cf       	rjmp	.-240    	; 0x720 <handle_sensors+0x52>

00000810 <a_main>:
	}
}

void a_main()
{
	DDRB |= (1<<PB2);	// pin 51 as ouput	
     810:	22 9a       	sbi	0x04, 2	; 4
	OS_Init();
     812:	50 d3       	rcall	.+1696   	; 0xeb4 <OS_Init>
	
	uart0_init();		//UART0 is used for BT
     814:	4c d7       	rcall	.+3736   	; 0x16ae <uart0_init>
	uart1_init();		//UART1 is used to communicate with the robot
     816:	5c d7       	rcall	.+3768   	; 0x16d0 <uart1_init>
	roomba_init();
     818:	11 de       	rcall	.-990    	; 0x43c <roomba_init>
	beep();
     81a:	c5 dd       	rcall	.-1142   	; 0x3a6 <beep>
	
	Task_Create(receive_and_update, 4, 0);
     81c:	40 e0       	ldi	r20, 0x00	; 0
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	64 e0       	ldi	r22, 0x04	; 4
     822:	8f e5       	ldi	r24, 0x5F	; 95
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	f3 d6       	rcall	.+3558   	; 0x160e <Task_Create>
	Task_Create(move_as_global, 5, 0);
     828:	40 e0       	ldi	r20, 0x00	; 0
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	65 e0       	ldi	r22, 0x05	; 5
     82e:	8c e6       	ldi	r24, 0x6C	; 108
     830:	92 e0       	ldi	r25, 0x02	; 2
     832:	ed d6       	rcall	.+3546   	; 0x160e <Task_Create>
	Task_Create(handle_sensors, 3, 0);
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	63 e0       	ldi	r22, 0x03	; 3
     83a:	87 e6       	ldi	r24, 0x67	; 103
     83c:	93 e0       	ldi	r25, 0x03	; 3
     83e:	e7 d6       	rcall	.+3534   	; 0x160e <Task_Create>
	
	OS_Start();
     840:	ab c3       	rjmp	.+1878   	; 0xf98 <OS_Start>
     842:	08 95       	ret

00000844 <findProcessByPID>:
	
	if(e1 == NULL) 
		return 0;
		
	return e1->count;	
}
     844:	18 16       	cp	r1, r24
     846:	19 06       	cpc	r1, r25
     848:	84 f5       	brge	.+96     	; 0x8aa <findProcessByPID+0x66>
     84a:	20 91 3f 05 	lds	r18, 0x053F
     84e:	30 91 40 05 	lds	r19, 0x0540
     852:	28 17       	cp	r18, r24
     854:	39 07       	cpc	r19, r25
     856:	99 f0       	breq	.+38     	; 0x87e <findProcessByPID+0x3a>
     858:	21 e0       	ldi	r18, 0x01	; 1
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	6e e0       	ldi	r22, 0x0E	; 14
     85e:	71 e0       	ldi	r23, 0x01	; 1
     860:	26 9f       	mul	r18, r22
     862:	f0 01       	movw	r30, r0
     864:	27 9f       	mul	r18, r23
     866:	f0 0d       	add	r31, r0
     868:	36 9f       	mul	r19, r22
     86a:	f0 0d       	add	r31, r0
     86c:	11 24       	eor	r1, r1
     86e:	e1 5c       	subi	r30, 0xC1	; 193
     870:	fa 4f       	sbci	r31, 0xFA	; 250
     872:	40 81       	ld	r20, Z
     874:	51 81       	ldd	r21, Z+1	; 0x01
     876:	48 17       	cp	r20, r24
     878:	59 07       	cpc	r21, r25
     87a:	79 f4       	brne	.+30     	; 0x89a <findProcessByPID+0x56>
     87c:	02 c0       	rjmp	.+4      	; 0x882 <findProcessByPID+0x3e>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	4e e0       	ldi	r20, 0x0E	; 14
     884:	51 e0       	ldi	r21, 0x01	; 1
     886:	24 9f       	mul	r18, r20
     888:	c0 01       	movw	r24, r0
     88a:	25 9f       	mul	r18, r21
     88c:	90 0d       	add	r25, r0
     88e:	34 9f       	mul	r19, r20
     890:	90 0d       	add	r25, r0
     892:	11 24       	eor	r1, r1
     894:	81 5c       	subi	r24, 0xC1	; 193
     896:	9a 4f       	sbci	r25, 0xFA	; 250
     898:	08 95       	ret
     89a:	2f 5f       	subi	r18, 0xFF	; 255
     89c:	3f 4f       	sbci	r19, 0xFF	; 255
     89e:	20 31       	cpi	r18, 0x10	; 16
     8a0:	31 05       	cpc	r19, r1
     8a2:	f1 f6       	brne	.-68     	; 0x860 <findProcessByPID+0x1c>
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	08 95       	ret
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	08 95       	ret

000008b0 <findEventByEventID>:
     8b0:	00 97       	sbiw	r24, 0x00	; 0
     8b2:	51 f0       	breq	.+20     	; 0x8c8 <findEventByEventID+0x18>
     8b4:	20 91 0f 05 	lds	r18, 0x050F
     8b8:	30 91 10 05 	lds	r19, 0x0510
     8bc:	28 17       	cp	r18, r24
     8be:	39 07       	cpc	r19, r25
     8c0:	c1 f0       	breq	.+48     	; 0x8f2 <findEventByEventID+0x42>
     8c2:	21 e0       	ldi	r18, 0x01	; 1
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	06 c0       	rjmp	.+12     	; 0x8d4 <findEventByEventID+0x24>
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	80 93 29 16 	sts	0x1629, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	08 95       	ret
     8d4:	f9 01       	movw	r30, r18
     8d6:	ee 0f       	add	r30, r30
     8d8:	ff 1f       	adc	r31, r31
     8da:	e2 0f       	add	r30, r18
     8dc:	f3 1f       	adc	r31, r19
     8de:	ee 0f       	add	r30, r30
     8e0:	ff 1f       	adc	r31, r31
     8e2:	e1 5f       	subi	r30, 0xF1	; 241
     8e4:	fa 4f       	sbci	r31, 0xFA	; 250
     8e6:	40 81       	ld	r20, Z
     8e8:	51 81       	ldd	r21, Z+1	; 0x01
     8ea:	48 17       	cp	r20, r24
     8ec:	59 07       	cpc	r21, r25
     8ee:	69 f4       	brne	.+26     	; 0x90a <findEventByEventID+0x5a>
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <findEventByEventID+0x46>
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	c9 01       	movw	r24, r18
     8f8:	88 0f       	add	r24, r24
     8fa:	99 1f       	adc	r25, r25
     8fc:	82 0f       	add	r24, r18
     8fe:	93 1f       	adc	r25, r19
     900:	88 0f       	add	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	81 5f       	subi	r24, 0xF1	; 241
     906:	9a 4f       	sbci	r25, 0xFA	; 250
     908:	08 95       	ret
     90a:	2f 5f       	subi	r18, 0xFF	; 255
     90c:	3f 4f       	sbci	r19, 0xFF	; 255
     90e:	28 30       	cpi	r18, 0x08	; 8
     910:	31 05       	cpc	r19, r1
     912:	01 f7       	brne	.-64     	; 0x8d4 <findEventByEventID+0x24>
     914:	89 e0       	ldi	r24, 0x09	; 9
     916:	80 93 29 16 	sts	0x1629, r24
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	08 95       	ret

00000920 <findMutexByMutexID>:
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	59 f0       	breq	.+22     	; 0x93a <findMutexByMutexID+0x1a>
     924:	20 91 37 02 	lds	r18, 0x0237
     928:	30 91 38 02 	lds	r19, 0x0238
     92c:	28 17       	cp	r18, r24
     92e:	39 07       	cpc	r19, r25
     930:	b9 f0       	breq	.+46     	; 0x960 <findMutexByMutexID+0x40>
     932:	21 e0       	ldi	r18, 0x01	; 1
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	6b e5       	ldi	r22, 0x5B	; 91
     938:	06 c0       	rjmp	.+12     	; 0x946 <findMutexByMutexID+0x26>
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	80 93 29 16 	sts	0x1629, r24
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	08 95       	ret
     946:	62 9f       	mul	r22, r18
     948:	f0 01       	movw	r30, r0
     94a:	63 9f       	mul	r22, r19
     94c:	f0 0d       	add	r31, r0
     94e:	11 24       	eor	r1, r1
     950:	e9 5c       	subi	r30, 0xC9	; 201
     952:	fd 4f       	sbci	r31, 0xFD	; 253
     954:	40 81       	ld	r20, Z
     956:	51 81       	ldd	r21, Z+1	; 0x01
     958:	48 17       	cp	r20, r24
     95a:	59 07       	cpc	r21, r25
     95c:	61 f4       	brne	.+24     	; 0x976 <findMutexByMutexID+0x56>
     95e:	02 c0       	rjmp	.+4      	; 0x964 <findMutexByMutexID+0x44>
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	4b e5       	ldi	r20, 0x5B	; 91
     966:	42 9f       	mul	r20, r18
     968:	c0 01       	movw	r24, r0
     96a:	43 9f       	mul	r20, r19
     96c:	90 0d       	add	r25, r0
     96e:	11 24       	eor	r1, r1
     970:	89 5c       	subi	r24, 0xC9	; 201
     972:	9d 4f       	sbci	r25, 0xFD	; 253
     974:	08 95       	ret
     976:	2f 5f       	subi	r18, 0xFF	; 255
     978:	3f 4f       	sbci	r19, 0xFF	; 255
     97a:	28 30       	cpi	r18, 0x08	; 8
     97c:	31 05       	cpc	r19, r1
     97e:	19 f7       	brne	.-58     	; 0x946 <findMutexByMutexID+0x26>
     980:	8d e0       	ldi	r24, 0x0D	; 13
     982:	80 93 29 16 	sts	0x1629, r24
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	08 95       	ret

0000098c <__vector_17>:
/*                  ISR FOR HANDLING SLEEP TICKS                        */
/************************************************************************/

//Timer tick ISR
ISR(TIMER1_COMPA_vect)
{
     98c:	1f 92       	push	r1
     98e:	0f 92       	push	r0
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	0f 92       	push	r0
     994:	11 24       	eor	r1, r1
     996:	8f 93       	push	r24
     998:	9f 93       	push	r25
	++Tick_Count;
     99a:	80 91 2d 02 	lds	r24, 0x022D
     99e:	90 91 2e 02 	lds	r25, 0x022E
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	90 93 2e 02 	sts	0x022E, r25
     9a8:	80 93 2d 02 	sts	0x022D, r24
}
     9ac:	9f 91       	pop	r25
     9ae:	8f 91       	pop	r24
     9b0:	0f 90       	pop	r0
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	0f 90       	pop	r0
     9b6:	1f 90       	pop	r1
     9b8:	18 95       	reti

000009ba <Kernel_Tick_Handler>:
void Kernel_Tick_Handler()
{
	int i;
	
	//No ticks has been issued yet, skipping...
	if(Tick_Count == 0)
     9ba:	80 91 2d 02 	lds	r24, 0x022D
     9be:	90 91 2e 02 	lds	r25, 0x022E
     9c2:	89 2b       	or	r24, r25
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <Kernel_Tick_Handler+0xe>
     9c6:	6f c0       	rjmp	.+222    	; 0xaa6 <Kernel_Tick_Handler+0xec>
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
		return;
	
	for(i=0; i<MAXTHREAD; i++)
	{
		//Process any active tasks that are sleeping
		if(Process[i].state == SLEEPING)
     9cc:	2e e0       	ldi	r18, 0x0E	; 14
     9ce:	31 e0       	ldi	r19, 0x01	; 1
		{
			//When task_resume is called again, the task will be back into its READY state instead if its sleep ticks expired.
			Process[i].request_arg -= Tick_Count;
			if(Process[i].request_arg <= 0)
			{
				Process[i].last_state = READY;
     9d0:	61 e0       	ldi	r22, 0x01	; 1
		return;
	
	for(i=0; i<MAXTHREAD; i++)
	{
		//Process any active tasks that are sleeping
		if(Process[i].state == SLEEPING)
     9d2:	82 9f       	mul	r24, r18
     9d4:	f0 01       	movw	r30, r0
     9d6:	83 9f       	mul	r24, r19
     9d8:	f0 0d       	add	r31, r0
     9da:	92 9f       	mul	r25, r18
     9dc:	f0 0d       	add	r31, r0
     9de:	11 24       	eor	r1, r1
     9e0:	e1 5c       	subi	r30, 0xC1	; 193
     9e2:	fa 4f       	sbci	r31, 0xFA	; 250
     9e4:	43 81       	ldd	r20, Z+3	; 0x03
     9e6:	44 30       	cpi	r20, 0x04	; 4
     9e8:	29 f5       	brne	.+74     	; 0xa34 <Kernel_Tick_Handler+0x7a>
		{
			//If the current sleeping task's tick count expires, put it back into its READY state
			Process[i].request_arg -= Tick_Count;
     9ea:	a0 91 2d 02 	lds	r26, 0x022D
     9ee:	b0 91 2e 02 	lds	r27, 0x022E
     9f2:	82 9f       	mul	r24, r18
     9f4:	f0 01       	movw	r30, r0
     9f6:	83 9f       	mul	r24, r19
     9f8:	f0 0d       	add	r31, r0
     9fa:	92 9f       	mul	r25, r18
     9fc:	f0 0d       	add	r31, r0
     9fe:	11 24       	eor	r1, r1
     a00:	e1 5c       	subi	r30, 0xC1	; 193
     a02:	fa 4f       	sbci	r31, 0xFA	; 250
     a04:	46 81       	ldd	r20, Z+6	; 0x06
     a06:	57 81       	ldd	r21, Z+7	; 0x07
     a08:	4a 1b       	sub	r20, r26
     a0a:	5b 0b       	sbc	r21, r27
     a0c:	57 83       	std	Z+7, r21	; 0x07
     a0e:	46 83       	std	Z+6, r20	; 0x06
			if(Process[i].request_arg <= 0)
     a10:	46 81       	ldd	r20, Z+6	; 0x06
     a12:	57 81       	ldd	r21, Z+7	; 0x07
     a14:	14 16       	cp	r1, r20
     a16:	15 06       	cpc	r1, r21
     a18:	ec f1       	brlt	.+122    	; 0xa94 <Kernel_Tick_Handler+0xda>
			{
				Process[i].state = READY;
     a1a:	82 9f       	mul	r24, r18
     a1c:	f0 01       	movw	r30, r0
     a1e:	83 9f       	mul	r24, r19
     a20:	f0 0d       	add	r31, r0
     a22:	92 9f       	mul	r25, r18
     a24:	f0 0d       	add	r31, r0
     a26:	11 24       	eor	r1, r1
     a28:	e1 5c       	subi	r30, 0xC1	; 193
     a2a:	fa 4f       	sbci	r31, 0xFA	; 250
     a2c:	63 83       	std	Z+3, r22	; 0x03
				Process[i].request_arg = 0;
     a2e:	17 82       	std	Z+7, r1	; 0x07
     a30:	16 82       	std	Z+6, r1	; 0x06
     a32:	30 c0       	rjmp	.+96     	; 0xa94 <Kernel_Tick_Handler+0xda>
			}
		}
		
		//Process any SUSPENDED tasks that were previously sleeping
		else if(Process[i].last_state == SLEEPING)
     a34:	82 9f       	mul	r24, r18
     a36:	f0 01       	movw	r30, r0
     a38:	83 9f       	mul	r24, r19
     a3a:	f0 0d       	add	r31, r0
     a3c:	92 9f       	mul	r25, r18
     a3e:	f0 0d       	add	r31, r0
     a40:	11 24       	eor	r1, r1
     a42:	e1 5c       	subi	r30, 0xC1	; 193
     a44:	fa 4f       	sbci	r31, 0xFA	; 250
     a46:	44 81       	ldd	r20, Z+4	; 0x04
     a48:	44 30       	cpi	r20, 0x04	; 4
     a4a:	21 f5       	brne	.+72     	; 0xa94 <Kernel_Tick_Handler+0xda>
		{
			//When task_resume is called again, the task will be back into its READY state instead if its sleep ticks expired.
			Process[i].request_arg -= Tick_Count;
     a4c:	a0 91 2d 02 	lds	r26, 0x022D
     a50:	b0 91 2e 02 	lds	r27, 0x022E
     a54:	82 9f       	mul	r24, r18
     a56:	f0 01       	movw	r30, r0
     a58:	83 9f       	mul	r24, r19
     a5a:	f0 0d       	add	r31, r0
     a5c:	92 9f       	mul	r25, r18
     a5e:	f0 0d       	add	r31, r0
     a60:	11 24       	eor	r1, r1
     a62:	e1 5c       	subi	r30, 0xC1	; 193
     a64:	fa 4f       	sbci	r31, 0xFA	; 250
     a66:	46 81       	ldd	r20, Z+6	; 0x06
     a68:	57 81       	ldd	r21, Z+7	; 0x07
     a6a:	4a 1b       	sub	r20, r26
     a6c:	5b 0b       	sbc	r21, r27
     a6e:	57 83       	std	Z+7, r21	; 0x07
     a70:	46 83       	std	Z+6, r20	; 0x06
			if(Process[i].request_arg <= 0)
     a72:	46 81       	ldd	r20, Z+6	; 0x06
     a74:	57 81       	ldd	r21, Z+7	; 0x07
     a76:	14 16       	cp	r1, r20
     a78:	15 06       	cpc	r1, r21
     a7a:	64 f0       	brlt	.+24     	; 0xa94 <Kernel_Tick_Handler+0xda>
			{
				Process[i].last_state = READY;
     a7c:	82 9f       	mul	r24, r18
     a7e:	f0 01       	movw	r30, r0
     a80:	83 9f       	mul	r24, r19
     a82:	f0 0d       	add	r31, r0
     a84:	92 9f       	mul	r25, r18
     a86:	f0 0d       	add	r31, r0
     a88:	11 24       	eor	r1, r1
     a8a:	e1 5c       	subi	r30, 0xC1	; 193
     a8c:	fa 4f       	sbci	r31, 0xFA	; 250
     a8e:	64 83       	std	Z+4, r22	; 0x04
				Process[i].request_arg = 0;
     a90:	17 82       	std	Z+7, r1	; 0x07
     a92:	16 82       	std	Z+6, r1	; 0x06
	
	//No ticks has been issued yet, skipping...
	if(Tick_Count == 0)
		return;
	
	for(i=0; i<MAXTHREAD; i++)
     a94:	01 96       	adiw	r24, 0x01	; 1
     a96:	80 31       	cpi	r24, 0x10	; 16
     a98:	91 05       	cpc	r25, r1
     a9a:	09 f0       	breq	.+2      	; 0xa9e <Kernel_Tick_Handler+0xe4>
     a9c:	9a cf       	rjmp	.-204    	; 0x9d2 <Kernel_Tick_Handler+0x18>
				Process[i].last_state = READY;
				Process[i].request_arg = 0;
			}
		}
	}
	Tick_Count = 0;
     a9e:	10 92 2e 02 	sts	0x022E, r1
     aa2:	10 92 2d 02 	sts	0x022D, r1
     aa6:	08 95       	ret

00000aa8 <Dispatch>:
/*                     KERNEL SCHEDULING FUNCTIONS                      */
/************************************************************************/

/* This internal kernel function is a part of the "scheduler". It chooses the next task to run, i.e., Cp. */
static void Dispatch()
{
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	20 e1       	ldi	r18, 0x10	; 16
     aae:	30 e0       	ldi	r19, 0x00	; 0
	unsigned int i = 0;
	int highest_pri = LOWEST_PRIORITY + 1;
	int highest_pri_index = -1;
     ab0:	af ef       	ldi	r26, 0xFF	; 255
     ab2:	bf ef       	ldi	r27, 0xFF	; 255

/* This internal kernel function is a part of the "scheduler". It chooses the next task to run, i.e., Cp. */
static void Dispatch()
{
	unsigned int i = 0;
	int highest_pri = LOWEST_PRIORITY + 1;
     ab4:	6b e0       	ldi	r22, 0x0B	; 11
     ab6:	70 e0       	ldi	r23, 0x00	; 0
	{
		//Increment process index
		NextP = (NextP + 1) % MAXTHREAD;
		
		//Select the READY process with the highest priority
		if(Process[NextP].state == READY && Process[NextP].pri < highest_pri)
     ab8:	4e e0       	ldi	r20, 0x0E	; 14
     aba:	51 e0       	ldi	r21, 0x01	; 1
	
	//Find the next READY task with the highest priority by iterating through the process list ONCE
	for(i=0; i<MAXTHREAD; i++)
	{
		//Increment process index
		NextP = (NextP + 1) % MAXTHREAD;
     abc:	80 91 35 02 	lds	r24, 0x0235
     ac0:	90 91 36 02 	lds	r25, 0x0236
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	8f 70       	andi	r24, 0x0F	; 15
     ac8:	99 27       	eor	r25, r25
     aca:	90 93 36 02 	sts	0x0236, r25
     ace:	80 93 35 02 	sts	0x0235, r24
		
		//Select the READY process with the highest priority
		if(Process[NextP].state == READY && Process[NextP].pri < highest_pri)
     ad2:	80 91 35 02 	lds	r24, 0x0235
     ad6:	90 91 36 02 	lds	r25, 0x0236
     ada:	84 9f       	mul	r24, r20
     adc:	f0 01       	movw	r30, r0
     ade:	85 9f       	mul	r24, r21
     ae0:	f0 0d       	add	r31, r0
     ae2:	94 9f       	mul	r25, r20
     ae4:	f0 0d       	add	r31, r0
     ae6:	11 24       	eor	r1, r1
     ae8:	e1 5c       	subi	r30, 0xC1	; 193
     aea:	fa 4f       	sbci	r31, 0xFA	; 250
     aec:	83 81       	ldd	r24, Z+3	; 0x03
     aee:	81 30       	cpi	r24, 0x01	; 1
     af0:	29 f5       	brne	.+74     	; 0xb3c <Dispatch+0x94>
     af2:	80 91 35 02 	lds	r24, 0x0235
     af6:	90 91 36 02 	lds	r25, 0x0236
     afa:	84 9f       	mul	r24, r20
     afc:	f0 01       	movw	r30, r0
     afe:	85 9f       	mul	r24, r21
     b00:	f0 0d       	add	r31, r0
     b02:	94 9f       	mul	r25, r20
     b04:	f0 0d       	add	r31, r0
     b06:	11 24       	eor	r1, r1
     b08:	e1 5c       	subi	r30, 0xC1	; 193
     b0a:	fa 4f       	sbci	r31, 0xFA	; 250
     b0c:	82 81       	ldd	r24, Z+2	; 0x02
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	86 17       	cp	r24, r22
     b12:	97 07       	cpc	r25, r23
     b14:	9c f4       	brge	.+38     	; 0xb3c <Dispatch+0x94>
		{
			highest_pri = Process[NextP].pri;
     b16:	80 91 35 02 	lds	r24, 0x0235
     b1a:	90 91 36 02 	lds	r25, 0x0236
     b1e:	84 9f       	mul	r24, r20
     b20:	f0 01       	movw	r30, r0
     b22:	85 9f       	mul	r24, r21
     b24:	f0 0d       	add	r31, r0
     b26:	94 9f       	mul	r25, r20
     b28:	f0 0d       	add	r31, r0
     b2a:	11 24       	eor	r1, r1
     b2c:	e1 5c       	subi	r30, 0xC1	; 193
     b2e:	fa 4f       	sbci	r31, 0xFA	; 250
     b30:	62 81       	ldd	r22, Z+2	; 0x02
     b32:	70 e0       	ldi	r23, 0x00	; 0
			highest_pri_index = NextP;
     b34:	a0 91 35 02 	lds	r26, 0x0235
     b38:	b0 91 36 02 	lds	r27, 0x0236
     b3c:	21 50       	subi	r18, 0x01	; 1
     b3e:	31 09       	sbc	r19, r1
	unsigned int i = 0;
	int highest_pri = LOWEST_PRIORITY + 1;
	int highest_pri_index = -1;
	
	//Find the next READY task with the highest priority by iterating through the process list ONCE
	for(i=0; i<MAXTHREAD; i++)
     b40:	09 f0       	breq	.+2      	; 0xb44 <Dispatch+0x9c>
     b42:	bc cf       	rjmp	.-136    	; 0xabc <Dispatch+0x14>
			highest_pri_index = NextP;
		}
	}
		
	//When none of the tasks in the process list is ready
	if(highest_pri_index == -1)
     b44:	af 3f       	cpi	r26, 0xFF	; 255
     b46:	8f ef       	ldi	r24, 0xFF	; 255
     b48:	b8 07       	cpc	r27, r24
     b4a:	11 f5       	brne	.+68     	; 0xb90 <Dispatch+0xe8>
	{
		//We'll temporarily re-enable interrupt in case if one or more task is waiting on events/interrupts or sleeping
		Enable_Interrupt();
     b4c:	78 94       	sei
		
		//Looping through the process list until any process becomes ready
		while(Process[NextP].state != READY)
     b4e:	ce e0       	ldi	r28, 0x0E	; 14
     b50:	d1 e0       	ldi	r29, 0x01	; 1
     b52:	0c c0       	rjmp	.+24     	; 0xb6c <Dispatch+0xc4>
		{
			//Increment process index
			NextP = (NextP + 1) % MAXTHREAD;
     b54:	80 91 35 02 	lds	r24, 0x0235
     b58:	90 91 36 02 	lds	r25, 0x0236
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	8f 70       	andi	r24, 0x0F	; 15
     b60:	99 27       	eor	r25, r25
     b62:	90 93 36 02 	sts	0x0236, r25
     b66:	80 93 35 02 	sts	0x0235, r24
			
			//Check if any timer ticks came in
			Kernel_Tick_Handler();	
     b6a:	27 df       	rcall	.-434    	; 0x9ba <Kernel_Tick_Handler>
	{
		//We'll temporarily re-enable interrupt in case if one or more task is waiting on events/interrupts or sleeping
		Enable_Interrupt();
		
		//Looping through the process list until any process becomes ready
		while(Process[NextP].state != READY)
     b6c:	80 91 35 02 	lds	r24, 0x0235
     b70:	90 91 36 02 	lds	r25, 0x0236
     b74:	8c 9f       	mul	r24, r28
     b76:	f0 01       	movw	r30, r0
     b78:	8d 9f       	mul	r24, r29
     b7a:	f0 0d       	add	r31, r0
     b7c:	9c 9f       	mul	r25, r28
     b7e:	f0 0d       	add	r31, r0
     b80:	11 24       	eor	r1, r1
     b82:	e1 5c       	subi	r30, 0xC1	; 193
     b84:	fa 4f       	sbci	r31, 0xFA	; 250
     b86:	83 81       	ldd	r24, Z+3	; 0x03
     b88:	81 30       	cpi	r24, 0x01	; 1
     b8a:	21 f7       	brne	.-56     	; 0xb54 <Dispatch+0xac>
			//Check if any timer ticks came in
			Kernel_Tick_Handler();	
		}
		
		//Now that we have a ready task, interrupts must be disabled for the kernel to function properly again.
		Disable_Interrupt();
     b8c:	f8 94       	cli
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <Dispatch+0xf0>
	}
	else
		NextP = highest_pri_index;
     b90:	b0 93 36 02 	sts	0x0236, r27
     b94:	a0 93 35 02 	sts	0x0235, r26

	//Load the next selected task's process descriptor into Cp
	Cp = &(Process[NextP]);
     b98:	20 91 35 02 	lds	r18, 0x0235
     b9c:	30 91 36 02 	lds	r19, 0x0236
     ba0:	8e e0       	ldi	r24, 0x0E	; 14
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	28 9f       	mul	r18, r24
     ba6:	f0 01       	movw	r30, r0
     ba8:	29 9f       	mul	r18, r25
     baa:	f0 0d       	add	r31, r0
     bac:	38 9f       	mul	r19, r24
     bae:	f0 0d       	add	r31, r0
     bb0:	11 24       	eor	r1, r1
     bb2:	e1 5c       	subi	r30, 0xC1	; 193
     bb4:	fa 4f       	sbci	r31, 0xFA	; 250
     bb6:	f0 93 2d 16 	sts	0x162D, r31
     bba:	e0 93 2c 16 	sts	0x162C, r30
	CurrentSp = Cp->sp;
     bbe:	82 85       	ldd	r24, Z+10	; 0x0a
     bc0:	93 85       	ldd	r25, Z+11	; 0x0b
     bc2:	90 93 2b 16 	sts	0x162B, r25
     bc6:	80 93 2a 16 	sts	0x162A, r24
	Cp->state = RUNNING;
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	83 83       	std	Z+3, r24	; 0x03
}
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	08 95       	ret

00000bd4 <Kernel_Create_Task>:
/*                   TASK RELATED KERNEL FUNCTIONS                      */
/************************************************************************/

/* Handles all low level operations for creating a new task */
void Kernel_Create_Task(voidfuncptr f, PRIORITY py, int arg)
{
     bd4:	ef 92       	push	r14
     bd6:	ff 92       	push	r15
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	ec 01       	movw	r28, r24
	#ifdef OS_DEBUG
	int counter = 0;
	#endif
	
	//Make sure the system can still have enough resources to create more tasks
	if (Task_Count == MAXTHREAD)
     be2:	80 91 33 02 	lds	r24, 0x0233
     be6:	90 91 34 02 	lds	r25, 0x0234
     bea:	40 97       	sbiw	r24, 0x10	; 16
     bec:	49 f0       	breq	.+18     	; 0xc00 <Kernel_Create_Task+0x2c>
		return;
	}

	//Find a dead or empty PD slot to allocate our new task
	for (x = 0; x < MAXTHREAD; x++)
	if (Process[x].state == DEAD) break;
     bee:	80 91 42 05 	lds	r24, 0x0542
     bf2:	88 23       	and	r24, r24
     bf4:	d9 f0       	breq	.+54     	; 0xc2c <Kernel_Create_Task+0x58>
     bf6:	21 e0       	ldi	r18, 0x01	; 1
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	ae e0       	ldi	r26, 0x0E	; 14
     bfc:	b1 e0       	ldi	r27, 0x01	; 1
     bfe:	04 c0       	rjmp	.+8      	; 0xc08 <Kernel_Create_Task+0x34>
	{
		#ifdef OS_DEBUG
		printf("Task_Create: Failed to create task. The system is at its process threshold.\n");
		#endif
		
		err = MAX_PROCESS_ERR;
     c00:	84 e0       	ldi	r24, 0x04	; 4
     c02:	80 93 29 16 	sts	0x1629, r24
		return;
     c06:	62 c0       	rjmp	.+196    	; 0xccc <Kernel_Create_Task+0xf8>
	}

	//Find a dead or empty PD slot to allocate our new task
	for (x = 0; x < MAXTHREAD; x++)
	if (Process[x].state == DEAD) break;
     c08:	2a 9f       	mul	r18, r26
     c0a:	f0 01       	movw	r30, r0
     c0c:	2b 9f       	mul	r18, r27
     c0e:	f0 0d       	add	r31, r0
     c10:	3a 9f       	mul	r19, r26
     c12:	f0 0d       	add	r31, r0
     c14:	11 24       	eor	r1, r1
     c16:	e1 5c       	subi	r30, 0xC1	; 193
     c18:	fa 4f       	sbci	r31, 0xFA	; 250
     c1a:	93 81       	ldd	r25, Z+3	; 0x03
     c1c:	99 23       	and	r25, r25
     c1e:	41 f0       	breq	.+16     	; 0xc30 <Kernel_Create_Task+0x5c>
		err = MAX_PROCESS_ERR;
		return;
	}

	//Find a dead or empty PD slot to allocate our new task
	for (x = 0; x < MAXTHREAD; x++)
     c20:	2f 5f       	subi	r18, 0xFF	; 255
     c22:	3f 4f       	sbci	r19, 0xFF	; 255
     c24:	20 31       	cpi	r18, 0x10	; 16
     c26:	31 05       	cpc	r19, r1
     c28:	79 f7       	brne	.-34     	; 0xc08 <Kernel_Create_Task+0x34>
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <Kernel_Create_Task+0x5c>
	if (Process[x].state == DEAD) break;
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
	
	++Task_Count;
     c30:	80 91 33 02 	lds	r24, 0x0233
     c34:	90 91 34 02 	lds	r25, 0x0234
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	90 93 34 02 	sts	0x0234, r25
     c3e:	80 93 33 02 	sts	0x0233, r24
	p = &(Process[x]);
	
	/*The code below was agglomerated from Kernel_Create_Task_At;*/
	
	//Initializing the workspace memory for the new task
	sp = (unsigned char *) &(p->workSpace[WORKSPACE-1]);
     c42:	8e e0       	ldi	r24, 0x0E	; 14
     c44:	91 e0       	ldi	r25, 0x01	; 1
     c46:	28 9f       	mul	r18, r24
     c48:	f0 01       	movw	r30, r0
     c4a:	29 9f       	mul	r18, r25
     c4c:	f0 0d       	add	r31, r0
     c4e:	38 9f       	mul	r19, r24
     c50:	f0 0d       	add	r31, r0
     c52:	11 24       	eor	r1, r1
     c54:	9f 01       	movw	r18, r30
     c56:	26 5b       	subi	r18, 0xB6	; 182
     c58:	39 4f       	sbci	r19, 0xF9	; 249
	memset(&(p->workSpace),0,WORKSPACE);
     c5a:	8f 01       	movw	r16, r30
     c5c:	05 5b       	subi	r16, 0xB5	; 181
     c5e:	1a 4f       	sbci	r17, 0xFA	; 250
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	d8 01       	movw	r26, r16
     c66:	8c 01       	movw	r16, r24
     c68:	1d 92       	st	X+, r1
     c6a:	01 50       	subi	r16, 0x01	; 1
     c6c:	10 40       	sbci	r17, 0x00	; 0
     c6e:	e1 f7       	brne	.-8      	; 0xc68 <Kernel_Create_Task+0x94>

	//Store terminate at the bottom of stack to protect against stack underrun.
	*(unsigned char *)sp-- = ((unsigned int)Task_Terminate) & 0xff;
     c70:	e1 5c       	subi	r30, 0xC1	; 193
     c72:	fa 4f       	sbci	r31, 0xFA	; 250
     c74:	df 01       	movw	r26, r30
     c76:	a5 5f       	subi	r26, 0xF5	; 245
     c78:	be 4f       	sbci	r27, 0xFE	; 254
     c7a:	8b e2       	ldi	r24, 0x2B	; 43
     c7c:	9b e0       	ldi	r25, 0x0B	; 11
     c7e:	8c 93       	st	X, r24
	*(unsigned char *)sp-- = (((unsigned int)Task_Terminate) >> 8) & 0xff;
     c80:	d9 01       	movw	r26, r18
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	9c 93       	st	X, r25
	*(unsigned char *)sp-- = 0x00;
     c86:	11 97       	sbiw	r26, 0x01	; 1
     c88:	1c 92       	st	X, r1

	//Place return address of function at bottom of stack
	*(unsigned char *)sp-- = ((unsigned int)f) & 0xff;
     c8a:	11 97       	sbiw	r26, 0x01	; 1
     c8c:	cc 93       	st	X, r28
	*(unsigned char *)sp-- = (((unsigned int)f) >> 8) & 0xff;
     c8e:	11 97       	sbiw	r26, 0x01	; 1
     c90:	dc 93       	st	X, r29
	*(unsigned char *)sp-- = 0x00;
     c92:	11 97       	sbiw	r26, 0x01	; 1
     c94:	1c 92       	st	X, r1
	 //Place stack pointer at top of stack
	 sp = sp - 34;
	#endif
	
	//Build the process descriptor for the new task
	p->pid = ++Last_PID;
     c96:	80 91 23 16 	lds	r24, 0x1623
     c9a:	90 91 24 16 	lds	r25, 0x1624
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	90 93 24 16 	sts	0x1624, r25
     ca4:	80 93 23 16 	sts	0x1623, r24
     ca8:	91 83       	std	Z+1, r25	; 0x01
     caa:	80 83       	st	Z, r24
	p->pri = py;
     cac:	62 83       	std	Z+2, r22	; 0x02
	p->arg = arg;
     cae:	51 87       	std	Z+9, r21	; 0x09
     cb0:	40 87       	std	Z+8, r20	; 0x08
	p->request = NONE;
     cb2:	15 82       	std	Z+5, r1	; 0x05
	p->state = READY;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	83 83       	std	Z+3, r24	; 0x03
	 {
		 *(unsigned char *)sp-- = counter;
	 }
	#else
	 //Place stack pointer at top of stack
	 sp = sp - 34;
     cb8:	28 52       	subi	r18, 0x28	; 40
     cba:	31 09       	sbc	r19, r1
	p->pid = ++Last_PID;
	p->pri = py;
	p->arg = arg;
	p->request = NONE;
	p->state = READY;
	p->sp = sp;					/* stack pointer into the "workSpace" */
     cbc:	33 87       	std	Z+11, r19	; 0x0b
     cbe:	22 87       	std	Z+10, r18	; 0x0a
	p->code = f;				/* function to be executed as a task */
     cc0:	e4 5f       	subi	r30, 0xF4	; 244
     cc2:	fe 4f       	sbci	r31, 0xFE	; 254
     cc4:	d1 83       	std	Z+1, r29	; 0x01
     cc6:	c0 83       	st	Z, r28
	
	//No errors occured
	err = NO_ERR;
     cc8:	10 92 29 16 	sts	0x1629, r1
}
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	ff 90       	pop	r15
     cd6:	ef 90       	pop	r14
     cd8:	08 95       	ret

00000cda <Kernel_Create_Event>:
void Kernel_Create_Event(void)
{
	int i;
	
	//Make sure the system's events are not at max
	if(Event_Count >= MAXEVENT)
     cda:	80 91 31 02 	lds	r24, 0x0231
     cde:	90 91 32 02 	lds	r25, 0x0232
     ce2:	08 97       	sbiw	r24, 0x08	; 8
     ce4:	48 f4       	brcc	.+18     	; 0xcf8 <Kernel_Create_Event+0x1e>
		return;
	}
	
	//Find an uninitialized Event slot
	for(i=0; i<MAXEVENT; i++)
		if(Event[i].id == 0) break;
     ce6:	80 91 0f 05 	lds	r24, 0x050F
     cea:	90 91 10 05 	lds	r25, 0x0510
     cee:	89 2b       	or	r24, r25
     cf0:	c9 f0       	breq	.+50     	; 0xd24 <Kernel_Create_Event+0x4a>
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	04 c0       	rjmp	.+8      	; 0xd00 <Kernel_Create_Event+0x26>
	if(Event_Count >= MAXEVENT)
	{
		#ifdef OS_DEBUG
		printf("Event_Init: Failed to create Event. The system is at its max event threshold.\n");
		#endif
		err = MAX_EVENT_ERR;
     cf8:	88 e0       	ldi	r24, 0x08	; 8
     cfa:	80 93 29 16 	sts	0x1629, r24
		return;
     cfe:	08 95       	ret
	}
	
	//Find an uninitialized Event slot
	for(i=0; i<MAXEVENT; i++)
		if(Event[i].id == 0) break;
     d00:	fc 01       	movw	r30, r24
     d02:	ee 0f       	add	r30, r30
     d04:	ff 1f       	adc	r31, r31
     d06:	e8 0f       	add	r30, r24
     d08:	f9 1f       	adc	r31, r25
     d0a:	ee 0f       	add	r30, r30
     d0c:	ff 1f       	adc	r31, r31
     d0e:	e1 5f       	subi	r30, 0xF1	; 241
     d10:	fa 4f       	sbci	r31, 0xFA	; 250
     d12:	20 81       	ld	r18, Z
     d14:	31 81       	ldd	r19, Z+1	; 0x01
     d16:	23 2b       	or	r18, r19
     d18:	39 f0       	breq	.+14     	; 0xd28 <Kernel_Create_Event+0x4e>
		err = MAX_EVENT_ERR;
		return;
	}
	
	//Find an uninitialized Event slot
	for(i=0; i<MAXEVENT; i++)
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	88 30       	cpi	r24, 0x08	; 8
     d1e:	91 05       	cpc	r25, r1
     d20:	79 f7       	brne	.-34     	; 0xd00 <Kernel_Create_Event+0x26>
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <Kernel_Create_Event+0x4e>
		if(Event[i].id == 0) break;
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	90 e0       	ldi	r25, 0x00	; 0
	
	//Assign a new unique ID to the event. Note that the smallest valid Event ID is 1.
	Event[i].id = ++Last_EventID;
     d28:	20 91 27 16 	lds	r18, 0x1627
     d2c:	30 91 28 16 	lds	r19, 0x1628
     d30:	2f 5f       	subi	r18, 0xFF	; 255
     d32:	3f 4f       	sbci	r19, 0xFF	; 255
     d34:	30 93 28 16 	sts	0x1628, r19
     d38:	20 93 27 16 	sts	0x1627, r18
     d3c:	fc 01       	movw	r30, r24
     d3e:	ee 0f       	add	r30, r30
     d40:	ff 1f       	adc	r31, r31
     d42:	df 01       	movw	r26, r30
     d44:	a8 0f       	add	r26, r24
     d46:	b9 1f       	adc	r27, r25
     d48:	aa 0f       	add	r26, r26
     d4a:	bb 1f       	adc	r27, r27
     d4c:	a1 5f       	subi	r26, 0xF1	; 241
     d4e:	ba 4f       	sbci	r27, 0xFA	; 250
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	3c 93       	st	X, r19
     d54:	2e 93       	st	-X, r18
	Event[i].owner = 0;
     d56:	fd 01       	movw	r30, r26
     d58:	13 82       	std	Z+3, r1	; 0x03
     d5a:	12 82       	std	Z+2, r1	; 0x02
	++Event_Count;
     d5c:	80 91 31 02 	lds	r24, 0x0231
     d60:	90 91 32 02 	lds	r25, 0x0232
     d64:	01 96       	adiw	r24, 0x01	; 1
     d66:	90 93 32 02 	sts	0x0232, r25
     d6a:	80 93 31 02 	sts	0x0231, r24
	err = NO_ERR;
     d6e:	10 92 29 16 	sts	0x1629, r1
     d72:	08 95       	ret

00000d74 <Kernel_Create_Mutex>:
/************************************************************************/
/*                  MUTEX RELATED KERNEL FUNCTIONS                      */
/************************************************************************/

void Kernel_Create_Mutex(void)
{
     d74:	cf 93       	push	r28
	int i;
	
	//Make sure the system's mutexes are not at max
	if(Mutex_Count >= MAXMUTEX)
     d76:	80 91 2f 02 	lds	r24, 0x022F
     d7a:	90 91 30 02 	lds	r25, 0x0230
     d7e:	08 97       	sbiw	r24, 0x08	; 8
     d80:	50 f4       	brcc	.+20     	; 0xd96 <Kernel_Create_Mutex+0x22>
		return;
	}
	
	//Find an uninitialized Mutex slot
	for(i=0; i<MAXMUTEX; i++)
		if(Mutex[i].id == 0) break;
     d82:	80 91 37 02 	lds	r24, 0x0237
     d86:	90 91 38 02 	lds	r25, 0x0238
     d8a:	89 2b       	or	r24, r25
     d8c:	c9 f0       	breq	.+50     	; 0xdc0 <Kernel_Create_Mutex+0x4c>
     d8e:	41 e0       	ldi	r20, 0x01	; 1
     d90:	50 e0       	ldi	r21, 0x00	; 0
     d92:	2b e5       	ldi	r18, 0x5B	; 91
     d94:	04 c0       	rjmp	.+8      	; 0xd9e <Kernel_Create_Mutex+0x2a>
	if(Mutex_Count >= MAXMUTEX)
	{
		#ifdef OS_DEBUG
		printf("Kernel_Create_Mutex: Failed to create Mutex. The system is at its max mutex threshold.\n");
		#endif
		err = MAX_MUTEX_ERR;
     d96:	8c e0       	ldi	r24, 0x0C	; 12
     d98:	80 93 29 16 	sts	0x1629, r24
		return;
     d9c:	6b c0       	rjmp	.+214    	; 0xe74 <Kernel_Create_Mutex+0x100>
	}
	
	//Find an uninitialized Mutex slot
	for(i=0; i<MAXMUTEX; i++)
		if(Mutex[i].id == 0) break;
     d9e:	24 9f       	mul	r18, r20
     da0:	f0 01       	movw	r30, r0
     da2:	25 9f       	mul	r18, r21
     da4:	f0 0d       	add	r31, r0
     da6:	11 24       	eor	r1, r1
     da8:	e9 5c       	subi	r30, 0xC9	; 201
     daa:	fd 4f       	sbci	r31, 0xFD	; 253
     dac:	80 81       	ld	r24, Z
     dae:	91 81       	ldd	r25, Z+1	; 0x01
     db0:	89 2b       	or	r24, r25
     db2:	41 f0       	breq	.+16     	; 0xdc4 <Kernel_Create_Mutex+0x50>
		err = MAX_MUTEX_ERR;
		return;
	}
	
	//Find an uninitialized Mutex slot
	for(i=0; i<MAXMUTEX; i++)
     db4:	4f 5f       	subi	r20, 0xFF	; 255
     db6:	5f 4f       	sbci	r21, 0xFF	; 255
     db8:	48 30       	cpi	r20, 0x08	; 8
     dba:	51 05       	cpc	r21, r1
     dbc:	81 f7       	brne	.-32     	; 0xd9e <Kernel_Create_Mutex+0x2a>
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <Kernel_Create_Mutex+0x50>
		if(Mutex[i].id == 0) break;
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	50 e0       	ldi	r21, 0x00	; 0
	
	//Assign a new unique ID to the mutex. Note that the smallest valid mutex ID is 1.
	Mutex[i].id = ++Last_MutexID;
     dc4:	80 91 2e 16 	lds	r24, 0x162E
     dc8:	90 91 2f 16 	lds	r25, 0x162F
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	90 93 2f 16 	sts	0x162F, r25
     dd2:	80 93 2e 16 	sts	0x162E, r24
     dd6:	2b e5       	ldi	r18, 0x5B	; 91
     dd8:	24 9f       	mul	r18, r20
     dda:	f0 01       	movw	r30, r0
     ddc:	25 9f       	mul	r18, r21
     dde:	f0 0d       	add	r31, r0
     de0:	11 24       	eor	r1, r1
     de2:	e9 5c       	subi	r30, 0xC9	; 201
     de4:	fd 4f       	sbci	r31, 0xFD	; 253
     de6:	91 83       	std	Z+1, r25	; 0x01
     de8:	80 83       	st	Z, r24
	Mutex[i].owner = 0;		// note when mutex's owner is 0, it is free
     dea:	13 82       	std	Z+3, r1	; 0x03
     dec:	12 82       	std	Z+2, r1	; 0x02
	// init priority stack
	for (int j=0; j<MAXTHREAD; j++) {
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
		Mutex[i].priority_stack[j] = LOWEST_PRIORITY+1;
     df2:	6b e5       	ldi	r22, 0x5B	; 91
     df4:	64 9f       	mul	r22, r20
     df6:	90 01       	movw	r18, r0
     df8:	65 9f       	mul	r22, r21
     dfa:	30 0d       	add	r19, r0
     dfc:	11 24       	eor	r1, r1
     dfe:	df 01       	movw	r26, r30
     e00:	cb e0       	ldi	r28, 0x0B	; 11
		Mutex[i].blocked_stack[j] = -1;
     e02:	6f ef       	ldi	r22, 0xFF	; 255
     e04:	7f ef       	ldi	r23, 0xFF	; 255
	//Assign a new unique ID to the mutex. Note that the smallest valid mutex ID is 1.
	Mutex[i].id = ++Last_MutexID;
	Mutex[i].owner = 0;		// note when mutex's owner is 0, it is free
	// init priority stack
	for (int j=0; j<MAXTHREAD; j++) {
		Mutex[i].priority_stack[j] = LOWEST_PRIORITY+1;
     e06:	fd 01       	movw	r30, r26
     e08:	e8 0f       	add	r30, r24
     e0a:	f9 1f       	adc	r31, r25
     e0c:	c6 a3       	std	Z+38, r28	; 0x26
		Mutex[i].blocked_stack[j] = -1;
     e0e:	fc 01       	movw	r30, r24
     e10:	33 96       	adiw	r30, 0x03	; 3
     e12:	ee 0f       	add	r30, r30
     e14:	ff 1f       	adc	r31, r31
     e16:	e2 0f       	add	r30, r18
     e18:	f3 1f       	adc	r31, r19
     e1a:	e9 5c       	subi	r30, 0xC9	; 201
     e1c:	fd 4f       	sbci	r31, 0xFD	; 253
     e1e:	71 83       	std	Z+1, r23	; 0x01
     e20:	60 83       	st	Z, r22
		Mutex[i].order[j] = 0;
     e22:	fc 01       	movw	r30, r24
     e24:	7b 96       	adiw	r30, 0x1b	; 27
     e26:	ee 0f       	add	r30, r30
     e28:	ff 1f       	adc	r31, r31
     e2a:	e2 0f       	add	r30, r18
     e2c:	f3 1f       	adc	r31, r19
     e2e:	e9 5c       	subi	r30, 0xC9	; 201
     e30:	fd 4f       	sbci	r31, 0xFD	; 253
     e32:	11 82       	std	Z+1, r1	; 0x01
     e34:	10 82       	st	Z, r1
	
	//Assign a new unique ID to the mutex. Note that the smallest valid mutex ID is 1.
	Mutex[i].id = ++Last_MutexID;
	Mutex[i].owner = 0;		// note when mutex's owner is 0, it is free
	// init priority stack
	for (int j=0; j<MAXTHREAD; j++) {
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	80 31       	cpi	r24, 0x10	; 16
     e3a:	91 05       	cpc	r25, r1
     e3c:	21 f7       	brne	.-56     	; 0xe06 <Kernel_Create_Mutex+0x92>
		Mutex[i].priority_stack[j] = LOWEST_PRIORITY+1;
		Mutex[i].blocked_stack[j] = -1;
		Mutex[i].order[j] = 0;
	}
	Mutex[i].num_of_process = 0;
     e3e:	2b e5       	ldi	r18, 0x5B	; 91
     e40:	24 9f       	mul	r18, r20
     e42:	c0 01       	movw	r24, r0
     e44:	25 9f       	mul	r18, r21
     e46:	90 0d       	add	r25, r0
     e48:	11 24       	eor	r1, r1
     e4a:	89 5c       	subi	r24, 0xC9	; 201
     e4c:	9d 4f       	sbci	r25, 0xFD	; 253
     e4e:	fc 01       	movw	r30, r24
     e50:	ea 5a       	subi	r30, 0xAA	; 170
     e52:	ff 4f       	sbci	r31, 0xFF	; 255
     e54:	11 82       	std	Z+1, r1	; 0x01
     e56:	10 82       	st	Z, r1
	Mutex[i].total_num = 0;
     e58:	32 96       	adiw	r30, 0x02	; 2
     e5a:	11 82       	std	Z+1, r1	; 0x01
     e5c:	10 82       	st	Z, r1
	++Mutex_Count;
     e5e:	80 91 2f 02 	lds	r24, 0x022F
     e62:	90 91 30 02 	lds	r25, 0x0230
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	90 93 30 02 	sts	0x0230, r25
     e6c:	80 93 2f 02 	sts	0x022F, r24
	err = NO_ERR;
     e70:	10 92 29 16 	sts	0x1629, r1
	
	#ifdef OS_DEBUG
	printf("Kernel_Create_Mutex: Created Mutex %d!\n", Last_MutexID);
	#endif
}
     e74:	cf 91       	pop	r28
     e76:	08 95       	ret

00000e78 <Timer_init>:
void Timer_init()
{
	/*Timer1 is configured for the task*/
	
	//Use Prescaler = 256
	TCCR1B |= (1<<CS12);
     e78:	e1 e8       	ldi	r30, 0x81	; 129
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	84 60       	ori	r24, 0x04	; 4
     e80:	80 83       	st	Z, r24
	TCCR1B &= ~((1<<CS11)|(1<<CS10));
     e82:	80 81       	ld	r24, Z
     e84:	8c 7f       	andi	r24, 0xFC	; 252
     e86:	80 83       	st	Z, r24
	
	//Use CTC mode (mode 4)
	TCCR1B |= (1<<WGM12);
     e88:	80 81       	ld	r24, Z
     e8a:	88 60       	ori	r24, 0x08	; 8
     e8c:	80 83       	st	Z, r24
	TCCR1B &= ~((1<<WGM13)|(1<<WGM11)|(1<<WGM10));
     e8e:	80 81       	ld	r24, Z
     e90:	8c 7e       	andi	r24, 0xEC	; 236
     e92:	80 83       	st	Z, r24
	
	OCR1A = TICK_LENG;			//Set timer top comparison value to ~10ms
     e94:	81 e7       	ldi	r24, 0x71	; 113
     e96:	92 e0       	ldi	r25, 0x02	; 2
     e98:	90 93 89 00 	sts	0x0089, r25
     e9c:	80 93 88 00 	sts	0x0088, r24
	TCNT1 = 0;					//Load initial value for timer
     ea0:	10 92 85 00 	sts	0x0085, r1
     ea4:	10 92 84 00 	sts	0x0084, r1
	TIMSK1 |= (1<<OCIE1A);      //enable match for OCR1A interrupt
     ea8:	ef e6       	ldi	r30, 0x6F	; 111
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	82 60       	ori	r24, 0x02	; 2
     eb0:	80 83       	st	Z, r24
     eb2:	08 95       	ret

00000eb4 <OS_Init>:
/*This function initializes the RTOS and must be called before any othersystem calls.*/
void OS_Init()
{
	int x;
	
	Task_Count = 0;
     eb4:	10 92 34 02 	sts	0x0234, r1
     eb8:	10 92 33 02 	sts	0x0233, r1
	Event_Count = 0;
     ebc:	10 92 32 02 	sts	0x0232, r1
     ec0:	10 92 31 02 	sts	0x0231, r1
	KernelActive = 0;
     ec4:	10 92 26 16 	sts	0x1626, r1
     ec8:	10 92 25 16 	sts	0x1625, r1
	Tick_Count = 0;
     ecc:	10 92 2e 02 	sts	0x022E, r1
     ed0:	10 92 2d 02 	sts	0x022D, r1
	NextP = 0;
     ed4:	10 92 36 02 	sts	0x0236, r1
     ed8:	10 92 35 02 	sts	0x0235, r1
	Last_PID = 0;
     edc:	10 92 24 16 	sts	0x1624, r1
     ee0:	10 92 23 16 	sts	0x1623, r1
	Last_EventID = 0;
     ee4:	10 92 28 16 	sts	0x1628, r1
     ee8:	10 92 27 16 	sts	0x1627, r1
	Last_MutexID = 0;
     eec:	10 92 2f 16 	sts	0x162F, r1
     ef0:	10 92 2e 16 	sts	0x162E, r1
	err = NO_ERR;
     ef4:	10 92 29 16 	sts	0x1629, r1
	
	//Clear and initialize the memory used for tasks
	memset(Process, 0, MAXTHREAD*sizeof(PD));
     ef8:	80 ee       	ldi	r24, 0xE0	; 224
     efa:	90 e1       	ldi	r25, 0x10	; 16
     efc:	ef e3       	ldi	r30, 0x3F	; 63
     efe:	f5 e0       	ldi	r31, 0x05	; 5
     f00:	df 01       	movw	r26, r30
     f02:	9c 01       	movw	r18, r24
     f04:	1d 92       	st	X+, r1
     f06:	21 50       	subi	r18, 0x01	; 1
     f08:	30 40       	sbci	r19, 0x00	; 0
     f0a:	e1 f7       	brne	.-8      	; 0xf04 <OS_Init+0x50>
	for (x = 0; x < MAXTHREAD; x++) {
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
		Process[x].state = DEAD;
     f10:	2e e0       	ldi	r18, 0x0E	; 14
     f12:	31 e0       	ldi	r19, 0x01	; 1
     f14:	82 9f       	mul	r24, r18
     f16:	f0 01       	movw	r30, r0
     f18:	83 9f       	mul	r24, r19
     f1a:	f0 0d       	add	r31, r0
     f1c:	92 9f       	mul	r25, r18
     f1e:	f0 0d       	add	r31, r0
     f20:	11 24       	eor	r1, r1
     f22:	e1 5c       	subi	r30, 0xC1	; 193
     f24:	fa 4f       	sbci	r31, 0xFA	; 250
     f26:	13 82       	std	Z+3, r1	; 0x03
	Last_MutexID = 0;
	err = NO_ERR;
	
	//Clear and initialize the memory used for tasks
	memset(Process, 0, MAXTHREAD*sizeof(PD));
	for (x = 0; x < MAXTHREAD; x++) {
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	80 31       	cpi	r24, 0x10	; 16
     f2c:	91 05       	cpc	r25, r1
     f2e:	91 f7       	brne	.-28     	; 0xf14 <OS_Init+0x60>
		Process[x].state = DEAD;
	}
	
	//Clear and initialize the memory used for Events
	memset(Event, 0, MAXEVENT*sizeof(EVENT_TYPE));
     f30:	80 e3       	ldi	r24, 0x30	; 48
     f32:	ef e0       	ldi	r30, 0x0F	; 15
     f34:	f5 e0       	ldi	r31, 0x05	; 5
     f36:	df 01       	movw	r26, r30
     f38:	1d 92       	st	X+, r1
     f3a:	8a 95       	dec	r24
     f3c:	e9 f7       	brne	.-6      	; 0xf38 <OS_Init+0x84>
	for (x = 0; x < MAXEVENT; x++) {
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
		Event[x].id = 0;
     f42:	fc 01       	movw	r30, r24
     f44:	ee 0f       	add	r30, r30
     f46:	ff 1f       	adc	r31, r31
     f48:	e8 0f       	add	r30, r24
     f4a:	f9 1f       	adc	r31, r25
     f4c:	ee 0f       	add	r30, r30
     f4e:	ff 1f       	adc	r31, r31
     f50:	e1 5f       	subi	r30, 0xF1	; 241
     f52:	fa 4f       	sbci	r31, 0xFA	; 250
     f54:	11 82       	std	Z+1, r1	; 0x01
     f56:	10 82       	st	Z, r1
		Process[x].state = DEAD;
	}
	
	//Clear and initialize the memory used for Events
	memset(Event, 0, MAXEVENT*sizeof(EVENT_TYPE));
	for (x = 0; x < MAXEVENT; x++) {
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	88 30       	cpi	r24, 0x08	; 8
     f5c:	91 05       	cpc	r25, r1
     f5e:	89 f7       	brne	.-30     	; 0xf42 <OS_Init+0x8e>
		Event[x].id = 0;
	}
	
	//Clear and initialize the memory used for Mutex
	memset(Mutex, 0, MAXMUTEX*sizeof(MUTEX_TYPE));
     f60:	88 ed       	ldi	r24, 0xD8	; 216
     f62:	92 e0       	ldi	r25, 0x02	; 2
     f64:	e7 e3       	ldi	r30, 0x37	; 55
     f66:	f2 e0       	ldi	r31, 0x02	; 2
     f68:	df 01       	movw	r26, r30
     f6a:	9c 01       	movw	r18, r24
     f6c:	1d 92       	st	X+, r1
     f6e:	21 50       	subi	r18, 0x01	; 1
     f70:	30 40       	sbci	r19, 0x00	; 0
     f72:	e1 f7       	brne	.-8      	; 0xf6c <OS_Init+0xb8>
	for (x = 0; x < MAXMUTEX; x++) {
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
		Event[x].id = 0;
     f78:	fc 01       	movw	r30, r24
     f7a:	ee 0f       	add	r30, r30
     f7c:	ff 1f       	adc	r31, r31
     f7e:	e8 0f       	add	r30, r24
     f80:	f9 1f       	adc	r31, r25
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	e1 5f       	subi	r30, 0xF1	; 241
     f88:	fa 4f       	sbci	r31, 0xFA	; 250
     f8a:	11 82       	std	Z+1, r1	; 0x01
     f8c:	10 82       	st	Z, r1
		Event[x].id = 0;
	}
	
	//Clear and initialize the memory used for Mutex
	memset(Mutex, 0, MAXMUTEX*sizeof(MUTEX_TYPE));
	for (x = 0; x < MAXMUTEX; x++) {
     f8e:	01 96       	adiw	r24, 0x01	; 1
     f90:	88 30       	cpi	r24, 0x08	; 8
     f92:	91 05       	cpc	r25, r1
     f94:	89 f7       	brne	.-30     	; 0xf78 <OS_Init+0xc4>
	}
	
	#ifdef OS_DEBUG
	printf("OS initialized!\n");
	#endif
}
     f96:	08 95       	ret

00000f98 <OS_Start>:

/* This function starts the RTOS after creating a few tasks.*/
void OS_Start()
{
     f98:	2f 92       	push	r2
     f9a:	3f 92       	push	r3
     f9c:	4f 92       	push	r4
     f9e:	5f 92       	push	r5
     fa0:	6f 92       	push	r6
     fa2:	7f 92       	push	r7
     fa4:	8f 92       	push	r8
     fa6:	9f 92       	push	r9
     fa8:	af 92       	push	r10
     faa:	bf 92       	push	r11
     fac:	cf 92       	push	r12
     fae:	df 92       	push	r13
     fb0:	ef 92       	push	r14
     fb2:	ff 92       	push	r15
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
	if ( (! KernelActive) && (Task_Count > 0))
     fbc:	80 91 25 16 	lds	r24, 0x1625
     fc0:	90 91 26 16 	lds	r25, 0x1626
     fc4:	89 2b       	or	r24, r25
     fc6:	09 f0       	breq	.+2      	; 0xfca <OS_Start+0x32>
     fc8:	0f c3       	rjmp	.+1566   	; 0x15e8 <OS_Start+0x650>
     fca:	80 91 33 02 	lds	r24, 0x0233
     fce:	90 91 34 02 	lds	r25, 0x0234
     fd2:	89 2b       	or	r24, r25
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <OS_Start+0x40>
     fd6:	08 c3       	rjmp	.+1552   	; 0x15e8 <OS_Start+0x650>
	{
		Disable_Interrupt();
     fd8:	f8 94       	cli
		
		/* we may have to initialize the interrupt vector for Enter_Kernel() here. */
			/* here we go...  */
		KernelActive = 1;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	90 93 26 16 	sts	0x1626, r25
     fe2:	80 93 25 16 	sts	0x1625, r24
		
		/*Initialize and start Timer needed for sleep*/
		Timer_init();
     fe6:	48 df       	rcall	.-368    	; 0xe78 <Timer_init>
  *
  * This is the main loop of our kernel, called by OS_Start().
  */
static void Next_Kernel_Request() 
{
	Dispatch();	//Select an initial task to run
     fe8:	5f dd       	rcall	.-1346   	; 0xaa8 <Dispatch>
			Dispatch();
			break;
       
			//Invalid request code, just ignore
			default:
				err = INVALID_KERNET_REQUEST_ERR;
     fea:	68 94       	set
     fec:	55 24       	eor	r5, r5
     fee:	51 f8       	bld	r5, 1
			//Does this need dispatch under any circumstances?
			break;
		   
			case YIELD:
			case NONE:					// NONE could be caused by a timer interrupt
			Cp->state = READY;
     ff0:	99 24       	eor	r9, r9
     ff2:	93 94       	inc	r9
	} else if (m->num_of_process > 0) {
		// there are tasks waiting on the mutex
		// deque the task with highest priority
		PID p_dequeue = 0;
		unsigned int temp_order = m->total_num + 1;
		PRIORITY temp_pri = LOWEST_PRIORITY + 1;
     ff4:	0f 2e       	mov	r0, r31
     ff6:	fb e0       	ldi	r31, 0x0B	; 11
     ff8:	8f 2e       	mov	r8, r31
     ffa:	f0 2d       	mov	r31, r0
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
		//enqueue cp to stack
		++(m->num_of_process);
		++(m->total_num);
		for (int i=0; i<MAXTHREAD; i++) {
     ffc:	77 24       	eor	r7, r7
     ffe:	73 94       	inc	r7
    1000:	61 2c       	mov	r6, r1
		return;
	}
	
	//Ensure the task is not currently owning a mutex
	for(int i=0; i<MAXMUTEX; i++) {
		if (Mutex[i].owner == p->pid) {
    1002:	0f 2e       	mov	r0, r31
    1004:	fb e5       	ldi	r31, 0x5B	; 91
    1006:	cf 2e       	mov	r12, r31
    1008:	f0 2d       	mov	r31, r0
		if (Mutex[index].owner == Cp->pid) {
			// it owns a mutex unlock the mutex
			if (Mutex[index].num_of_process > 0) {
				printf("something is waiting\n");
				// if there are other process waiting on the mutex
				PID p_dequeue = 0;
    100a:	41 2c       	mov	r4, r1
    100c:	31 2c       	mov	r3, r1
	//After OS initialization, THIS WILL BE KERNEL'S MAIN LOOP!
	//NOTE: When another task makes a syscall and enters the loop, it's still in the RUNNING state!
	while(1) 
	{
		//Clears the process' request fields
		Cp->request = NONE;
    100e:	e0 91 2c 16 	lds	r30, 0x162C
    1012:	f0 91 2d 16 	lds	r31, 0x162D
    1016:	15 82       	std	Z+5, r1	; 0x05
		//Cp->request_arg is not reset, because task_sleep uses it to keep track of remaining ticks

		//Load the current task's stack pointer and switch to its context
		CurrentSp = Cp->sp;
    1018:	82 85       	ldd	r24, Z+10	; 0x0a
    101a:	93 85       	ldd	r25, Z+11	; 0x0b
    101c:	90 93 2b 16 	sts	0x162B, r25
    1020:	80 93 2a 16 	sts	0x162A, r24
		Exit_Kernel();
    1024:	8e d8       	rcall	.-3812   	; 0x142 <CSwitch>

		/* if this task makes a system call, it will return to here! */

		//Save the current task's stack pointer and proceed to handle its request
		Cp->sp = CurrentSp;
    1026:	e0 91 2c 16 	lds	r30, 0x162C
    102a:	f0 91 2d 16 	lds	r31, 0x162D
    102e:	80 91 2a 16 	lds	r24, 0x162A
    1032:	90 91 2b 16 	lds	r25, 0x162B
    1036:	93 87       	std	Z+11, r25	; 0x0b
    1038:	82 87       	std	Z+10, r24	; 0x0a
		
		//Check if any timer ticks came in
		Kernel_Tick_Handler();
    103a:	bf dc       	rcall	.-1666   	; 0x9ba <Kernel_Tick_Handler>

		switch(Cp->request)
    103c:	c0 91 2c 16 	lds	r28, 0x162C
    1040:	d0 91 2d 16 	lds	r29, 0x162D
    1044:	8d 81       	ldd	r24, Y+5	; 0x05
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	8d 30       	cpi	r24, 0x0D	; 13
    104a:	91 05       	cpc	r25, r1
    104c:	08 f0       	brcs	.+2      	; 0x1050 <OS_Start+0xb8>
    104e:	c9 c2       	rjmp	.+1426   	; 0x15e2 <OS_Start+0x64a>
    1050:	fc 01       	movw	r30, r24
    1052:	88 27       	eor	r24, r24
    1054:	ee 58       	subi	r30, 0x8E	; 142
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	8f 4f       	sbci	r24, 0xFF	; 255
    105a:	80 c4       	rjmp	.+2304   	; 0x195c <__tablejump2__>
		{
			case CREATE_T:
			Kernel_Create_Task(Cp->code, Cp->pri, Cp->arg);
    105c:	48 85       	ldd	r20, Y+8	; 0x08
    105e:	59 85       	ldd	r21, Y+9	; 0x09
    1060:	6a 81       	ldd	r22, Y+2	; 0x02
    1062:	c4 5f       	subi	r28, 0xF4	; 244
    1064:	de 4f       	sbci	r29, 0xFE	; 254
    1066:	88 81       	ld	r24, Y
    1068:	99 81       	ldd	r25, Y+1	; 0x01
    106a:	b4 dd       	rcall	.-1176   	; 0xbd4 <Kernel_Create_Task>
    106c:	d0 cf       	rjmp	.-96     	; 0x100e <OS_Start+0x76>
		Cp->sp = CurrentSp;
		
		//Check if any timer ticks came in
		Kernel_Tick_Handler();

		switch(Cp->request)
    106e:	10 e0       	ldi	r17, 0x00	; 0
    1070:	c1 2f       	mov	r28, r17
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	d2 2f       	mov	r29, r18
{
	MUTEX_TYPE* m;
	// go through all mutex check if it owns a mutex
	int index;
	for (index=0; index<MAXMUTEX; index++) {
		if (Mutex[index].owner == Cp->pid) {
    1076:	cc 9e       	mul	r12, r28
    1078:	f0 01       	movw	r30, r0
    107a:	cd 9e       	mul	r12, r29
    107c:	f0 0d       	add	r31, r0
    107e:	11 24       	eor	r1, r1
    1080:	e9 5c       	subi	r30, 0xC9	; 201
    1082:	fd 4f       	sbci	r31, 0xFD	; 253
    1084:	22 81       	ldd	r18, Z+2	; 0x02
    1086:	33 81       	ldd	r19, Z+3	; 0x03
    1088:	e0 91 2c 16 	lds	r30, 0x162C
    108c:	f0 91 2d 16 	lds	r31, 0x162D
    1090:	80 81       	ld	r24, Z
    1092:	91 81       	ldd	r25, Z+1	; 0x01
    1094:	28 17       	cp	r18, r24
    1096:	39 07       	cpc	r19, r25
    1098:	09 f0       	breq	.+2      	; 0x109c <OS_Start+0x104>
    109a:	ac c0       	rjmp	.+344    	; 0x11f4 <OS_Start+0x25c>
			// it owns a mutex unlock the mutex
			if (Mutex[index].num_of_process > 0) {
    109c:	cc 9e       	mul	r12, r28
    109e:	f0 01       	movw	r30, r0
    10a0:	cd 9e       	mul	r12, r29
    10a2:	f0 0d       	add	r31, r0
    10a4:	11 24       	eor	r1, r1
    10a6:	e3 57       	subi	r30, 0x73	; 115
    10a8:	fd 4f       	sbci	r31, 0xFD	; 253
    10aa:	80 81       	ld	r24, Z
    10ac:	91 81       	ldd	r25, Z+1	; 0x01
    10ae:	89 2b       	or	r24, r25
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <OS_Start+0x11c>
    10b2:	95 c0       	rjmp	.+298    	; 0x11de <OS_Start+0x246>
				printf("something is waiting\n");
    10b4:	85 e0       	ldi	r24, 0x05	; 5
    10b6:	92 e0       	ldi	r25, 0x02	; 2
    10b8:	68 d4       	rcall	.+2256   	; 0x198a <puts>
				// if there are other process waiting on the mutex
				PID p_dequeue = 0;
				unsigned int temp_order = Mutex[index].total_num + 1;
    10ba:	cc 9e       	mul	r12, r28
    10bc:	f0 01       	movw	r30, r0
    10be:	cd 9e       	mul	r12, r29
    10c0:	f0 0d       	add	r31, r0
    10c2:	11 24       	eor	r1, r1
    10c4:	e1 57       	subi	r30, 0x71	; 113
    10c6:	fd 4f       	sbci	r31, 0xFD	; 253
    10c8:	60 81       	ld	r22, Z
    10ca:	71 81       	ldd	r23, Z+1	; 0x01
    10cc:	6f 5f       	subi	r22, 0xFF	; 255
    10ce:	7f 4f       	sbci	r23, 0xFF	; 255
		if (Mutex[index].owner == Cp->pid) {
			// it owns a mutex unlock the mutex
			if (Mutex[index].num_of_process > 0) {
				printf("something is waiting\n");
				// if there are other process waiting on the mutex
				PID p_dequeue = 0;
    10d0:	e4 2c       	mov	r14, r4
    10d2:	f3 2c       	mov	r15, r3
				unsigned int temp_order = Mutex[index].total_num + 1;
				PRIORITY temp_pri = LOWEST_PRIORITY + 1;
    10d4:	18 2d       	mov	r17, r8
				int i;
				for (i=0; i<MAXTHREAD; i++) {
    10d6:	24 2d       	mov	r18, r4
    10d8:	33 2d       	mov	r19, r3
					if (Mutex[index].priority_stack[i] < temp_pri) {
    10da:	cc 9e       	mul	r12, r28
    10dc:	a0 01       	movw	r20, r0
    10de:	cd 9e       	mul	r12, r29
    10e0:	50 0d       	add	r21, r0
    10e2:	11 24       	eor	r1, r1
    10e4:	ca 01       	movw	r24, r20
    10e6:	89 5c       	subi	r24, 0xC9	; 201
    10e8:	9d 4f       	sbci	r25, 0xFD	; 253
    10ea:	fc 01       	movw	r30, r24
    10ec:	e2 0f       	add	r30, r18
    10ee:	f3 1f       	adc	r31, r19
    10f0:	e6 a1       	ldd	r30, Z+38	; 0x26
    10f2:	e1 17       	cp	r30, r17
    10f4:	c8 f4       	brcc	.+50     	; 0x1128 <OS_Start+0x190>
						// found a task with higher priority
						temp_pri = Mutex[index].priority_stack[i];
    10f6:	fc 01       	movw	r30, r24
    10f8:	e2 0f       	add	r30, r18
    10fa:	f3 1f       	adc	r31, r19
    10fc:	16 a1       	ldd	r17, Z+38	; 0x26
						temp_order = Mutex[index].order[i];
    10fe:	f9 01       	movw	r30, r18
    1100:	7b 96       	adiw	r30, 0x1b	; 27
    1102:	ee 0f       	add	r30, r30
    1104:	ff 1f       	adc	r31, r31
    1106:	e4 0f       	add	r30, r20
    1108:	f5 1f       	adc	r31, r21
    110a:	e9 5c       	subi	r30, 0xC9	; 201
    110c:	fd 4f       	sbci	r31, 0xFD	; 253
    110e:	60 81       	ld	r22, Z
    1110:	71 81       	ldd	r23, Z+1	; 0x01
						p_dequeue = Mutex[index].blocked_stack[i];
    1112:	f9 01       	movw	r30, r18
    1114:	33 96       	adiw	r30, 0x03	; 3
    1116:	ee 0f       	add	r30, r30
    1118:	ff 1f       	adc	r31, r31
    111a:	e4 0f       	add	r30, r20
    111c:	f5 1f       	adc	r31, r21
    111e:	e9 5c       	subi	r30, 0xC9	; 201
    1120:	fd 4f       	sbci	r31, 0xFD	; 253
    1122:	e0 80       	ld	r14, Z
    1124:	f1 80       	ldd	r15, Z+1	; 0x01
    1126:	28 c0       	rjmp	.+80     	; 0x1178 <OS_Start+0x1e0>
						} else if (Mutex[index].priority_stack[i] == temp_pri && temp_order < Mutex[index].order[i]) {
    1128:	fc 01       	movw	r30, r24
    112a:	e2 0f       	add	r30, r18
    112c:	f3 1f       	adc	r31, r19
    112e:	e6 a1       	ldd	r30, Z+38	; 0x26
    1130:	1e 13       	cpse	r17, r30
    1132:	22 c0       	rjmp	.+68     	; 0x1178 <OS_Start+0x1e0>
    1134:	f9 01       	movw	r30, r18
    1136:	7b 96       	adiw	r30, 0x1b	; 27
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	e4 0f       	add	r30, r20
    113e:	f5 1f       	adc	r31, r21
    1140:	e9 5c       	subi	r30, 0xC9	; 201
    1142:	fd 4f       	sbci	r31, 0xFD	; 253
    1144:	01 90       	ld	r0, Z+
    1146:	f0 81       	ld	r31, Z
    1148:	e0 2d       	mov	r30, r0
    114a:	6e 17       	cp	r22, r30
    114c:	7f 07       	cpc	r23, r31
    114e:	a0 f4       	brcc	.+40     	; 0x1178 <OS_Start+0x1e0>
						// same priority and came into the queue earlier
						temp_order = Mutex[index].order[i];
    1150:	f9 01       	movw	r30, r18
    1152:	7b 96       	adiw	r30, 0x1b	; 27
    1154:	ee 0f       	add	r30, r30
    1156:	ff 1f       	adc	r31, r31
    1158:	e4 0f       	add	r30, r20
    115a:	f5 1f       	adc	r31, r21
    115c:	e9 5c       	subi	r30, 0xC9	; 201
    115e:	fd 4f       	sbci	r31, 0xFD	; 253
    1160:	60 81       	ld	r22, Z
    1162:	71 81       	ldd	r23, Z+1	; 0x01
						p_dequeue = Mutex[index].blocked_stack[i];
    1164:	f9 01       	movw	r30, r18
    1166:	33 96       	adiw	r30, 0x03	; 3
    1168:	ee 0f       	add	r30, r30
    116a:	ff 1f       	adc	r31, r31
    116c:	e4 0f       	add	r30, r20
    116e:	f5 1f       	adc	r31, r21
    1170:	e9 5c       	subi	r30, 0xC9	; 201
    1172:	fd 4f       	sbci	r31, 0xFD	; 253
    1174:	e0 80       	ld	r14, Z
    1176:	f1 80       	ldd	r15, Z+1	; 0x01
				// if there are other process waiting on the mutex
				PID p_dequeue = 0;
				unsigned int temp_order = Mutex[index].total_num + 1;
				PRIORITY temp_pri = LOWEST_PRIORITY + 1;
				int i;
				for (i=0; i<MAXTHREAD; i++) {
    1178:	2f 5f       	subi	r18, 0xFF	; 255
    117a:	3f 4f       	sbci	r19, 0xFF	; 255
    117c:	20 31       	cpi	r18, 0x10	; 16
    117e:	31 05       	cpc	r19, r1
    1180:	09 f0       	breq	.+2      	; 0x1184 <OS_Start+0x1ec>
    1182:	b3 cf       	rjmp	.-154    	; 0x10ea <OS_Start+0x152>
						temp_order = Mutex[index].order[i];
						p_dequeue = Mutex[index].blocked_stack[i];
					}
				}
				//dequeue index i
				Mutex[index].blocked_stack[i] = -1;
    1184:	cc 9e       	mul	r12, r28
    1186:	c0 01       	movw	r24, r0
    1188:	cd 9e       	mul	r12, r29
    118a:	90 0d       	add	r25, r0
    118c:	11 24       	eor	r1, r1
    118e:	dc 01       	movw	r26, r24
    1190:	a9 5c       	subi	r26, 0xC9	; 201
    1192:	bd 4f       	sbci	r27, 0xFD	; 253
    1194:	5d 01       	movw	r10, r26
    1196:	ef ef       	ldi	r30, 0xFF	; 255
    1198:	ff ef       	ldi	r31, 0xFF	; 255
    119a:	97 96       	adiw	r26, 0x27	; 39
    119c:	fc 93       	st	X, r31
    119e:	ee 93       	st	-X, r30
    11a0:	96 97       	sbiw	r26, 0x26	; 38
				Mutex[index].priority_stack[i] = LOWEST_PRIORITY+1;
    11a2:	d6 96       	adiw	r26, 0x36	; 54
    11a4:	8c 92       	st	X, r8
    11a6:	d6 97       	sbiw	r26, 0x36	; 54
				Mutex[index].order[i] = 0;
    11a8:	fd 01       	movw	r30, r26
    11aa:	ea 5a       	subi	r30, 0xAA	; 170
    11ac:	ff 4f       	sbci	r31, 0xFF	; 255
    11ae:	11 82       	std	Z+1, r1	; 0x01
    11b0:	10 82       	st	Z, r1
				--(Mutex[index].num_of_process);
    11b2:	80 81       	ld	r24, Z
    11b4:	91 81       	ldd	r25, Z+1	; 0x01
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	91 83       	std	Z+1, r25	; 0x01
    11ba:	80 83       	st	Z, r24
				PD* target_p = findProcessByPID(p_dequeue);
    11bc:	c7 01       	movw	r24, r14
    11be:	42 db       	rcall	.-2428   	; 0x844 <findProcessByPID>
				Mutex[index].owner = p_dequeue;
    11c0:	d5 01       	movw	r26, r10
    11c2:	13 96       	adiw	r26, 0x03	; 3
    11c4:	fc 92       	st	X, r15
    11c6:	ee 92       	st	-X, r14
    11c8:	12 97       	sbiw	r26, 0x02	; 2
				Mutex[index].own_pri = temp_pri;			//keep track of new owner's priority;
    11ca:	f5 01       	movw	r30, r10
    11cc:	e6 5a       	subi	r30, 0xA6	; 166
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	10 83       	st	Z, r17
				target_p->state = READY;
    11d2:	fc 01       	movw	r30, r24
    11d4:	93 82       	std	Z+3, r9	; 0x03
				printf("target p is readd\n");
    11d6:	8a e1       	ldi	r24, 0x1A	; 26
    11d8:	92 e0       	ldi	r25, 0x02	; 2
    11da:	d7 d3       	rcall	.+1966   	; 0x198a <puts>
    11dc:	0b c0       	rjmp	.+22     	; 0x11f4 <OS_Start+0x25c>
			} else {
				Mutex[index].owner = 0;
    11de:	cc 9e       	mul	r12, r28
    11e0:	f0 01       	movw	r30, r0
    11e2:	cd 9e       	mul	r12, r29
    11e4:	f0 0d       	add	r31, r0
    11e6:	11 24       	eor	r1, r1
    11e8:	e9 5c       	subi	r30, 0xC9	; 201
    11ea:	fd 4f       	sbci	r31, 0xFD	; 253
    11ec:	13 82       	std	Z+3, r1	; 0x03
    11ee:	12 82       	std	Z+2, r1	; 0x02
				Mutex[index].count = 0;
    11f0:	15 82       	std	Z+5, r1	; 0x05
    11f2:	14 82       	std	Z+4, r1	; 0x04
static void Kernel_Terminate_Task(void)
{
	MUTEX_TYPE* m;
	// go through all mutex check if it owns a mutex
	int index;
	for (index=0; index<MAXMUTEX; index++) {
    11f4:	21 96       	adiw	r28, 0x01	; 1
    11f6:	c8 30       	cpi	r28, 0x08	; 8
    11f8:	d1 05       	cpc	r29, r1
    11fa:	09 f0       	breq	.+2      	; 0x11fe <OS_Start+0x266>
    11fc:	3c cf       	rjmp	.-392    	; 0x1076 <OS_Start+0xde>
				Mutex[index].owner = 0;
				Mutex[index].count = 0;
			}
		}
	}
	Cp->state = DEAD;			//Mark the task as DEAD so its resources will be recycled later when new tasks are created
    11fe:	e0 91 2c 16 	lds	r30, 0x162C
    1202:	f0 91 2d 16 	lds	r31, 0x162D
    1206:	13 82       	std	Z+3, r1	; 0x03
	--Task_Count;
    1208:	80 91 33 02 	lds	r24, 0x0233
    120c:	90 91 34 02 	lds	r25, 0x0234
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	90 93 34 02 	sts	0x0234, r25
    1216:	80 93 33 02 	sts	0x0233, r24
			Kernel_Create_Task(Cp->code, Cp->pri, Cp->arg);
			break;
			
			case TERMINATE:
			Kernel_Terminate_Task();
			Dispatch();					//Dispatch is only needed if the syscall requires running a different task  after it's done
    121a:	46 dc       	rcall	.-1908   	; 0xaa8 <Dispatch>
    121c:	f8 ce       	rjmp	.-528    	; 0x100e <OS_Start+0x76>

/*TODO: Check for mutex ownership. If PID owns any mutex, ignore this request*/
static void Kernel_Suspend_Task() 
{
	//Finds the process descriptor for the specified PID
	PD* p = findProcessByPID(Cp->request_arg);
    121e:	8e 81       	ldd	r24, Y+6	; 0x06
    1220:	9f 81       	ldd	r25, Y+7	; 0x07
    1222:	10 db       	rcall	.-2528   	; 0x844 <findProcessByPID>
	
	//Ensure the PID specified in the PD currently exists in the global process list
	if(p == NULL)
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	21 f4       	brne	.+8      	; 0x1230 <OS_Start+0x298>
	{
		#ifdef OS_DEBUG
			printf("Kernel_Suspend_Task: PID not found in global process list!\n");
		#endif
		err = PID_NOT_FOUND_ERR;
    1228:	85 e0       	ldi	r24, 0x05	; 5
    122a:	80 93 29 16 	sts	0x1629, r24
    122e:	31 c0       	rjmp	.+98     	; 0x1292 <OS_Start+0x2fa>
		return;
	}
	
	//Ensure the task is not in a unsuspendable state
	if(p->state == DEAD || p->state == SUSPENDED)
    1230:	fc 01       	movw	r30, r24
    1232:	a3 81       	ldd	r26, Z+3	; 0x03
    1234:	aa 23       	and	r26, r26
    1236:	71 f0       	breq	.+28     	; 0x1254 <OS_Start+0x2bc>
    1238:	a3 30       	cpi	r26, 0x03	; 3
    123a:	61 f0       	breq	.+24     	; 0x1254 <OS_Start+0x2bc>
		return;
	}
	
	//Ensure the task is not currently owning a mutex
	for(int i=0; i<MAXMUTEX; i++) {
		if (Mutex[i].owner == p->pid) {
    123c:	20 91 39 02 	lds	r18, 0x0239
    1240:	30 91 3a 02 	lds	r19, 0x023A
    1244:	60 81       	ld	r22, Z
    1246:	71 81       	ldd	r23, Z+1	; 0x01
    1248:	26 17       	cp	r18, r22
    124a:	37 07       	cpc	r19, r23
    124c:	99 f0       	breq	.+38     	; 0x1274 <OS_Start+0x2dc>
    124e:	27 2d       	mov	r18, r7
    1250:	36 2d       	mov	r19, r6
    1252:	04 c0       	rjmp	.+8      	; 0x125c <OS_Start+0x2c4>
	if(p->state == DEAD || p->state == SUSPENDED)
	{
		#ifdef OS_DEBUG
		printf("Kernel_Suspend_Task: Trying to suspend a task that's in an unsuspendable state %d!\n", p->state);
		#endif
		err = SUSPEND_NONRUNNING_TASK_ERR;
    1254:	86 e0       	ldi	r24, 0x06	; 6
    1256:	80 93 29 16 	sts	0x1629, r24
    125a:	1b c0       	rjmp	.+54     	; 0x1292 <OS_Start+0x2fa>
		return;
	}
	
	//Ensure the task is not currently owning a mutex
	for(int i=0; i<MAXMUTEX; i++) {
		if (Mutex[i].owner == p->pid) {
    125c:	c2 9e       	mul	r12, r18
    125e:	f0 01       	movw	r30, r0
    1260:	c3 9e       	mul	r12, r19
    1262:	f0 0d       	add	r31, r0
    1264:	11 24       	eor	r1, r1
    1266:	e9 5c       	subi	r30, 0xC9	; 201
    1268:	fd 4f       	sbci	r31, 0xFD	; 253
    126a:	42 81       	ldd	r20, Z+2	; 0x02
    126c:	53 81       	ldd	r21, Z+3	; 0x03
    126e:	46 17       	cp	r20, r22
    1270:	57 07       	cpc	r21, r23
    1272:	21 f4       	brne	.+8      	; 0x127c <OS_Start+0x2e4>
			#ifdef OS_DEBUG
			printf("Kernel_Suspend_Task: Trying to suspend a task that currently owns a mutex\n");
			#endif
			err = SUSPEND_NONRUNNING_TASK_ERR;
    1274:	86 e0       	ldi	r24, 0x06	; 6
    1276:	80 93 29 16 	sts	0x1629, r24
    127a:	0b c0       	rjmp	.+22     	; 0x1292 <OS_Start+0x2fa>
		err = SUSPEND_NONRUNNING_TASK_ERR;
		return;
	}
	
	//Ensure the task is not currently owning a mutex
	for(int i=0; i<MAXMUTEX; i++) {
    127c:	2f 5f       	subi	r18, 0xFF	; 255
    127e:	3f 4f       	sbci	r19, 0xFF	; 255
    1280:	28 30       	cpi	r18, 0x08	; 8
    1282:	31 05       	cpc	r19, r1
    1284:	59 f7       	brne	.-42     	; 0x125c <OS_Start+0x2c4>
			return;
		}
	}
	
	//Save its current state and set it to SUSPENDED
	p->last_state = p->state;
    1286:	fc 01       	movw	r30, r24
    1288:	a4 83       	std	Z+4, r26	; 0x04
	p->state = SUSPENDED;
    128a:	23 e0       	ldi	r18, 0x03	; 3
    128c:	23 83       	std	Z+3, r18	; 0x03
	err = NO_ERR;
    128e:	10 92 29 16 	sts	0x1629, r1
			Dispatch();					//Dispatch is only needed if the syscall requires running a different task  after it's done
			break;
		   
			case SUSPEND:
			Kernel_Suspend_Task();
			if(Cp->state != RUNNING) Dispatch();
    1292:	e0 91 2c 16 	lds	r30, 0x162C
    1296:	f0 91 2d 16 	lds	r31, 0x162D
    129a:	83 81       	ldd	r24, Z+3	; 0x03
    129c:	82 30       	cpi	r24, 0x02	; 2
    129e:	09 f4       	brne	.+2      	; 0x12a2 <OS_Start+0x30a>
    12a0:	b6 ce       	rjmp	.-660    	; 0x100e <OS_Start+0x76>
    12a2:	02 dc       	rcall	.-2044   	; 0xaa8 <Dispatch>
    12a4:	b4 ce       	rjmp	.-664    	; 0x100e <OS_Start+0x76>
}

static void Kernel_Resume_Task()
{
	//Finds the process descriptor for the specified PID
	PD* p = findProcessByPID(Cp->request_arg);
    12a6:	8e 81       	ldd	r24, Y+6	; 0x06
    12a8:	9f 81       	ldd	r25, Y+7	; 0x07
    12aa:	cc da       	rcall	.-2664   	; 0x844 <findProcessByPID>
	
	//Ensure the PID specified in the PD currently exists in the global process list
	if(p == NULL)
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	21 f4       	brne	.+8      	; 0x12b8 <OS_Start+0x320>
	{
		#ifdef OS_DEBUG
			printf("Kernel_Resume_Task: PID not found in global process list!\n");
		#endif
		err = PID_NOT_FOUND_ERR;
    12b0:	85 e0       	ldi	r24, 0x05	; 5
    12b2:	80 93 29 16 	sts	0x1629, r24
    12b6:	10 c0       	rjmp	.+32     	; 0x12d8 <OS_Start+0x340>
		return;
	}
	
	//Ensure the task is currently in the SUSPENDED state
	if(p->state != SUSPENDED)
    12b8:	dc 01       	movw	r26, r24
    12ba:	13 96       	adiw	r26, 0x03	; 3
    12bc:	2c 91       	ld	r18, X
    12be:	23 30       	cpi	r18, 0x03	; 3
    12c0:	21 f0       	breq	.+8      	; 0x12ca <OS_Start+0x332>
	{
		#ifdef OS_DEBUG
		printf("Kernel_Resume_Task: Trying to resume a task that's not SUSPENDED!\n");
		printf("CURRENT STATE: %d\n", p->state);
		#endif
		err = RESUME_NONSUSPENDED_TASK_ERR;
    12c2:	87 e0       	ldi	r24, 0x07	; 7
    12c4:	80 93 29 16 	sts	0x1629, r24
    12c8:	07 c0       	rjmp	.+14     	; 0x12d8 <OS_Start+0x340>
		return;
	}
	
	//Restore the previous state of the task
	p->state = p->last_state;
    12ca:	fc 01       	movw	r30, r24
    12cc:	24 81       	ldd	r18, Z+4	; 0x04
    12ce:	23 83       	std	Z+3, r18	; 0x03
	p->last_state = SUSPENDED;			
    12d0:	23 e0       	ldi	r18, 0x03	; 3
    12d2:	24 83       	std	Z+4, r18	; 0x04
	err = NO_ERR;
    12d4:	10 92 29 16 	sts	0x1629, r1
			if(Cp->state != RUNNING) Dispatch();
			break;
			
			case RESUME:
			Kernel_Resume_Task();
			Dispatch();
    12d8:	e7 db       	rcall	.-2098   	; 0xaa8 <Dispatch>
    12da:	99 ce       	rjmp	.-718    	; 0x100e <OS_Start+0x76>
			break;
			
			case SLEEP:
			Cp->state = SLEEPING;
    12dc:	84 e0       	ldi	r24, 0x04	; 4
    12de:	8b 83       	std	Y+3, r24	; 0x03
			Dispatch();					
    12e0:	e3 db       	rcall	.-2106   	; 0xaa8 <Dispatch>
    12e2:	95 ce       	rjmp	.-726    	; 0x100e <OS_Start+0x76>
			break;
			
			case CREATE_E:
			Kernel_Create_Event();
    12e4:	fa dc       	rcall	.-1548   	; 0xcda <Kernel_Create_Event>
    12e6:	93 ce       	rjmp	.-730    	; 0x100e <OS_Start+0x76>
	#endif
}

static void Kernel_Wait_Event(void)
{
	EVENT_TYPE* e = findEventByEventID(Cp->request_arg);
    12e8:	8e 81       	ldd	r24, Y+6	; 0x06
    12ea:	9f 81       	ldd	r25, Y+7	; 0x07
    12ec:	e1 da       	rcall	.-2622   	; 0x8b0 <findEventByEventID>
    12ee:	fc 01       	movw	r30, r24
	
	if(e == NULL)
    12f0:	89 2b       	or	r24, r25
    12f2:	99 f1       	breq	.+102    	; 0x135a <OS_Start+0x3c2>
		#endif
		return;
	}
	
	//Ensure no one else is waiting for this same event
	if(e->owner > 0 && e->owner != Cp->pid)
    12f4:	82 81       	ldd	r24, Z+2	; 0x02
    12f6:	93 81       	ldd	r25, Z+3	; 0x03
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	69 f0       	breq	.+26     	; 0x1316 <OS_Start+0x37e>
    12fc:	a0 91 2c 16 	lds	r26, 0x162C
    1300:	b0 91 2d 16 	lds	r27, 0x162D
    1304:	2d 91       	ld	r18, X+
    1306:	3c 91       	ld	r19, X
    1308:	82 17       	cp	r24, r18
    130a:	93 07       	cpc	r25, r19
    130c:	21 f0       	breq	.+8      	; 0x1316 <OS_Start+0x37e>
	{
		#ifdef OS_DEBUG
			printf("Kernel_Wait_Event: The requested event is already being waited by PID %d\n", e->owner);
		#endif
		err = EVENT_NOT_FOUND_ERR;
    130e:	89 e0       	ldi	r24, 0x09	; 9
    1310:	80 93 29 16 	sts	0x1629, r24
    1314:	22 c0       	rjmp	.+68     	; 0x135a <OS_Start+0x3c2>
		return;
	}
	
	//Has this event been signaled already? If yes, "consume" event and keep executing the same task
	if(e->count > 0)
    1316:	84 81       	ldd	r24, Z+4	; 0x04
    1318:	95 81       	ldd	r25, Z+5	; 0x05
    131a:	89 2b       	or	r24, r25
    131c:	81 f0       	breq	.+32     	; 0x133e <OS_Start+0x3a6>
	{
		e->owner = 0;
    131e:	13 82       	std	Z+3, r1	; 0x03
    1320:	12 82       	std	Z+2, r1	; 0x02
		e->count = 0;
    1322:	15 82       	std	Z+5, r1	; 0x05
    1324:	14 82       	std	Z+4, r1	; 0x04
		e->id = 0;
    1326:	11 82       	std	Z+1, r1	; 0x01
    1328:	10 82       	st	Z, r1
		--Event_Count;	
    132a:	80 91 31 02 	lds	r24, 0x0231
    132e:	90 91 32 02 	lds	r25, 0x0232
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	90 93 32 02 	sts	0x0232, r25
    1338:	80 93 31 02 	sts	0x0231, r24
    133c:	0e c0       	rjmp	.+28     	; 0x135a <OS_Start+0x3c2>
		return;
	}
	
	//Set the owner of the requested event to the current task and put it into the WAIT EVENT state
	e->owner = Cp->pid;
    133e:	a0 91 2c 16 	lds	r26, 0x162C
    1342:	b0 91 2d 16 	lds	r27, 0x162D
    1346:	8d 91       	ld	r24, X+
    1348:	9c 91       	ld	r25, X
    134a:	11 97       	sbiw	r26, 0x01	; 1
    134c:	93 83       	std	Z+3, r25	; 0x03
    134e:	82 83       	std	Z+2, r24	; 0x02
	Cp->state = WAIT_EVENT;
    1350:	85 e0       	ldi	r24, 0x05	; 5
    1352:	13 96       	adiw	r26, 0x03	; 3
    1354:	8c 93       	st	X, r24
	err = NO_ERR;
    1356:	10 92 29 16 	sts	0x1629, r1
			Kernel_Create_Event();
			break;
			
			case WAIT_E:
			Kernel_Wait_Event();	
			if(Cp->state != RUNNING) Dispatch();	//Don't dispatch to a different task if the event is already siganlled
    135a:	e0 91 2c 16 	lds	r30, 0x162C
    135e:	f0 91 2d 16 	lds	r31, 0x162D
    1362:	83 81       	ldd	r24, Z+3	; 0x03
    1364:	82 30       	cpi	r24, 0x02	; 2
    1366:	09 f4       	brne	.+2      	; 0x136a <OS_Start+0x3d2>
    1368:	52 ce       	rjmp	.-860    	; 0x100e <OS_Start+0x76>
    136a:	9e db       	rcall	.-2244   	; 0xaa8 <Dispatch>
    136c:	50 ce       	rjmp	.-864    	; 0x100e <OS_Start+0x76>
	err = NO_ERR;
}

static void Kernel_Signal_Event(void)
{
	EVENT_TYPE* e = findEventByEventID(Cp->request_arg);
    136e:	8e 81       	ldd	r24, Y+6	; 0x06
    1370:	9f 81       	ldd	r25, Y+7	; 0x07
    1372:	9e da       	rcall	.-2756   	; 0x8b0 <findEventByEventID>
    1374:	ec 01       	movw	r28, r24
	PD *e_owner;
	
	if(e == NULL)
    1376:	89 2b       	or	r24, r25
    1378:	61 f1       	breq	.+88     	; 0x13d2 <OS_Start+0x43a>
		#endif
		return;
	}
	
	//Increment the event counter if needed 
	if(MAX_EVENT_SIG_MISS == 0 || e->count < MAX_EVENT_SIG_MISS)
    137a:	8c 81       	ldd	r24, Y+4	; 0x04
    137c:	9d 81       	ldd	r25, Y+5	; 0x05
    137e:	89 2b       	or	r24, r25
    1380:	11 f4       	brne	.+4      	; 0x1386 <OS_Start+0x3ee>
		e->count++;
    1382:	7c 82       	std	Y+4, r7	; 0x04
    1384:	6d 82       	std	Y+5, r6	; 0x05
	
	//If the event is unowned, return
	if(e->owner == 0)
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	9b 81       	ldd	r25, Y+3	; 0x03
    138a:	00 97       	sbiw	r24, 0x00	; 0
    138c:	19 f4       	brne	.+6      	; 0x1394 <OS_Start+0x3fc>
	{
		#ifdef OS_DEBUG
		printf("Kernel_Signal_Event: *WARNING* The requested event is not being waited by anyone!\n");
		#endif
		err = SIGNAL_UNOWNED_EVENT_ERR;
    138e:	80 92 29 16 	sts	0x1629, r8
    1392:	1f c0       	rjmp	.+62     	; 0x13d2 <OS_Start+0x43a>
		return;
	}
	
	//Fetch the owner's PD and ensure it's still valid
	e_owner = findProcessByPID(e->owner);
    1394:	57 da       	rcall	.-2898   	; 0x844 <findProcessByPID>
	if(e_owner == NULL)
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	21 f4       	brne	.+8      	; 0x13a2 <OS_Start+0x40a>
	{
		#ifdef OS_DEBUG
		printf("Kernel_Signal_Event: Event owner's PID not found in global process list!\n");
		#endif
		err = PID_NOT_FOUND_ERR;
    139a:	85 e0       	ldi	r24, 0x05	; 5
    139c:	80 93 29 16 	sts	0x1629, r24
    13a0:	18 c0       	rjmp	.+48     	; 0x13d2 <OS_Start+0x43a>
		return;
	}
	
	//Wake up the owner of the event by setting its state to READY if it's active. The event is "consumed"
	if(e_owner->state == WAIT_EVENT)
    13a2:	dc 01       	movw	r26, r24
    13a4:	13 96       	adiw	r26, 0x03	; 3
    13a6:	2c 91       	ld	r18, X
    13a8:	13 97       	sbiw	r26, 0x03	; 3
    13aa:	25 30       	cpi	r18, 0x05	; 5
    13ac:	91 f4       	brne	.+36     	; 0x13d2 <OS_Start+0x43a>
	{
		e->owner = 0;
    13ae:	1b 82       	std	Y+3, r1	; 0x03
    13b0:	1a 82       	std	Y+2, r1	; 0x02
		e->count = 0;
    13b2:	1d 82       	std	Y+5, r1	; 0x05
    13b4:	1c 82       	std	Y+4, r1	; 0x04
		e->id = 0;
    13b6:	19 82       	std	Y+1, r1	; 0x01
    13b8:	18 82       	st	Y, r1
		--Event_Count;
    13ba:	20 91 31 02 	lds	r18, 0x0231
    13be:	30 91 32 02 	lds	r19, 0x0232
    13c2:	21 50       	subi	r18, 0x01	; 1
    13c4:	31 09       	sbc	r19, r1
    13c6:	30 93 32 02 	sts	0x0232, r19
    13ca:	20 93 31 02 	sts	0x0231, r18
		e_owner->state = READY;
    13ce:	13 96       	adiw	r26, 0x03	; 3
    13d0:	9c 92       	st	X, r9
			if(Cp->state != RUNNING) Dispatch();	//Don't dispatch to a different task if the event is already siganlled
			break;
			
			case SIGNAL_E:
			Kernel_Signal_Event();
			Dispatch();
    13d2:	6a db       	rcall	.-2348   	; 0xaa8 <Dispatch>
    13d4:	1c ce       	rjmp	.-968    	; 0x100e <OS_Start+0x76>
			break;
			
			case CREATE_M:
			Kernel_Create_Mutex();
    13d6:	ce dc       	rcall	.-1636   	; 0xd74 <Kernel_Create_Mutex>
    13d8:	1a ce       	rjmp	.-972    	; 0x100e <OS_Start+0x76>

static void Dispatch();

static void Kernel_Lock_Mutex(void)
{
	MUTEX_TYPE* m = findMutexByMutexID(Cp->request_arg);
    13da:	8e 81       	ldd	r24, Y+6	; 0x06
    13dc:	9f 81       	ldd	r25, Y+7	; 0x07
    13de:	a0 da       	rcall	.-2752   	; 0x920 <findMutexByMutexID>
    13e0:	ec 01       	movw	r28, r24
	PD *m_owner = findProcessByPID(m->owner);
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	9b 81       	ldd	r25, Y+3	; 0x03
    13e6:	2e da       	rcall	.-2980   	; 0x844 <findProcessByPID>
	
	if(m == NULL)
    13e8:	20 97       	sbiw	r28, 0x00	; 0
    13ea:	09 f4       	brne	.+2      	; 0x13ee <OS_Start+0x456>
    13ec:	10 ce       	rjmp	.-992    	; 0x100e <OS_Start+0x76>
		#endif
		return;
	}
	
	// if mutex is free
	if(m->owner == 0)
    13ee:	2a 81       	ldd	r18, Y+2	; 0x02
    13f0:	3b 81       	ldd	r19, Y+3	; 0x03
    13f2:	21 15       	cp	r18, r1
    13f4:	31 05       	cpc	r19, r1
    13f6:	79 f4       	brne	.+30     	; 0x1416 <OS_Start+0x47e>
	{
		m->owner = Cp->pid;
    13f8:	e0 91 2c 16 	lds	r30, 0x162C
    13fc:	f0 91 2d 16 	lds	r31, 0x162D
    1400:	80 81       	ld	r24, Z
    1402:	91 81       	ldd	r25, Z+1	; 0x01
    1404:	9b 83       	std	Y+3, r25	; 0x03
    1406:	8a 83       	std	Y+2, r24	; 0x02
		m->count = 1;
    1408:	7c 82       	std	Y+4, r7	; 0x04
    140a:	6d 82       	std	Y+5, r6	; 0x05
		m->own_pri = Cp->pri;				// keep track of the original priority of the owner
    140c:	82 81       	ldd	r24, Z+2	; 0x02
    140e:	c6 5a       	subi	r28, 0xA6	; 166
    1410:	df 4f       	sbci	r29, 0xFF	; 255
    1412:	88 83       	st	Y, r24
    1414:	fc cd       	rjmp	.-1032   	; 0x100e <OS_Start+0x76>
		return;
	} else if (m->owner == Cp->pid) {
    1416:	a0 91 2c 16 	lds	r26, 0x162C
    141a:	b0 91 2d 16 	lds	r27, 0x162D
    141e:	4d 91       	ld	r20, X+
    1420:	5c 91       	ld	r21, X
    1422:	11 97       	sbiw	r26, 0x01	; 1
    1424:	24 17       	cp	r18, r20
    1426:	35 07       	cpc	r19, r21
    1428:	31 f4       	brne	.+12     	; 0x1436 <OS_Start+0x49e>
		// if it has locked by the current process
		++(m->count);
    142a:	8c 81       	ldd	r24, Y+4	; 0x04
    142c:	9d 81       	ldd	r25, Y+5	; 0x05
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	9d 83       	std	Y+5, r25	; 0x05
    1432:	8c 83       	std	Y+4, r24	; 0x04
    1434:	ec cd       	rjmp	.-1064   	; 0x100e <OS_Start+0x76>
		return;
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
    1436:	26 e0       	ldi	r18, 0x06	; 6
    1438:	13 96       	adiw	r26, 0x03	; 3
    143a:	2c 93       	st	X, r18
    143c:	13 97       	sbiw	r26, 0x03	; 3
		//enqueue cp to stack
		++(m->num_of_process);
    143e:	fe 01       	movw	r30, r28
    1440:	ea 5a       	subi	r30, 0xAA	; 170
    1442:	ff 4f       	sbci	r31, 0xFF	; 255
    1444:	20 81       	ld	r18, Z
    1446:	31 81       	ldd	r19, Z+1	; 0x01
    1448:	2f 5f       	subi	r18, 0xFF	; 255
    144a:	3f 4f       	sbci	r19, 0xFF	; 255
    144c:	31 83       	std	Z+1, r19	; 0x01
    144e:	20 83       	st	Z, r18
		++(m->total_num);
    1450:	32 96       	adiw	r30, 0x02	; 2
    1452:	60 81       	ld	r22, Z
    1454:	71 81       	ldd	r23, Z+1	; 0x01
    1456:	6f 5f       	subi	r22, 0xFF	; 255
    1458:	7f 4f       	sbci	r23, 0xFF	; 255
    145a:	71 83       	std	Z+1, r23	; 0x01
    145c:	60 83       	st	Z, r22
		for (int i=0; i<MAXTHREAD; i++) {
			if (m->blocked_stack[i] == -1){
    145e:	2e 81       	ldd	r18, Y+6	; 0x06
    1460:	3f 81       	ldd	r19, Y+7	; 0x07
    1462:	2f 3f       	cpi	r18, 0xFF	; 255
    1464:	3f 4f       	sbci	r19, 0xFF	; 255
    1466:	51 f0       	breq	.+20     	; 0x147c <OS_Start+0x4e4>
    1468:	fe 01       	movw	r30, r28
    146a:	38 96       	adiw	r30, 0x08	; 8
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
		//enqueue cp to stack
		++(m->num_of_process);
		++(m->total_num);
		for (int i=0; i<MAXTHREAD; i++) {
    146c:	27 2d       	mov	r18, r7
    146e:	36 2d       	mov	r19, r6
			if (m->blocked_stack[i] == -1){
    1470:	41 91       	ld	r20, Z+
    1472:	51 91       	ld	r21, Z+
    1474:	4f 3f       	cpi	r20, 0xFF	; 255
    1476:	5f 4f       	sbci	r21, 0xFF	; 255
    1478:	b9 f4       	brne	.+46     	; 0x14a8 <OS_Start+0x510>
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <OS_Start+0x4e8>
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
		//enqueue cp to stack
		++(m->num_of_process);
		++(m->total_num);
		for (int i=0; i<MAXTHREAD; i++) {
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
			if (m->blocked_stack[i] == -1){
				m->blocked_stack[i] = Cp->pid;
    1480:	4d 91       	ld	r20, X+
    1482:	5c 91       	ld	r21, X
    1484:	11 97       	sbiw	r26, 0x01	; 1
    1486:	f9 01       	movw	r30, r18
    1488:	ee 0f       	add	r30, r30
    148a:	ff 1f       	adc	r31, r31
    148c:	ec 0f       	add	r30, r28
    148e:	fd 1f       	adc	r31, r29
    1490:	57 83       	std	Z+7, r21	; 0x07
    1492:	46 83       	std	Z+6, r20	; 0x06
				m->order[i] = m->total_num;
    1494:	77 ab       	std	Z+55, r23	; 0x37
    1496:	66 ab       	std	Z+54, r22	; 0x36
				m->priority_stack[i] = Cp->pri;
    1498:	12 96       	adiw	r26, 0x02	; 2
    149a:	4c 91       	ld	r20, X
    149c:	12 97       	sbiw	r26, 0x02	; 2
    149e:	fe 01       	movw	r30, r28
    14a0:	e2 0f       	add	r30, r18
    14a2:	f3 1f       	adc	r31, r19
    14a4:	46 a3       	std	Z+38, r20	; 0x26
    14a6:	05 c0       	rjmp	.+10     	; 0x14b2 <OS_Start+0x51a>
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
		//enqueue cp to stack
		++(m->num_of_process);
		++(m->total_num);
		for (int i=0; i<MAXTHREAD; i++) {
    14a8:	2f 5f       	subi	r18, 0xFF	; 255
    14aa:	3f 4f       	sbci	r19, 0xFF	; 255
    14ac:	20 31       	cpi	r18, 0x10	; 16
    14ae:	31 05       	cpc	r19, r1
    14b0:	f9 f6       	brne	.-66     	; 0x1470 <OS_Start+0x4d8>
			}
		}
		// end of enqueue
		
		//if cp's priority is higher than the owner
		if (Cp->pri < m_owner->pri) {
    14b2:	12 96       	adiw	r26, 0x02	; 2
    14b4:	3c 91       	ld	r19, X
    14b6:	12 97       	sbiw	r26, 0x02	; 2
    14b8:	fc 01       	movw	r30, r24
    14ba:	22 81       	ldd	r18, Z+2	; 0x02
    14bc:	32 17       	cp	r19, r18
    14be:	18 f4       	brcc	.+6      	; 0x14c6 <OS_Start+0x52e>
			m_owner->pri = Cp->pri;				// the owner gets cp's priority
    14c0:	12 96       	adiw	r26, 0x02	; 2
    14c2:	2c 91       	ld	r18, X
    14c4:	22 83       	std	Z+2, r18	; 0x02
		}
		Dispatch();
    14c6:	f0 da       	rcall	.-2592   	; 0xaa8 <Dispatch>
    14c8:	a2 cd       	rjmp	.-1212   	; 0x100e <OS_Start+0x76>
	}
}

static void Kernel_Unlock_Mutex(void)
{
	MUTEX_TYPE* m = findMutexByMutexID(Cp->request_arg);
    14ca:	8e 81       	ldd	r24, Y+6	; 0x06
    14cc:	9f 81       	ldd	r25, Y+7	; 0x07
    14ce:	28 da       	rcall	.-2992   	; 0x920 <findMutexByMutexID>
    14d0:	ec 01       	movw	r28, r24
	PD *m_owner = findProcessByPID(m->owner);
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	9b 81       	ldd	r25, Y+3	; 0x03
    14d6:	b6 d9       	rcall	.-3220   	; 0x844 <findProcessByPID>
    14d8:	8c 01       	movw	r16, r24
	
	if(m == NULL)
    14da:	20 97       	sbiw	r28, 0x00	; 0
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <OS_Start+0x548>
    14de:	97 cd       	rjmp	.-1234   	; 0x100e <OS_Start+0x76>
		printf("Kernel_Unlock_Mutex: Error finding requested mutex!\n");
		#endif
		return;
	}
	
	if(m->owner != Cp->pid){
    14e0:	e0 91 2c 16 	lds	r30, 0x162C
    14e4:	f0 91 2d 16 	lds	r31, 0x162D
    14e8:	80 81       	ld	r24, Z
    14ea:	91 81       	ldd	r25, Z+1	; 0x01
    14ec:	2a 81       	ldd	r18, Y+2	; 0x02
    14ee:	3b 81       	ldd	r19, Y+3	; 0x03
    14f0:	28 17       	cp	r18, r24
    14f2:	39 07       	cpc	r19, r25
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <OS_Start+0x560>
    14f6:	8b cd       	rjmp	.-1258   	; 0x100e <OS_Start+0x76>
		#ifdef OS_DEBUG
		printf("Kernel_Unlock_Mutex: The owner is not the current process\n");
		#endif
		return;
	} else if (m->count > 1) {
    14f8:	8c 81       	ldd	r24, Y+4	; 0x04
    14fa:	9d 81       	ldd	r25, Y+5	; 0x05
    14fc:	82 30       	cpi	r24, 0x02	; 2
    14fe:	91 05       	cpc	r25, r1
    1500:	20 f0       	brcs	.+8      	; 0x150a <OS_Start+0x572>
		// M is locked more than once
		--(m->count);
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	9d 83       	std	Y+5, r25	; 0x05
    1506:	8c 83       	std	Y+4, r24	; 0x04
    1508:	82 cd       	rjmp	.-1276   	; 0x100e <OS_Start+0x76>
	} else if (m->num_of_process > 0) {
    150a:	fe 01       	movw	r30, r28
    150c:	ea 5a       	subi	r30, 0xAA	; 170
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	a0 80       	ld	r10, Z
    1512:	b1 80       	ldd	r11, Z+1	; 0x01
    1514:	a1 14       	cp	r10, r1
    1516:	b1 04       	cpc	r11, r1
    1518:	09 f4       	brne	.+2      	; 0x151c <OS_Start+0x584>
    151a:	55 c0       	rjmp	.+170    	; 0x15c6 <OS_Start+0x62e>
		// there are tasks waiting on the mutex
		// deque the task with highest priority
		PID p_dequeue = 0;
		unsigned int temp_order = m->total_num + 1;
    151c:	32 96       	adiw	r30, 0x02	; 2
    151e:	60 81       	ld	r22, Z
    1520:	71 81       	ldd	r23, Z+1	; 0x01
    1522:	6f 5f       	subi	r22, 0xFF	; 255
    1524:	7f 4f       	sbci	r23, 0xFF	; 255
    1526:	ce 01       	movw	r24, r28
    1528:	86 96       	adiw	r24, 0x26	; 38
    152a:	b2 97       	sbiw	r30, 0x22	; 34
    152c:	de 01       	movw	r26, r28
    152e:	16 96       	adiw	r26, 0x06	; 6
    1530:	ae 01       	movw	r20, r28
    1532:	4a 5a       	subi	r20, 0xAA	; 170
    1534:	5f 4f       	sbci	r21, 0xFF	; 255
		// M is locked more than once
		--(m->count);
	} else if (m->num_of_process > 0) {
		// there are tasks waiting on the mutex
		// deque the task with highest priority
		PID p_dequeue = 0;
    1536:	e1 2c       	mov	r14, r1
    1538:	d1 2c       	mov	r13, r1
		unsigned int temp_order = m->total_num + 1;
		PRIORITY temp_pri = LOWEST_PRIORITY + 1;
    153a:	f8 2c       	mov	r15, r8
    153c:	9e 01       	movw	r18, r28
    153e:	ec 01       	movw	r28, r24
		int i;
		for (i=0; i<MAXTHREAD; i++) {
			if (m->priority_stack[i] < temp_pri) {
    1540:	29 90       	ld	r2, Y+
    1542:	2f 14       	cp	r2, r15
    1544:	40 f4       	brcc	.+16     	; 0x1556 <OS_Start+0x5be>
				// found a task with higher priority
				temp_pri = m->priority_stack[i];
				temp_order = m->order[i];
    1546:	60 81       	ld	r22, Z
    1548:	71 81       	ldd	r23, Z+1	; 0x01
				p_dequeue = m->blocked_stack[i];
    154a:	ec 90       	ld	r14, X
    154c:	11 96       	adiw	r26, 0x01	; 1
    154e:	dc 90       	ld	r13, X
    1550:	11 97       	sbiw	r26, 0x01	; 1
		PRIORITY temp_pri = LOWEST_PRIORITY + 1;
		int i;
		for (i=0; i<MAXTHREAD; i++) {
			if (m->priority_stack[i] < temp_pri) {
				// found a task with higher priority
				temp_pri = m->priority_stack[i];
    1552:	f2 2c       	mov	r15, r2
    1554:	0f c0       	rjmp	.+30     	; 0x1574 <OS_Start+0x5dc>
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			} else if (m->priority_stack[i] == temp_pri && temp_order < m->order[i]) {
    1556:	2f 10       	cpse	r2, r15
    1558:	0d c0       	rjmp	.+26     	; 0x1574 <OS_Start+0x5dc>
    155a:	80 81       	ld	r24, Z
    155c:	91 81       	ldd	r25, Z+1	; 0x01
    155e:	68 17       	cp	r22, r24
    1560:	79 07       	cpc	r23, r25
    1562:	38 f4       	brcc	.+14     	; 0x1572 <OS_Start+0x5da>
				// same priority and came into the queue earlier
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
    1564:	ec 90       	ld	r14, X
    1566:	11 96       	adiw	r26, 0x01	; 1
    1568:	dc 90       	ld	r13, X
    156a:	11 97       	sbiw	r26, 0x01	; 1
    156c:	f2 2c       	mov	r15, r2
				temp_pri = m->priority_stack[i];
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			} else if (m->priority_stack[i] == temp_pri && temp_order < m->order[i]) {
				// same priority and came into the queue earlier
				temp_order = m->order[i];
    156e:	bc 01       	movw	r22, r24
    1570:	01 c0       	rjmp	.+2      	; 0x1574 <OS_Start+0x5dc>
			if (m->priority_stack[i] < temp_pri) {
				// found a task with higher priority
				temp_pri = m->priority_stack[i];
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			} else if (m->priority_stack[i] == temp_pri && temp_order < m->order[i]) {
    1572:	f2 2c       	mov	r15, r2
    1574:	32 96       	adiw	r30, 0x02	; 2
    1576:	12 96       	adiw	r26, 0x02	; 2
		// deque the task with highest priority
		PID p_dequeue = 0;
		unsigned int temp_order = m->total_num + 1;
		PRIORITY temp_pri = LOWEST_PRIORITY + 1;
		int i;
		for (i=0; i<MAXTHREAD; i++) {
    1578:	e4 17       	cp	r30, r20
    157a:	f5 07       	cpc	r31, r21
    157c:	09 f7       	brne	.-62     	; 0x1540 <OS_Start+0x5a8>
    157e:	e9 01       	movw	r28, r18
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			}
		}
		//dequeue index i
		m->blocked_stack[i] = -1;
    1580:	2f ef       	ldi	r18, 0xFF	; 255
    1582:	3f ef       	ldi	r19, 0xFF	; 255
    1584:	3f a3       	std	Y+39, r19	; 0x27
    1586:	2e a3       	std	Y+38, r18	; 0x26
		m->priority_stack[i] = LOWEST_PRIORITY+1;
    1588:	8e aa       	std	Y+54, r8	; 0x36
		m->order[i] = 0;
		--(m->num_of_process);
    158a:	fe 01       	movw	r30, r28
    158c:	ea 5a       	subi	r30, 0xAA	; 170
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	31 e0       	ldi	r19, 0x01	; 1
    1592:	a3 1a       	sub	r10, r19
    1594:	b1 08       	sbc	r11, r1
    1596:	b1 82       	std	Z+1, r11	; 0x01
    1598:	a0 82       	st	Z, r10
		PD* target_p = findProcessByPID(p_dequeue);
    159a:	8e 2d       	mov	r24, r14
    159c:	9d 2d       	mov	r25, r13
    159e:	52 d9       	rcall	.-3420   	; 0x844 <findProcessByPID>
		m_owner->pri = m->own_pri;		//reset owner's priority
    15a0:	fe 01       	movw	r30, r28
    15a2:	e6 5a       	subi	r30, 0xA6	; 166
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	20 81       	ld	r18, Z
    15a8:	d8 01       	movw	r26, r16
    15aa:	12 96       	adiw	r26, 0x02	; 2
    15ac:	2c 93       	st	X, r18
		m->owner = p_dequeue;
    15ae:	ea 82       	std	Y+2, r14	; 0x02
    15b0:	db 82       	std	Y+3, r13	; 0x03
		m->own_pri = temp_pri;			//keep track of new owner's priority;
    15b2:	f0 82       	st	Z, r15
		target_p->state = READY;
    15b4:	fc 01       	movw	r30, r24
    15b6:	93 82       	std	Z+3, r9	; 0x03
		Cp->state = READY;
    15b8:	e0 91 2c 16 	lds	r30, 0x162C
    15bc:	f0 91 2d 16 	lds	r31, 0x162D
    15c0:	93 82       	std	Z+3, r9	; 0x03
		Dispatch();
    15c2:	72 da       	rcall	.-2844   	; 0xaa8 <Dispatch>
    15c4:	24 cd       	rjmp	.-1464   	; 0x100e <OS_Start+0x76>
		return;
	} else {
		m->owner = 0;
    15c6:	1b 82       	std	Y+3, r1	; 0x03
    15c8:	1a 82       	std	Y+2, r1	; 0x02
		m->count = 0;
    15ca:	1d 82       	std	Y+5, r1	; 0x05
    15cc:	1c 82       	std	Y+4, r1	; 0x04
		m_owner->pri = m->own_pri;		//reset owner's priority
    15ce:	c6 5a       	subi	r28, 0xA6	; 166
    15d0:	df 4f       	sbci	r29, 0xFF	; 255
    15d2:	88 81       	ld	r24, Y
    15d4:	d8 01       	movw	r26, r16
    15d6:	12 96       	adiw	r26, 0x02	; 2
    15d8:	8c 93       	st	X, r24
    15da:	19 cd       	rjmp	.-1486   	; 0x100e <OS_Start+0x76>
			//Does this need dispatch under any circumstances?
			break;
		   
			case YIELD:
			case NONE:					// NONE could be caused by a timer interrupt
			Cp->state = READY;
    15dc:	9b 82       	std	Y+3, r9	; 0x03
			Dispatch();
    15de:	64 da       	rcall	.-2872   	; 0xaa8 <Dispatch>
    15e0:	16 cd       	rjmp	.-1492   	; 0x100e <OS_Start+0x76>
			break;
       
			//Invalid request code, just ignore
			default:
				err = INVALID_KERNET_REQUEST_ERR;
    15e2:	50 92 29 16 	sts	0x1629, r5
    15e6:	13 cd       	rjmp	.-1498   	; 0x100e <OS_Start+0x76>
		#endif
		
		Next_Kernel_Request();
		/* NEVER RETURNS!!! */
	}
}
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	1f 91       	pop	r17
    15ee:	0f 91       	pop	r16
    15f0:	ff 90       	pop	r15
    15f2:	ef 90       	pop	r14
    15f4:	df 90       	pop	r13
    15f6:	cf 90       	pop	r12
    15f8:	bf 90       	pop	r11
    15fa:	af 90       	pop	r10
    15fc:	9f 90       	pop	r9
    15fe:	8f 90       	pop	r8
    1600:	7f 90       	pop	r7
    1602:	6f 90       	pop	r6
    1604:	5f 90       	pop	r5
    1606:	4f 90       	pop	r4
    1608:	3f 90       	pop	r3
    160a:	2f 90       	pop	r2
    160c:	08 95       	ret

0000160e <Task_Create>:
	}
	Disable_Interrupt();
	
	Cp->request = UNLOCK_M;
	Cp->request_arg = m;
	Enter_Kernel();
    160e:	20 91 25 16 	lds	r18, 0x1625
    1612:	30 91 26 16 	lds	r19, 0x1626
    1616:	23 2b       	or	r18, r19
    1618:	89 f0       	breq	.+34     	; 0x163c <Task_Create+0x2e>
    161a:	f8 94       	cli
    161c:	e0 91 2c 16 	lds	r30, 0x162C
    1620:	f0 91 2d 16 	lds	r31, 0x162D
    1624:	62 83       	std	Z+2, r22	; 0x02
    1626:	51 87       	std	Z+9, r21	; 0x09
    1628:	40 87       	std	Z+8, r20	; 0x08
    162a:	21 e0       	ldi	r18, 0x01	; 1
    162c:	25 83       	std	Z+5, r18	; 0x05
    162e:	e4 5f       	subi	r30, 0xF4	; 244
    1630:	fe 4f       	sbci	r31, 0xFE	; 254
    1632:	91 83       	std	Z+1, r25	; 0x01
    1634:	80 83       	st	Z, r24
    1636:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    163a:	01 c0       	rjmp	.+2      	; 0x163e <Task_Create+0x30>
    163c:	cb da       	rcall	.-2666   	; 0xbd4 <Kernel_Create_Task>
    163e:	80 91 29 16 	lds	r24, 0x1629
    1642:	84 30       	cpi	r24, 0x04	; 4
    1644:	29 f0       	breq	.+10     	; 0x1650 <Task_Create+0x42>
    1646:	80 91 23 16 	lds	r24, 0x1623
    164a:	90 91 24 16 	lds	r25, 0x1624
    164e:	08 95       	ret
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	08 95       	ret

00001656 <Task_Terminate>:
    1656:	80 91 25 16 	lds	r24, 0x1625
    165a:	90 91 26 16 	lds	r25, 0x1626
    165e:	89 2b       	or	r24, r25
    1660:	21 f4       	brne	.+8      	; 0x166a <Task_Terminate+0x14>
    1662:	83 e0       	ldi	r24, 0x03	; 3
    1664:	80 93 29 16 	sts	0x1629, r24
    1668:	08 95       	ret
    166a:	f8 94       	cli
    166c:	e0 91 2c 16 	lds	r30, 0x162C
    1670:	f0 91 2d 16 	lds	r31, 0x162D
    1674:	83 e0       	ldi	r24, 0x03	; 3
    1676:	85 83       	std	Z+5, r24	; 0x05
    1678:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    167c:	08 95       	ret

0000167e <Task_Sleep>:
    167e:	20 91 25 16 	lds	r18, 0x1625
    1682:	30 91 26 16 	lds	r19, 0x1626
    1686:	23 2b       	or	r18, r19
    1688:	21 f4       	brne	.+8      	; 0x1692 <Task_Sleep+0x14>
    168a:	83 e0       	ldi	r24, 0x03	; 3
    168c:	80 93 29 16 	sts	0x1629, r24
    1690:	08 95       	ret
    1692:	f8 94       	cli
    1694:	e0 91 2c 16 	lds	r30, 0x162C
    1698:	f0 91 2d 16 	lds	r31, 0x162D
    169c:	26 e0       	ldi	r18, 0x06	; 6
    169e:	25 83       	std	Z+5, r18	; 0x05
    16a0:	97 83       	std	Z+7, r25	; 0x07
    16a2:	86 83       	std	Z+6, r24	; 0x06
    16a4:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    16a8:	08 95       	ret

000016aa <main>:
	uart_init();
	uart_setredir();
	printf("STDOUT->UART!\n");
   #endif  
   
   a_main();
    16aa:	b2 c8       	rjmp	.-3740   	; 0x810 <a_main>
    16ac:	08 95       	ret

000016ae <uart0_init>:
		bytes_read++;
	}
	while(cur != end_char && bytes_read < max_chars);

	return bytes_read;
}
    16ae:	10 92 c5 00 	sts	0x00C5, r1
    16b2:	83 e3       	ldi	r24, 0x33	; 51
    16b4:	80 93 c4 00 	sts	0x00C4, r24
    16b8:	e0 ec       	ldi	r30, 0xC0	; 192
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	8d 7f       	andi	r24, 0xFD	; 253
    16c0:	80 83       	st	Z, r24
    16c2:	86 e0       	ldi	r24, 0x06	; 6
    16c4:	80 93 c2 00 	sts	0x00C2, r24
    16c8:	88 e1       	ldi	r24, 0x18	; 24
    16ca:	80 93 c1 00 	sts	0x00C1, r24
    16ce:	08 95       	ret

000016d0 <uart1_init>:
    16d0:	10 92 cd 00 	sts	0x00CD, r1
    16d4:	83 e3       	ldi	r24, 0x33	; 51
    16d6:	80 93 cc 00 	sts	0x00CC, r24
    16da:	e8 ec       	ldi	r30, 0xC8	; 200
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8d 7f       	andi	r24, 0xFD	; 253
    16e2:	80 83       	st	Z, r24
    16e4:	86 e0       	ldi	r24, 0x06	; 6
    16e6:	80 93 ca 00 	sts	0x00CA, r24
    16ea:	88 e1       	ldi	r24, 0x18	; 24
    16ec:	80 93 c9 00 	sts	0x00C9, r24
    16f0:	08 95       	ret

000016f2 <uart0_recvbyte>:
    16f2:	e0 ec       	ldi	r30, 0xC0	; 192
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	88 23       	and	r24, r24
    16fa:	ec f7       	brge	.-6      	; 0x16f6 <uart0_recvbyte+0x4>
    16fc:	80 91 c6 00 	lds	r24, 0x00C6
    1700:	08 95       	ret

00001702 <uart1_sendbyte>:

void uart1_sendbyte(uint8_t data)
{
	while(!(UCSR1A & (1<<UDRE1)));
    1702:	e8 ec       	ldi	r30, 0xC8	; 200
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	90 81       	ld	r25, Z
    1708:	95 ff       	sbrs	r25, 5
    170a:	fd cf       	rjmp	.-6      	; 0x1706 <uart1_sendbyte+0x4>
	UDR1 = data;
    170c:	80 93 ce 00 	sts	0x00CE, r24
    1710:	08 95       	ret

00001712 <uart1_recvbyte>:
}

uint8_t uart1_recvbyte(void)
{
	while(!(UCSR1A & (1<<RXC1)));
    1712:	e8 ec       	ldi	r30, 0xC8	; 200
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	88 23       	and	r24, r24
    171a:	ec f7       	brge	.-6      	; 0x1716 <uart1_recvbyte+0x4>
	return UDR1;
    171c:	80 91 ce 00 	lds	r24, 0x00CE
}
    1720:	08 95       	ret

00001722 <__fixunssfsi>:
    1722:	70 d0       	rcall	.+224    	; 0x1804 <__fp_splitA>
    1724:	88 f0       	brcs	.+34     	; 0x1748 <__fixunssfsi+0x26>
    1726:	9f 57       	subi	r25, 0x7F	; 127
    1728:	90 f0       	brcs	.+36     	; 0x174e <__fixunssfsi+0x2c>
    172a:	b9 2f       	mov	r27, r25
    172c:	99 27       	eor	r25, r25
    172e:	b7 51       	subi	r27, 0x17	; 23
    1730:	a0 f0       	brcs	.+40     	; 0x175a <__fixunssfsi+0x38>
    1732:	d1 f0       	breq	.+52     	; 0x1768 <__fixunssfsi+0x46>
    1734:	66 0f       	add	r22, r22
    1736:	77 1f       	adc	r23, r23
    1738:	88 1f       	adc	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	1a f0       	brmi	.+6      	; 0x1744 <__fixunssfsi+0x22>
    173e:	ba 95       	dec	r27
    1740:	c9 f7       	brne	.-14     	; 0x1734 <__fixunssfsi+0x12>
    1742:	12 c0       	rjmp	.+36     	; 0x1768 <__fixunssfsi+0x46>
    1744:	b1 30       	cpi	r27, 0x01	; 1
    1746:	81 f0       	breq	.+32     	; 0x1768 <__fixunssfsi+0x46>
    1748:	77 d0       	rcall	.+238    	; 0x1838 <__fp_zero>
    174a:	b1 e0       	ldi	r27, 0x01	; 1
    174c:	08 95       	ret
    174e:	74 c0       	rjmp	.+232    	; 0x1838 <__fp_zero>
    1750:	67 2f       	mov	r22, r23
    1752:	78 2f       	mov	r23, r24
    1754:	88 27       	eor	r24, r24
    1756:	b8 5f       	subi	r27, 0xF8	; 248
    1758:	39 f0       	breq	.+14     	; 0x1768 <__fixunssfsi+0x46>
    175a:	b9 3f       	cpi	r27, 0xF9	; 249
    175c:	cc f3       	brlt	.-14     	; 0x1750 <__fixunssfsi+0x2e>
    175e:	86 95       	lsr	r24
    1760:	77 95       	ror	r23
    1762:	67 95       	ror	r22
    1764:	b3 95       	inc	r27
    1766:	d9 f7       	brne	.-10     	; 0x175e <__fixunssfsi+0x3c>
    1768:	3e f4       	brtc	.+14     	; 0x1778 <__fixunssfsi+0x56>
    176a:	90 95       	com	r25
    176c:	80 95       	com	r24
    176e:	70 95       	com	r23
    1770:	61 95       	neg	r22
    1772:	7f 4f       	sbci	r23, 0xFF	; 255
    1774:	8f 4f       	sbci	r24, 0xFF	; 255
    1776:	9f 4f       	sbci	r25, 0xFF	; 255
    1778:	08 95       	ret

0000177a <__floatunsisf>:
    177a:	e8 94       	clt
    177c:	09 c0       	rjmp	.+18     	; 0x1790 <__floatsisf+0x12>

0000177e <__floatsisf>:
    177e:	97 fb       	bst	r25, 7
    1780:	3e f4       	brtc	.+14     	; 0x1790 <__floatsisf+0x12>
    1782:	90 95       	com	r25
    1784:	80 95       	com	r24
    1786:	70 95       	com	r23
    1788:	61 95       	neg	r22
    178a:	7f 4f       	sbci	r23, 0xFF	; 255
    178c:	8f 4f       	sbci	r24, 0xFF	; 255
    178e:	9f 4f       	sbci	r25, 0xFF	; 255
    1790:	99 23       	and	r25, r25
    1792:	a9 f0       	breq	.+42     	; 0x17be <__floatsisf+0x40>
    1794:	f9 2f       	mov	r31, r25
    1796:	96 e9       	ldi	r25, 0x96	; 150
    1798:	bb 27       	eor	r27, r27
    179a:	93 95       	inc	r25
    179c:	f6 95       	lsr	r31
    179e:	87 95       	ror	r24
    17a0:	77 95       	ror	r23
    17a2:	67 95       	ror	r22
    17a4:	b7 95       	ror	r27
    17a6:	f1 11       	cpse	r31, r1
    17a8:	f8 cf       	rjmp	.-16     	; 0x179a <__floatsisf+0x1c>
    17aa:	fa f4       	brpl	.+62     	; 0x17ea <__floatsisf+0x6c>
    17ac:	bb 0f       	add	r27, r27
    17ae:	11 f4       	brne	.+4      	; 0x17b4 <__floatsisf+0x36>
    17b0:	60 ff       	sbrs	r22, 0
    17b2:	1b c0       	rjmp	.+54     	; 0x17ea <__floatsisf+0x6c>
    17b4:	6f 5f       	subi	r22, 0xFF	; 255
    17b6:	7f 4f       	sbci	r23, 0xFF	; 255
    17b8:	8f 4f       	sbci	r24, 0xFF	; 255
    17ba:	9f 4f       	sbci	r25, 0xFF	; 255
    17bc:	16 c0       	rjmp	.+44     	; 0x17ea <__floatsisf+0x6c>
    17be:	88 23       	and	r24, r24
    17c0:	11 f0       	breq	.+4      	; 0x17c6 <__floatsisf+0x48>
    17c2:	96 e9       	ldi	r25, 0x96	; 150
    17c4:	11 c0       	rjmp	.+34     	; 0x17e8 <__floatsisf+0x6a>
    17c6:	77 23       	and	r23, r23
    17c8:	21 f0       	breq	.+8      	; 0x17d2 <__floatsisf+0x54>
    17ca:	9e e8       	ldi	r25, 0x8E	; 142
    17cc:	87 2f       	mov	r24, r23
    17ce:	76 2f       	mov	r23, r22
    17d0:	05 c0       	rjmp	.+10     	; 0x17dc <__floatsisf+0x5e>
    17d2:	66 23       	and	r22, r22
    17d4:	71 f0       	breq	.+28     	; 0x17f2 <__floatsisf+0x74>
    17d6:	96 e8       	ldi	r25, 0x86	; 134
    17d8:	86 2f       	mov	r24, r22
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	2a f0       	brmi	.+10     	; 0x17ea <__floatsisf+0x6c>
    17e0:	9a 95       	dec	r25
    17e2:	66 0f       	add	r22, r22
    17e4:	77 1f       	adc	r23, r23
    17e6:	88 1f       	adc	r24, r24
    17e8:	da f7       	brpl	.-10     	; 0x17e0 <__floatsisf+0x62>
    17ea:	88 0f       	add	r24, r24
    17ec:	96 95       	lsr	r25
    17ee:	87 95       	ror	r24
    17f0:	97 f9       	bld	r25, 7
    17f2:	08 95       	ret

000017f4 <__fp_split3>:
    17f4:	57 fd       	sbrc	r21, 7
    17f6:	90 58       	subi	r25, 0x80	; 128
    17f8:	44 0f       	add	r20, r20
    17fa:	55 1f       	adc	r21, r21
    17fc:	59 f0       	breq	.+22     	; 0x1814 <__fp_splitA+0x10>
    17fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1800:	71 f0       	breq	.+28     	; 0x181e <__fp_splitA+0x1a>
    1802:	47 95       	ror	r20

00001804 <__fp_splitA>:
    1804:	88 0f       	add	r24, r24
    1806:	97 fb       	bst	r25, 7
    1808:	99 1f       	adc	r25, r25
    180a:	61 f0       	breq	.+24     	; 0x1824 <__fp_splitA+0x20>
    180c:	9f 3f       	cpi	r25, 0xFF	; 255
    180e:	79 f0       	breq	.+30     	; 0x182e <__fp_splitA+0x2a>
    1810:	87 95       	ror	r24
    1812:	08 95       	ret
    1814:	12 16       	cp	r1, r18
    1816:	13 06       	cpc	r1, r19
    1818:	14 06       	cpc	r1, r20
    181a:	55 1f       	adc	r21, r21
    181c:	f2 cf       	rjmp	.-28     	; 0x1802 <__fp_split3+0xe>
    181e:	46 95       	lsr	r20
    1820:	f1 df       	rcall	.-30     	; 0x1804 <__fp_splitA>
    1822:	08 c0       	rjmp	.+16     	; 0x1834 <__fp_splitA+0x30>
    1824:	16 16       	cp	r1, r22
    1826:	17 06       	cpc	r1, r23
    1828:	18 06       	cpc	r1, r24
    182a:	99 1f       	adc	r25, r25
    182c:	f1 cf       	rjmp	.-30     	; 0x1810 <__fp_splitA+0xc>
    182e:	86 95       	lsr	r24
    1830:	71 05       	cpc	r23, r1
    1832:	61 05       	cpc	r22, r1
    1834:	08 94       	sec
    1836:	08 95       	ret

00001838 <__fp_zero>:
    1838:	e8 94       	clt

0000183a <__fp_szero>:
    183a:	bb 27       	eor	r27, r27
    183c:	66 27       	eor	r22, r22
    183e:	77 27       	eor	r23, r23
    1840:	cb 01       	movw	r24, r22
    1842:	97 f9       	bld	r25, 7
    1844:	08 95       	ret

00001846 <__mulsf3>:
    1846:	0b d0       	rcall	.+22     	; 0x185e <__mulsf3x>
    1848:	78 c0       	rjmp	.+240    	; 0x193a <__fp_round>
    184a:	69 d0       	rcall	.+210    	; 0x191e <__fp_pscA>
    184c:	28 f0       	brcs	.+10     	; 0x1858 <__mulsf3+0x12>
    184e:	6e d0       	rcall	.+220    	; 0x192c <__fp_pscB>
    1850:	18 f0       	brcs	.+6      	; 0x1858 <__mulsf3+0x12>
    1852:	95 23       	and	r25, r21
    1854:	09 f0       	breq	.+2      	; 0x1858 <__mulsf3+0x12>
    1856:	5a c0       	rjmp	.+180    	; 0x190c <__fp_inf>
    1858:	5f c0       	rjmp	.+190    	; 0x1918 <__fp_nan>
    185a:	11 24       	eor	r1, r1
    185c:	ee cf       	rjmp	.-36     	; 0x183a <__fp_szero>

0000185e <__mulsf3x>:
    185e:	ca df       	rcall	.-108    	; 0x17f4 <__fp_split3>
    1860:	a0 f3       	brcs	.-24     	; 0x184a <__mulsf3+0x4>

00001862 <__mulsf3_pse>:
    1862:	95 9f       	mul	r25, r21
    1864:	d1 f3       	breq	.-12     	; 0x185a <__mulsf3+0x14>
    1866:	95 0f       	add	r25, r21
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	55 1f       	adc	r21, r21
    186c:	62 9f       	mul	r22, r18
    186e:	f0 01       	movw	r30, r0
    1870:	72 9f       	mul	r23, r18
    1872:	bb 27       	eor	r27, r27
    1874:	f0 0d       	add	r31, r0
    1876:	b1 1d       	adc	r27, r1
    1878:	63 9f       	mul	r22, r19
    187a:	aa 27       	eor	r26, r26
    187c:	f0 0d       	add	r31, r0
    187e:	b1 1d       	adc	r27, r1
    1880:	aa 1f       	adc	r26, r26
    1882:	64 9f       	mul	r22, r20
    1884:	66 27       	eor	r22, r22
    1886:	b0 0d       	add	r27, r0
    1888:	a1 1d       	adc	r26, r1
    188a:	66 1f       	adc	r22, r22
    188c:	82 9f       	mul	r24, r18
    188e:	22 27       	eor	r18, r18
    1890:	b0 0d       	add	r27, r0
    1892:	a1 1d       	adc	r26, r1
    1894:	62 1f       	adc	r22, r18
    1896:	73 9f       	mul	r23, r19
    1898:	b0 0d       	add	r27, r0
    189a:	a1 1d       	adc	r26, r1
    189c:	62 1f       	adc	r22, r18
    189e:	83 9f       	mul	r24, r19
    18a0:	a0 0d       	add	r26, r0
    18a2:	61 1d       	adc	r22, r1
    18a4:	22 1f       	adc	r18, r18
    18a6:	74 9f       	mul	r23, r20
    18a8:	33 27       	eor	r19, r19
    18aa:	a0 0d       	add	r26, r0
    18ac:	61 1d       	adc	r22, r1
    18ae:	23 1f       	adc	r18, r19
    18b0:	84 9f       	mul	r24, r20
    18b2:	60 0d       	add	r22, r0
    18b4:	21 1d       	adc	r18, r1
    18b6:	82 2f       	mov	r24, r18
    18b8:	76 2f       	mov	r23, r22
    18ba:	6a 2f       	mov	r22, r26
    18bc:	11 24       	eor	r1, r1
    18be:	9f 57       	subi	r25, 0x7F	; 127
    18c0:	50 40       	sbci	r21, 0x00	; 0
    18c2:	8a f0       	brmi	.+34     	; 0x18e6 <__mulsf3_pse+0x84>
    18c4:	e1 f0       	breq	.+56     	; 0x18fe <__mulsf3_pse+0x9c>
    18c6:	88 23       	and	r24, r24
    18c8:	4a f0       	brmi	.+18     	; 0x18dc <__mulsf3_pse+0x7a>
    18ca:	ee 0f       	add	r30, r30
    18cc:	ff 1f       	adc	r31, r31
    18ce:	bb 1f       	adc	r27, r27
    18d0:	66 1f       	adc	r22, r22
    18d2:	77 1f       	adc	r23, r23
    18d4:	88 1f       	adc	r24, r24
    18d6:	91 50       	subi	r25, 0x01	; 1
    18d8:	50 40       	sbci	r21, 0x00	; 0
    18da:	a9 f7       	brne	.-22     	; 0x18c6 <__mulsf3_pse+0x64>
    18dc:	9e 3f       	cpi	r25, 0xFE	; 254
    18de:	51 05       	cpc	r21, r1
    18e0:	70 f0       	brcs	.+28     	; 0x18fe <__mulsf3_pse+0x9c>
    18e2:	14 c0       	rjmp	.+40     	; 0x190c <__fp_inf>
    18e4:	aa cf       	rjmp	.-172    	; 0x183a <__fp_szero>
    18e6:	5f 3f       	cpi	r21, 0xFF	; 255
    18e8:	ec f3       	brlt	.-6      	; 0x18e4 <__mulsf3_pse+0x82>
    18ea:	98 3e       	cpi	r25, 0xE8	; 232
    18ec:	dc f3       	brlt	.-10     	; 0x18e4 <__mulsf3_pse+0x82>
    18ee:	86 95       	lsr	r24
    18f0:	77 95       	ror	r23
    18f2:	67 95       	ror	r22
    18f4:	b7 95       	ror	r27
    18f6:	f7 95       	ror	r31
    18f8:	e7 95       	ror	r30
    18fa:	9f 5f       	subi	r25, 0xFF	; 255
    18fc:	c1 f7       	brne	.-16     	; 0x18ee <__mulsf3_pse+0x8c>
    18fe:	fe 2b       	or	r31, r30
    1900:	88 0f       	add	r24, r24
    1902:	91 1d       	adc	r25, r1
    1904:	96 95       	lsr	r25
    1906:	87 95       	ror	r24
    1908:	97 f9       	bld	r25, 7
    190a:	08 95       	ret

0000190c <__fp_inf>:
    190c:	97 f9       	bld	r25, 7
    190e:	9f 67       	ori	r25, 0x7F	; 127
    1910:	80 e8       	ldi	r24, 0x80	; 128
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	60 e0       	ldi	r22, 0x00	; 0
    1916:	08 95       	ret

00001918 <__fp_nan>:
    1918:	9f ef       	ldi	r25, 0xFF	; 255
    191a:	80 ec       	ldi	r24, 0xC0	; 192
    191c:	08 95       	ret

0000191e <__fp_pscA>:
    191e:	00 24       	eor	r0, r0
    1920:	0a 94       	dec	r0
    1922:	16 16       	cp	r1, r22
    1924:	17 06       	cpc	r1, r23
    1926:	18 06       	cpc	r1, r24
    1928:	09 06       	cpc	r0, r25
    192a:	08 95       	ret

0000192c <__fp_pscB>:
    192c:	00 24       	eor	r0, r0
    192e:	0a 94       	dec	r0
    1930:	12 16       	cp	r1, r18
    1932:	13 06       	cpc	r1, r19
    1934:	14 06       	cpc	r1, r20
    1936:	05 06       	cpc	r0, r21
    1938:	08 95       	ret

0000193a <__fp_round>:
    193a:	09 2e       	mov	r0, r25
    193c:	03 94       	inc	r0
    193e:	00 0c       	add	r0, r0
    1940:	11 f4       	brne	.+4      	; 0x1946 <__fp_round+0xc>
    1942:	88 23       	and	r24, r24
    1944:	52 f0       	brmi	.+20     	; 0x195a <__fp_round+0x20>
    1946:	bb 0f       	add	r27, r27
    1948:	40 f4       	brcc	.+16     	; 0x195a <__fp_round+0x20>
    194a:	bf 2b       	or	r27, r31
    194c:	11 f4       	brne	.+4      	; 0x1952 <__fp_round+0x18>
    194e:	60 ff       	sbrs	r22, 0
    1950:	04 c0       	rjmp	.+8      	; 0x195a <__fp_round+0x20>
    1952:	6f 5f       	subi	r22, 0xFF	; 255
    1954:	7f 4f       	sbci	r23, 0xFF	; 255
    1956:	8f 4f       	sbci	r24, 0xFF	; 255
    1958:	9f 4f       	sbci	r25, 0xFF	; 255
    195a:	08 95       	ret

0000195c <__tablejump2__>:
    195c:	ee 0f       	add	r30, r30
    195e:	ff 1f       	adc	r31, r31
    1960:	88 1f       	adc	r24, r24
    1962:	8b bf       	out	0x3b, r24	; 59
    1964:	07 90       	elpm	r0, Z+
    1966:	f6 91       	elpm	r31, Z
    1968:	e0 2d       	mov	r30, r0
    196a:	19 94       	eijmp

0000196c <__umulhisi3>:
    196c:	a2 9f       	mul	r26, r18
    196e:	b0 01       	movw	r22, r0
    1970:	b3 9f       	mul	r27, r19
    1972:	c0 01       	movw	r24, r0
    1974:	a3 9f       	mul	r26, r19
    1976:	70 0d       	add	r23, r0
    1978:	81 1d       	adc	r24, r1
    197a:	11 24       	eor	r1, r1
    197c:	91 1d       	adc	r25, r1
    197e:	b2 9f       	mul	r27, r18
    1980:	70 0d       	add	r23, r0
    1982:	81 1d       	adc	r24, r1
    1984:	11 24       	eor	r1, r1
    1986:	91 1d       	adc	r25, r1
    1988:	08 95       	ret

0000198a <puts>:
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	e0 91 34 16 	lds	r30, 0x1634
    1996:	f0 91 35 16 	lds	r31, 0x1635
    199a:	23 81       	ldd	r18, Z+3	; 0x03
    199c:	21 ff       	sbrs	r18, 1
    199e:	1b c0       	rjmp	.+54     	; 0x19d6 <puts+0x4c>
    19a0:	8c 01       	movw	r16, r24
    19a2:	d0 e0       	ldi	r29, 0x00	; 0
    19a4:	c0 e0       	ldi	r28, 0x00	; 0
    19a6:	f8 01       	movw	r30, r16
    19a8:	81 91       	ld	r24, Z+
    19aa:	8f 01       	movw	r16, r30
    19ac:	60 91 34 16 	lds	r22, 0x1634
    19b0:	70 91 35 16 	lds	r23, 0x1635
    19b4:	db 01       	movw	r26, r22
    19b6:	18 96       	adiw	r26, 0x08	; 8
    19b8:	ed 91       	ld	r30, X+
    19ba:	fc 91       	ld	r31, X
    19bc:	19 97       	sbiw	r26, 0x09	; 9
    19be:	88 23       	and	r24, r24
    19c0:	31 f0       	breq	.+12     	; 0x19ce <puts+0x44>
    19c2:	19 95       	eicall
    19c4:	89 2b       	or	r24, r25
    19c6:	79 f3       	breq	.-34     	; 0x19a6 <puts+0x1c>
    19c8:	df ef       	ldi	r29, 0xFF	; 255
    19ca:	cf ef       	ldi	r28, 0xFF	; 255
    19cc:	ec cf       	rjmp	.-40     	; 0x19a6 <puts+0x1c>
    19ce:	8a e0       	ldi	r24, 0x0A	; 10
    19d0:	19 95       	eicall
    19d2:	89 2b       	or	r24, r25
    19d4:	19 f0       	breq	.+6      	; 0x19dc <puts+0x52>
    19d6:	8f ef       	ldi	r24, 0xFF	; 255
    19d8:	9f ef       	ldi	r25, 0xFF	; 255
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <puts+0x56>
    19dc:	8d 2f       	mov	r24, r29
    19de:	9c 2f       	mov	r25, r28
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	08 95       	ret

000019ea <_exit>:
    19ea:	f8 94       	cli

000019ec <__stop_program>:
    19ec:	ff cf       	rjmp	.-2      	; 0x19ec <__stop_program>
