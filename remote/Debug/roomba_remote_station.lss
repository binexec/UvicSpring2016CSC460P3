
roomba_remote_station.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800200  000019f4  00001a88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000140c  0080022c  0080022c  00001ab4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ae4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00001b28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023f5  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a11  00000000  00000000  0000415d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001842  00000000  00000000  00004b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004bc  00000000  00000000  000063b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ec  00000000  00000000  0000686c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016ff  00000000  00000000  00007258  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  00008957  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	9d c0       	rjmp	.+314    	; 0x140 <__bad_interrupt>
       6:	00 00       	nop
       8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c0       	rjmp	.+306    	; 0x140 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c0       	rjmp	.+294    	; 0x140 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c0       	rjmp	.+254    	; 0x140 <__bad_interrupt>
      42:	00 00       	nop
      44:	a6 c4       	rjmp	.+2380   	; 0x992 <__vector_17>
      46:	00 00       	nop
      48:	7b c0       	rjmp	.+246    	; 0x140 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c0       	rjmp	.+238    	; 0x140 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c0       	rjmp	.+230    	; 0x140 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	6d c0       	rjmp	.+218    	; 0x140 <__bad_interrupt>
      66:	00 00       	nop
      68:	6b c0       	rjmp	.+214    	; 0x140 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c0       	rjmp	.+206    	; 0x140 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c0       	rjmp	.+202    	; 0x140 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c0       	rjmp	.+198    	; 0x140 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5f c0       	rjmp	.+190    	; 0x140 <__bad_interrupt>
      82:	00 00       	nop
      84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c0       	rjmp	.+178    	; 0x140 <__bad_interrupt>
      8e:	00 00       	nop
      90:	57 c0       	rjmp	.+174    	; 0x140 <__bad_interrupt>
      92:	00 00       	nop
      94:	55 c0       	rjmp	.+170    	; 0x140 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c0       	rjmp	.+166    	; 0x140 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c0       	rjmp	.+162    	; 0x140 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c0       	rjmp	.+158    	; 0x140 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c0       	rjmp	.+154    	; 0x140 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c0       	rjmp	.+150    	; 0x140 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c0       	rjmp	.+146    	; 0x140 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c0       	rjmp	.+142    	; 0x140 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c0       	rjmp	.+138    	; 0x140 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c0       	rjmp	.+134    	; 0x140 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	41 c0       	rjmp	.+130    	; 0x140 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3f c0       	rjmp	.+126    	; 0x140 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c0       	rjmp	.+122    	; 0x140 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c0       	rjmp	.+118    	; 0x140 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c0       	rjmp	.+114    	; 0x140 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c0       	rjmp	.+110    	; 0x140 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c0       	rjmp	.+106    	; 0x140 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c0       	rjmp	.+102    	; 0x140 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c0       	rjmp	.+98     	; 0x140 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c0       	rjmp	.+94     	; 0x140 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f1 0a       	sbc	r15, r17
      e6:	31 08       	sbc	r3, r1
      e8:	f1 0a       	sbc	r15, r17
      ea:	3a 08       	sbc	r3, r10
      ec:	12 09       	sbc	r17, r2
      ee:	56 09       	sbc	r21, r6
      f0:	71 09       	sbc	r23, r1
      f2:	75 09       	sbc	r23, r5
      f4:	77 09       	sbc	r23, r7
      f6:	ba 09       	sbc	r27, r10
      f8:	ee 09       	sbc	r30, r14
      fa:	f0 09       	sbc	r31, r0
      fc:	68 0a       	sbc	r6, r24

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	e4 ef       	ldi	r30, 0xF4	; 244
     116:	f9 e1       	ldi	r31, 0x19	; 25
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	ac 32       	cpi	r26, 0x2C	; 44
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	26 e1       	ldi	r18, 0x16	; 22
     12a:	ac e2       	ldi	r26, 0x2C	; 44
     12c:	b2 e0       	ldi	r27, 0x02	; 2
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	a8 33       	cpi	r26, 0x38	; 56
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <main>
     13c:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <_exit>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     142:	0f 92       	push	r0
     144:	1f 92       	push	r1
     146:	2f 92       	push	r2
     148:	3f 92       	push	r3
     14a:	4f 92       	push	r4
     14c:	5f 92       	push	r5
     14e:	6f 92       	push	r6
     150:	7f 92       	push	r7
     152:	8f 92       	push	r8
     154:	9f 92       	push	r9
     156:	af 92       	push	r10
     158:	bf 92       	push	r11
     15a:	cf 92       	push	r12
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	2f 93       	push	r18
     168:	3f 93       	push	r19
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	ef 93       	push	r30
     180:	ff 93       	push	r31
     182:	fc b7       	in	r31, 0x3c	; 60
     184:	ff 93       	push	r31
     186:	ff b7       	in	r31, 0x3f	; 63
     188:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     18a:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     18c:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     18e:	e0 93 30 16 	sts	0x1630, r30
        sts  KernelSp+1, r31
     192:	f0 93 31 16 	sts	0x1631, r31
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     196:	e0 91 2a 16 	lds	r30, 0x162A
        lds  r31, CurrentSp+1
     19a:	f0 91 2b 16 	lds	r31, 0x162B
        out  SPL, r30
     19e:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     1a0:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     1a2:	ff 91       	pop	r31
     1a4:	ff bf       	out	0x3f, r31	; 63
     1a6:	ff 91       	pop	r31
     1a8:	fc bf       	out	0x3c, r31	; 60
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	bf 91       	pop	r27
     1b4:	af 91       	pop	r26
     1b6:	9f 91       	pop	r25
     1b8:	8f 91       	pop	r24
     1ba:	7f 91       	pop	r23
     1bc:	6f 91       	pop	r22
     1be:	5f 91       	pop	r21
     1c0:	4f 91       	pop	r20
     1c2:	3f 91       	pop	r19
     1c4:	2f 91       	pop	r18
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	bf 90       	pop	r11
     1d4:	af 90       	pop	r10
     1d6:	9f 90       	pop	r9
     1d8:	8f 90       	pop	r8
     1da:	7f 90       	pop	r7
     1dc:	6f 90       	pop	r6
     1de:	5f 90       	pop	r5
     1e0:	4f 90       	pop	r4
     1e2:	3f 90       	pop	r3
     1e4:	2f 90       	pop	r2
     1e6:	1f 90       	pop	r1
     1e8:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1ea:	18 95       	reti

000001ec <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1ec:	0f 92       	push	r0
     1ee:	1f 92       	push	r1
     1f0:	2f 92       	push	r2
     1f2:	3f 92       	push	r3
     1f4:	4f 92       	push	r4
     1f6:	5f 92       	push	r5
     1f8:	6f 92       	push	r6
     1fa:	7f 92       	push	r7
     1fc:	8f 92       	push	r8
     1fe:	9f 92       	push	r9
     200:	af 92       	push	r10
     202:	bf 92       	push	r11
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	2f 93       	push	r18
     212:	3f 93       	push	r19
     214:	4f 93       	push	r20
     216:	5f 93       	push	r21
     218:	6f 93       	push	r22
     21a:	7f 93       	push	r23
     21c:	8f 93       	push	r24
     21e:	9f 93       	push	r25
     220:	af 93       	push	r26
     222:	bf 93       	push	r27
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
     22c:	fc b7       	in	r31, 0x3c	; 60
     22e:	ff 93       	push	r31
     230:	ff b7       	in	r31, 0x3f	; 63
     232:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     234:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     236:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     238:	e0 93 2a 16 	sts	0x162A, r30
        sts  CurrentSp+1, r31
     23c:	f0 93 2b 16 	sts	0x162B, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     240:	e0 91 30 16 	lds	r30, 0x1630
        lds  r31, KernelSp+1
     244:	f0 91 31 16 	lds	r31, 0x1631
        out  SPL, r30
     248:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     24a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     24c:	ff 91       	pop	r31
     24e:	ff bf       	out	0x3f, r31	; 63
     250:	ff 91       	pop	r31
     252:	fc bf       	out	0x3c, r31	; 60
     254:	ff 91       	pop	r31
     256:	ef 91       	pop	r30
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	bf 91       	pop	r27
     25e:	af 91       	pop	r26
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	7f 91       	pop	r23
     266:	6f 91       	pop	r22
     268:	5f 91       	pop	r21
     26a:	4f 91       	pop	r20
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	bf 90       	pop	r11
     27e:	af 90       	pop	r10
     280:	9f 90       	pop	r9
     282:	8f 90       	pop	r8
     284:	7f 90       	pop	r7
     286:	6f 90       	pop	r6
     288:	5f 90       	pop	r5
     28a:	4f 90       	pop	r4
     28c:	3f 90       	pop	r3
     28e:	2f 90       	pop	r2
     290:	1f 90       	pop	r1
     292:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     294:	08 95       	ret

00000296 <InitADC>:
#include "adc.h"

void InitADC(void)
{
	ADMUX|=(1<<REFS0);
     296:	ec e7       	ldi	r30, 0x7C	; 124
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	80 81       	ld	r24, Z
     29c:	80 64       	ori	r24, 0x40	; 64
     29e:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //ENABLE ADC, PRESCALER 128
     2a0:	ea e7       	ldi	r30, 0x7A	; 122
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	80 81       	ld	r24, Z
     2a6:	87 68       	ori	r24, 0x87	; 135
     2a8:	80 83       	st	Z, r24
     2aa:	08 95       	ret

000002ac <readadc>:
}
uint16_t readadc(uint8_t ch)
{
	ch&=0b00000111;         //ANDing to limit input to 7
	ADMUX = (ADMUX & 0xf8)|ch;  //Clear last 3 bits of ADMUX, OR with ch
     2ac:	ec e7       	ldi	r30, 0x7C	; 124
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	90 81       	ld	r25, Z
	ADMUX|=(1<<REFS0);
	ADCSRA|=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //ENABLE ADC, PRESCALER 128
}
uint16_t readadc(uint8_t ch)
{
	ch&=0b00000111;         //ANDing to limit input to 7
     2b2:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xf8)|ch;  //Clear last 3 bits of ADMUX, OR with ch
     2b4:	98 7f       	andi	r25, 0xF8	; 248
     2b6:	89 2b       	or	r24, r25
     2b8:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADSC);        //START CONVERSION
     2ba:	ea e7       	ldi	r30, 0x7A	; 122
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	80 81       	ld	r24, Z
     2c0:	80 64       	ori	r24, 0x40	; 64
     2c2:	80 83       	st	Z, r24
	while((ADCSRA)&(1<<ADSC));    //WAIT UNTIL CONVERSION IS COMPLETE
     2c4:	80 81       	ld	r24, Z
     2c6:	86 fd       	sbrc	r24, 6
     2c8:	fd cf       	rjmp	.-6      	; 0x2c4 <readadc+0x18>
	return(ADC);        //RETURN ADC VALUE
     2ca:	80 91 78 00 	lds	r24, 0x0078
     2ce:	90 91 79 00 	lds	r25, 0x0079
     2d2:	08 95       	ret

000002d4 <receive_and_update>:
			Task_Terminate();
		}*/
		
		curbyte = uart0_recvbyte();
		count = 0;
		while (curbyte != '$')
     2d4:	d6 e0       	ldi	r29, 0x06	; 6
	{
		/*if (isDead) {
			Task_Terminate();
		}*/
		
		curbyte = uart0_recvbyte();
     2d6:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <uart0_recvbyte>
		count = 0;
		while (curbyte != '$')
     2da:	84 32       	cpi	r24, 0x24	; 36
     2dc:	21 f4       	brne	.+8      	; 0x2e6 <receive_and_update+0x12>
     2de:	08 c0       	rjmp	.+16     	; 0x2f0 <receive_and_update+0x1c>
     2e0:	c1 50       	subi	r28, 0x01	; 1
		{
			if (++count > 6)
     2e2:	11 f4       	brne	.+4      	; 0x2e8 <receive_and_update+0x14>
     2e4:	19 c0       	rjmp	.+50     	; 0x318 <receive_and_update+0x44>
			Task_Terminate();
		}*/
		
		curbyte = uart0_recvbyte();
		count = 0;
		while (curbyte != '$')
     2e6:	cd 2f       	mov	r28, r29
		{
			if (++count > 6)
				goto receive_and_update_continue;
				
			curbyte = uart0_recvbyte();
     2e8:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <uart0_recvbyte>
			Task_Terminate();
		}*/
		
		curbyte = uart0_recvbyte();
		count = 0;
		while (curbyte != '$')
     2ec:	84 32       	cpi	r24, 0x24	; 36
     2ee:	c1 f7       	brne	.-16     	; 0x2e0 <receive_and_update+0xc>
				goto receive_and_update_continue;
				
			curbyte = uart0_recvbyte();
		}
	
		last_direction = direction;
     2f0:	80 91 04 02 	lds	r24, 0x0204
     2f4:	80 93 03 02 	sts	0x0203, r24
		last_speed = speed;
     2f8:	80 91 02 02 	lds	r24, 0x0202
     2fc:	80 93 01 02 	sts	0x0201, r24
	
		direction = uart0_recvbyte();
     300:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <uart0_recvbyte>
     304:	80 93 04 02 	sts	0x0204, r24
		speed = uart0_recvbyte();
     308:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <uart0_recvbyte>
     30c:	80 93 02 02 	sts	0x0202, r24
		fire = uart0_recvbyte();
     310:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <uart0_recvbyte>
     314:	80 93 00 02 	sts	0x0200, r24
		
receive_and_update_continue:
		Task_Sleep(8);	
     318:	88 e0       	ldi	r24, 0x08	; 8
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0e 94 42 0b 	call	0x1684	; 0x1684 <Task_Sleep>
	}
     320:	da cf       	rjmp	.-76     	; 0x2d6 <receive_and_update+0x2>

00000322 <switch_uart_19200>:
volatile uint16_t photores_neutral;
volatile uint8_t isDead = 0;

void switch_uart_19200()
{
	DDRB |= (1<<PB0);		//Use ping 53 for BRC
     322:	20 9a       	sbi	0x04, 0	; 4
	PORTB |= (1<<PB0);		//Initialize BRC as high
     324:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     326:	2f ef       	ldi	r18, 0xFF	; 255
     328:	87 ea       	ldi	r24, 0xA7	; 167
     32a:	91 e6       	ldi	r25, 0x61	; 97
     32c:	21 50       	subi	r18, 0x01	; 1
     32e:	80 40       	sbci	r24, 0x00	; 0
     330:	90 40       	sbci	r25, 0x00	; 0
     332:	e1 f7       	brne	.-8      	; 0x32c <switch_uart_19200+0xa>
     334:	00 c0       	rjmp	.+0      	; 0x336 <switch_uart_19200+0x14>
     336:	00 00       	nop
	_delay_ms(2000);
	
	//Pulse BRC three times
	PORTB &= ~(1<<PB0);
     338:	28 98       	cbi	0x05, 0	; 5
     33a:	2f ef       	ldi	r18, 0xFF	; 255
     33c:	81 ee       	ldi	r24, 0xE1	; 225
     33e:	94 e0       	ldi	r25, 0x04	; 4
     340:	21 50       	subi	r18, 0x01	; 1
     342:	80 40       	sbci	r24, 0x00	; 0
     344:	90 40       	sbci	r25, 0x00	; 0
     346:	e1 f7       	brne	.-8      	; 0x340 <switch_uart_19200+0x1e>
     348:	00 c0       	rjmp	.+0      	; 0x34a <switch_uart_19200+0x28>
     34a:	00 00       	nop
	_delay_ms(100);
	PORTB |= (1<<PB0);
     34c:	28 9a       	sbi	0x05, 0	; 5
     34e:	2f ef       	ldi	r18, 0xFF	; 255
     350:	81 ee       	ldi	r24, 0xE1	; 225
     352:	94 e0       	ldi	r25, 0x04	; 4
     354:	21 50       	subi	r18, 0x01	; 1
     356:	80 40       	sbci	r24, 0x00	; 0
     358:	90 40       	sbci	r25, 0x00	; 0
     35a:	e1 f7       	brne	.-8      	; 0x354 <switch_uart_19200+0x32>
     35c:	00 c0       	rjmp	.+0      	; 0x35e <switch_uart_19200+0x3c>
     35e:	00 00       	nop
	_delay_ms(100);
	
	PORTB &= ~(1<<PB0);
     360:	28 98       	cbi	0x05, 0	; 5
     362:	2f ef       	ldi	r18, 0xFF	; 255
     364:	81 ee       	ldi	r24, 0xE1	; 225
     366:	94 e0       	ldi	r25, 0x04	; 4
     368:	21 50       	subi	r18, 0x01	; 1
     36a:	80 40       	sbci	r24, 0x00	; 0
     36c:	90 40       	sbci	r25, 0x00	; 0
     36e:	e1 f7       	brne	.-8      	; 0x368 <switch_uart_19200+0x46>
     370:	00 c0       	rjmp	.+0      	; 0x372 <switch_uart_19200+0x50>
     372:	00 00       	nop
	_delay_ms(100);
	PORTB |= (1<<PB0);
     374:	28 9a       	sbi	0x05, 0	; 5
     376:	2f ef       	ldi	r18, 0xFF	; 255
     378:	81 ee       	ldi	r24, 0xE1	; 225
     37a:	94 e0       	ldi	r25, 0x04	; 4
     37c:	21 50       	subi	r18, 0x01	; 1
     37e:	80 40       	sbci	r24, 0x00	; 0
     380:	90 40       	sbci	r25, 0x00	; 0
     382:	e1 f7       	brne	.-8      	; 0x37c <switch_uart_19200+0x5a>
     384:	00 c0       	rjmp	.+0      	; 0x386 <switch_uart_19200+0x64>
     386:	00 00       	nop
	_delay_ms(100);
	
	PORTB &= ~(1<<PB0);
     388:	28 98       	cbi	0x05, 0	; 5
     38a:	2f ef       	ldi	r18, 0xFF	; 255
     38c:	81 ee       	ldi	r24, 0xE1	; 225
     38e:	94 e0       	ldi	r25, 0x04	; 4
     390:	21 50       	subi	r18, 0x01	; 1
     392:	80 40       	sbci	r24, 0x00	; 0
     394:	90 40       	sbci	r25, 0x00	; 0
     396:	e1 f7       	brne	.-8      	; 0x390 <switch_uart_19200+0x6e>
     398:	00 c0       	rjmp	.+0      	; 0x39a <switch_uart_19200+0x78>
     39a:	00 00       	nop
	_delay_ms(100);
	PORTB |= (1<<PB0);
     39c:	28 9a       	sbi	0x05, 0	; 5
     39e:	08 95       	ret

000003a0 <start_robot_safe>:
}

void start_robot_safe()
{
	uart1_sendbyte(128);		//Send START command
     3a0:	80 e8       	ldi	r24, 0x80	; 128
     3a2:	0e 94 84 0b 	call	0x1708	; 0x1708 <uart1_sendbyte>
	uart1_sendbyte(131);		//Switch to SAFE mode
     3a6:	83 e8       	ldi	r24, 0x83	; 131
     3a8:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <uart1_sendbyte>
     3ac:	08 95       	ret

000003ae <beep>:
}

void beep()
{
	//Play the beep "song" created in roomba_init
	uart1_sendbyte(141);
     3ae:	8d e8       	ldi	r24, 0x8D	; 141
     3b0:	0e 94 84 0b 	call	0x1708	; 0x1708 <uart1_sendbyte>
	uart1_sendbyte(0);
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <uart1_sendbyte>
     3ba:	08 95       	ret

000003bc <calibratePhotores>:
}

void calibratePhotores()
{
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	ca e0       	ldi	r28, 0x0A	; 10
     3c2:	d0 e0       	ldi	r29, 0x00	; 0
	int i;

	//Sample the ambient lighting 10 times
	for(i=0; i<10; i++)
	{
		photores_neutral += readadc(PHOTORESIS_PIN);
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	72 df       	rcall	.-284    	; 0x2ac <readadc>
     3c8:	20 91 21 16 	lds	r18, 0x1621
     3cc:	30 91 22 16 	lds	r19, 0x1622
     3d0:	82 0f       	add	r24, r18
     3d2:	93 1f       	adc	r25, r19
     3d4:	90 93 22 16 	sts	0x1622, r25
     3d8:	80 93 21 16 	sts	0x1621, r24
     3dc:	2f ef       	ldi	r18, 0xFF	; 255
     3de:	81 ee       	ldi	r24, 0xE1	; 225
     3e0:	94 e0       	ldi	r25, 0x04	; 4
     3e2:	21 50       	subi	r18, 0x01	; 1
     3e4:	80 40       	sbci	r24, 0x00	; 0
     3e6:	90 40       	sbci	r25, 0x00	; 0
     3e8:	e1 f7       	brne	.-8      	; 0x3e2 <calibratePhotores+0x26>
     3ea:	00 c0       	rjmp	.+0      	; 0x3ec <calibratePhotores+0x30>
     3ec:	00 00       	nop
     3ee:	21 97       	sbiw	r28, 0x01	; 1
void calibratePhotores()
{
	int i;

	//Sample the ambient lighting 10 times
	for(i=0; i<10; i++)
     3f0:	49 f7       	brne	.-46     	; 0x3c4 <calibratePhotores+0x8>
	{
		photores_neutral += readadc(PHOTORESIS_PIN);
		_delay_ms(100);
	}
	photores_neutral /= i;     //Use the average as neutral value
     3f2:	20 91 21 16 	lds	r18, 0x1621
     3f6:	30 91 22 16 	lds	r19, 0x1622
     3fa:	ad ec       	ldi	r26, 0xCD	; 205
     3fc:	bc ec       	ldi	r27, 0xCC	; 204
     3fe:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__umulhisi3>
     402:	96 95       	lsr	r25
     404:	87 95       	ror	r24
     406:	96 95       	lsr	r25
     408:	87 95       	ror	r24
     40a:	96 95       	lsr	r25
     40c:	87 95       	ror	r24
     40e:	90 93 22 16 	sts	0x1622, r25
     412:	80 93 21 16 	sts	0x1621, r24
	photores_thres = 1.4*photores_neutral;
     416:	60 91 21 16 	lds	r22, 0x1621
     41a:	70 91 22 16 	lds	r23, 0x1622
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__floatunsisf>
     426:	23 e3       	ldi	r18, 0x33	; 51
     428:	33 e3       	ldi	r19, 0x33	; 51
     42a:	43 eb       	ldi	r20, 0xB3	; 179
     42c:	5f e3       	ldi	r21, 0x3F	; 63
     42e:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     432:	0e 94 94 0b 	call	0x1728	; 0x1728 <__fixunssfsi>
     436:	70 93 20 16 	sts	0x1620, r23
     43a:	60 93 1f 16 	sts	0x161F, r22
}
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	08 95       	ret

00000444 <roomba_init>:

void roomba_init()
{
	//Default values
	direction = NOT_MOVING;
     444:	8a e7       	ldi	r24, 0x7A	; 122
     446:	80 93 04 02 	sts	0x0204, r24
	speed = NOT_MOVING;
     44a:	80 93 02 02 	sts	0x0202, r24
	
	switch_uart_19200();
     44e:	69 df       	rcall	.-302    	; 0x322 <switch_uart_19200>
	start_robot_safe();
     450:	a7 df       	rcall	.-178    	; 0x3a0 <start_robot_safe>
	calibratePhotores();
     452:	b4 df       	rcall	.-152    	; 0x3bc <calibratePhotores>
	
	//Write a "song" for the beep into slot 0
	//Example from: http://www.robotappstore.com/Knowledge-Base/4-How-to-Send-Commands-to-Roomba/18.html
	uart1_sendbyte(140);
     454:	8c e8       	ldi	r24, 0x8C	; 140
     456:	0e 94 84 0b 	call	0x1708	; 0x1708 <uart1_sendbyte>
	uart1_sendbyte(0);
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	0e 94 84 0b 	call	0x1708	; 0x1708 <uart1_sendbyte>
	uart1_sendbyte(1);
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	0e 94 84 0b 	call	0x1708	; 0x1708 <uart1_sendbyte>
	uart1_sendbyte(62);
     466:	8e e3       	ldi	r24, 0x3E	; 62
     468:	0e 94 84 0b 	call	0x1708	; 0x1708 <uart1_sendbyte>
	uart1_sendbyte(32);
     46c:	80 e2       	ldi	r24, 0x20	; 32
     46e:	0e 94 84 0b 	call	0x1708	; 0x1708 <uart1_sendbyte>
	beep();
     472:	9d cf       	rjmp	.-198    	; 0x3ae <beep>
     474:	08 95       	ret

00000476 <drive>:
}

void drive(int16_t vel, int16_t rad)
{
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	8b 01       	movw	r16, r22
     480:	85 3f       	cpi	r24, 0xF5	; 245
     482:	21 e0       	ldi	r18, 0x01	; 1
     484:	92 07       	cpc	r25, r18
     486:	14 f0       	brlt	.+4      	; 0x48c <drive+0x16>
     488:	84 ef       	ldi	r24, 0xF4	; 244
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	ec 01       	movw	r28, r24
     48e:	cc 30       	cpi	r28, 0x0C	; 12
     490:	8e ef       	ldi	r24, 0xFE	; 254
     492:	d8 07       	cpc	r29, r24
     494:	14 f4       	brge	.+4      	; 0x49a <drive+0x24>
     496:	cc e0       	ldi	r28, 0x0C	; 12
     498:	de ef       	ldi	r29, 0xFE	; 254
		vel = -500;
	else if (vel > 500)
		vel = 500;
	
	//Making sure radius is within valid range
	if(rad < -2000)
     49a:	00 33       	cpi	r16, 0x30	; 48
     49c:	28 ef       	ldi	r18, 0xF8	; 248
     49e:	12 07       	cpc	r17, r18
     4a0:	4c f0       	brlt	.+18     	; 0x4b4 <drive+0x3e>
		rad = -2000;
	else if(rad > 2000 && rad != DRIVE_STRAIGHT)	//32767 and 32768 are special cases to drive straight
     4a2:	c8 01       	movw	r24, r16
     4a4:	81 5d       	subi	r24, 0xD1	; 209
     4a6:	97 40       	sbci	r25, 0x07	; 7
     4a8:	8e 32       	cpi	r24, 0x2E	; 46
     4aa:	98 47       	sbci	r25, 0x78	; 120
     4ac:	28 f4       	brcc	.+10     	; 0x4b8 <drive+0x42>
		rad = 2000;
     4ae:	00 ed       	ldi	r16, 0xD0	; 208
     4b0:	17 e0       	ldi	r17, 0x07	; 7
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <drive+0x42>
	else if (vel > 500)
		vel = 500;
	
	//Making sure radius is within valid range
	if(rad < -2000)
		rad = -2000;
     4b4:	00 e3       	ldi	r16, 0x30	; 48
     4b6:	18 ef       	ldi	r17, 0xF8	; 248
	else if(rad > 2000 && rad != DRIVE_STRAIGHT)	//32767 and 32768 are special cases to drive straight
		rad = 2000;
	
	uart1_sendbyte(137);				//Opcode for drive
     4b8:	89 e8       	ldi	r24, 0x89	; 137
     4ba:	0e 94 84 0b 	call	0x1708	; 0x1708 <uart1_sendbyte>
	uart1_sendbyte(vel >> 8);			//Velocity high byte
     4be:	8d 2f       	mov	r24, r29
     4c0:	0e 94 84 0b 	call	0x1708	; 0x1708 <uart1_sendbyte>
	uart1_sendbyte(vel);				//velocity low byte
     4c4:	8c 2f       	mov	r24, r28
     4c6:	0e 94 84 0b 	call	0x1708	; 0x1708 <uart1_sendbyte>
	uart1_sendbyte(rad >> 8);			//Radius high byte
     4ca:	81 2f       	mov	r24, r17
     4cc:	0e 94 84 0b 	call	0x1708	; 0x1708 <uart1_sendbyte>
	uart1_sendbyte(rad);				//Radius low byte
     4d0:	80 2f       	mov	r24, r16
     4d2:	0e 94 84 0b 	call	0x1708	; 0x1708 <uart1_sendbyte>
}
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	08 95       	ret

000004e0 <move_as_global>:
				break;
			case POSITIVE_LOW:
				rad = 500;
				break;
			case POSITIVE_HIGH:
				rad = 1;
     4e0:	66 24       	eor	r6, r6
     4e2:	63 94       	inc	r6
     4e4:	71 2c       	mov	r7, r1
				vel = 0;
				break;
		}
	
		if (rad == 1 || rad == -1) {
			vel = 250;
     4e6:	0a ef       	ldi	r16, 0xFA	; 250
     4e8:	10 e0       	ldi	r17, 0x00	; 0
			case POSITIVE_HIGH:
				vel = 500;
				break;
			case NOT_MOVING:
			default:
				vel = 0;
     4ea:	c1 2c       	mov	r12, r1
     4ec:	d1 2c       	mov	r13, r1
				break;
			case POSITIVE_LOW:
				vel = 250;
				break;
			case POSITIVE_HIGH:
				vel = 500;
     4ee:	0f 2e       	mov	r0, r31
     4f0:	f4 ef       	ldi	r31, 0xF4	; 244
     4f2:	ef 2e       	mov	r14, r31
     4f4:	f0 2d       	mov	r31, r0
     4f6:	ff 24       	eor	r15, r15
     4f8:	f3 94       	inc	r15
		{
			case NEGATIVE_HIGH:
				vel = -500;
				break;
			case NEGATIVE_LOW:
				vel = -250;
     4fa:	0f 2e       	mov	r0, r31
     4fc:	f6 e0       	ldi	r31, 0x06	; 6
     4fe:	8f 2e       	mov	r8, r31
     500:	f0 2d       	mov	r31, r0
     502:	99 24       	eor	r9, r9
     504:	9a 94       	dec	r9
		}
	
		switch(speed)
		{
			case NEGATIVE_HIGH:
				vel = -500;
     506:	0f 2e       	mov	r0, r31
     508:	fc e0       	ldi	r31, 0x0C	; 12
     50a:	af 2e       	mov	r10, r31
     50c:	f0 2d       	mov	r31, r0
     50e:	0f 2e       	mov	r0, r31
     510:	fe ef       	ldi	r31, 0xFE	; 254
     512:	bf 2e       	mov	r11, r31
     514:	f0 2d       	mov	r31, r0
			goto move_as_global_continue;
		
		switch(direction)
		{
			case NEGATIVE_HIGH:
				rad = -1;
     516:	df ef       	ldi	r29, 0xFF	; 255
     518:	cf ef       	ldi	r28, 0xFF	; 255
	while (1)
	{
		/*if (isDead) {
			Task_Terminate();
		}*/
		if (direction == last_direction && speed == last_speed)
     51a:	90 91 04 02 	lds	r25, 0x0204
     51e:	80 91 03 02 	lds	r24, 0x0203
     522:	98 13       	cpse	r25, r24
     524:	07 c0       	rjmp	.+14     	; 0x534 <move_as_global+0x54>
     526:	90 91 02 02 	lds	r25, 0x0202
     52a:	80 91 01 02 	lds	r24, 0x0201
     52e:	98 17       	cp	r25, r24
     530:	09 f4       	brne	.+2      	; 0x534 <move_as_global+0x54>
     532:	7d c0       	rjmp	.+250    	; 0x62e <move_as_global+0x14e>
			goto move_as_global_continue;
		
		switch(direction)
     534:	80 91 04 02 	lds	r24, 0x0204
     538:	80 35       	cpi	r24, 0x50	; 80
     53a:	09 f4       	brne	.+2      	; 0x53e <move_as_global+0x5e>
     53c:	88 c0       	rjmp	.+272    	; 0x64e <move_as_global+0x16e>
     53e:	18 f4       	brcc	.+6      	; 0x546 <move_as_global+0x66>
     540:	8e 34       	cpi	r24, 0x4E	; 78
     542:	41 f0       	breq	.+16     	; 0x554 <move_as_global+0x74>
     544:	94 c0       	rjmp	.+296    	; 0x66e <move_as_global+0x18e>
     546:	8e 36       	cpi	r24, 0x6E	; 110
     548:	09 f4       	brne	.+2      	; 0x54c <move_as_global+0x6c>
     54a:	a1 c0       	rjmp	.+322    	; 0x68e <move_as_global+0x1ae>
     54c:	80 37       	cpi	r24, 0x70	; 112
     54e:	09 f4       	brne	.+2      	; 0x552 <move_as_global+0x72>
     550:	9e c0       	rjmp	.+316    	; 0x68e <move_as_global+0x1ae>
     552:	8d c0       	rjmp	.+282    	; 0x66e <move_as_global+0x18e>
			default:
				rad = 0;
				break;
		}
	
		switch(speed)
     554:	80 91 02 02 	lds	r24, 0x0202
     558:	80 35       	cpi	r24, 0x50	; 80
     55a:	29 f1       	breq	.+74     	; 0x5a6 <move_as_global+0xc6>
     55c:	18 f4       	brcc	.+6      	; 0x564 <move_as_global+0x84>
     55e:	8e 34       	cpi	r24, 0x4E	; 78
     560:	f1 f1       	breq	.+124    	; 0x5de <move_as_global+0xfe>
     562:	2f c0       	rjmp	.+94     	; 0x5c2 <move_as_global+0xe2>
     564:	8e 36       	cpi	r24, 0x6E	; 110
     566:	19 f0       	breq	.+6      	; 0x56e <move_as_global+0x8e>
     568:	80 37       	cpi	r24, 0x70	; 112
     56a:	79 f0       	breq	.+30     	; 0x58a <move_as_global+0xaa>
     56c:	2a c0       	rjmp	.+84     	; 0x5c2 <move_as_global+0xe2>
			goto move_as_global_continue;
		
		switch(direction)
		{
			case NEGATIVE_HIGH:
				rad = -1;
     56e:	6d 2f       	mov	r22, r29
     570:	7c 2f       	mov	r23, r28
     572:	08 c0       	rjmp	.+16     	; 0x584 <move_as_global+0xa4>
				break;
			case POSITIVE_LOW:
				rad = 500;
				break;
			case POSITIVE_HIGH:
				rad = 1;
     574:	66 2d       	mov	r22, r6
     576:	77 2d       	mov	r23, r7
     578:	05 c0       	rjmp	.+10     	; 0x584 <move_as_global+0xa4>
				break;
			case NOT_MOVING:
			default:
				rad = 0;
     57a:	6c 2d       	mov	r22, r12
     57c:	7d 2d       	mov	r23, r13
     57e:	02 c0       	rjmp	.+4      	; 0x584 <move_as_global+0xa4>
		{
			case NEGATIVE_HIGH:
				rad = -1;
				break;
			case NEGATIVE_LOW:
				rad = 500;
     580:	6e 2d       	mov	r22, r14
     582:	7f 2d       	mov	r23, r15
		{
			case NEGATIVE_HIGH:
				vel = -500;
				break;
			case NEGATIVE_LOW:
				vel = -250;
     584:	88 2d       	mov	r24, r8
     586:	99 2d       	mov	r25, r9
				break;
     588:	2e c0       	rjmp	.+92     	; 0x5e6 <move_as_global+0x106>
			goto move_as_global_continue;
		
		switch(direction)
		{
			case NEGATIVE_HIGH:
				rad = -1;
     58a:	6d 2f       	mov	r22, r29
     58c:	7c 2f       	mov	r23, r28
     58e:	08 c0       	rjmp	.+16     	; 0x5a0 <move_as_global+0xc0>
				break;
			case POSITIVE_LOW:
				rad = 500;
				break;
			case POSITIVE_HIGH:
				rad = 1;
     590:	66 2d       	mov	r22, r6
     592:	77 2d       	mov	r23, r7
     594:	05 c0       	rjmp	.+10     	; 0x5a0 <move_as_global+0xc0>
				break;
			case NOT_MOVING:
			default:
				rad = 0;
     596:	6c 2d       	mov	r22, r12
     598:	7d 2d       	mov	r23, r13
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <move_as_global+0xc0>
		{
			case NEGATIVE_HIGH:
				rad = -1;
				break;
			case NEGATIVE_LOW:
				rad = 500;
     59c:	6e 2d       	mov	r22, r14
     59e:	7f 2d       	mov	r23, r15
				break;
			case NEGATIVE_LOW:
				vel = -250;
				break;
			case POSITIVE_LOW:
				vel = 250;
     5a0:	80 2f       	mov	r24, r16
     5a2:	91 2f       	mov	r25, r17
				break;
     5a4:	20 c0       	rjmp	.+64     	; 0x5e6 <move_as_global+0x106>
			goto move_as_global_continue;
		
		switch(direction)
		{
			case NEGATIVE_HIGH:
				rad = -1;
     5a6:	6d 2f       	mov	r22, r29
     5a8:	7c 2f       	mov	r23, r28
     5aa:	08 c0       	rjmp	.+16     	; 0x5bc <move_as_global+0xdc>
				break;
			case POSITIVE_LOW:
				rad = 500;
				break;
			case POSITIVE_HIGH:
				rad = 1;
     5ac:	66 2d       	mov	r22, r6
     5ae:	77 2d       	mov	r23, r7
     5b0:	05 c0       	rjmp	.+10     	; 0x5bc <move_as_global+0xdc>
				break;
			case NOT_MOVING:
			default:
				rad = 0;
     5b2:	6c 2d       	mov	r22, r12
     5b4:	7d 2d       	mov	r23, r13
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <move_as_global+0xdc>
		{
			case NEGATIVE_HIGH:
				rad = -1;
				break;
			case NEGATIVE_LOW:
				rad = 500;
     5b8:	6e 2d       	mov	r22, r14
     5ba:	7f 2d       	mov	r23, r15
				break;
			case POSITIVE_LOW:
				vel = 250;
				break;
			case POSITIVE_HIGH:
				vel = 500;
     5bc:	8e 2d       	mov	r24, r14
     5be:	9f 2d       	mov	r25, r15
				break;
     5c0:	12 c0       	rjmp	.+36     	; 0x5e6 <move_as_global+0x106>
			goto move_as_global_continue;
		
		switch(direction)
		{
			case NEGATIVE_HIGH:
				rad = -1;
     5c2:	6d 2f       	mov	r22, r29
     5c4:	7c 2f       	mov	r23, r28
     5c6:	08 c0       	rjmp	.+16     	; 0x5d8 <move_as_global+0xf8>
				break;
			case POSITIVE_LOW:
				rad = 500;
				break;
			case POSITIVE_HIGH:
				rad = 1;
     5c8:	66 2d       	mov	r22, r6
     5ca:	77 2d       	mov	r23, r7
     5cc:	05 c0       	rjmp	.+10     	; 0x5d8 <move_as_global+0xf8>
				break;
			case NOT_MOVING:
			default:
				rad = 0;
     5ce:	6c 2d       	mov	r22, r12
     5d0:	7d 2d       	mov	r23, r13
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <move_as_global+0xf8>
		{
			case NEGATIVE_HIGH:
				rad = -1;
				break;
			case NEGATIVE_LOW:
				rad = 500;
     5d4:	6e 2d       	mov	r22, r14
     5d6:	7f 2d       	mov	r23, r15
			case POSITIVE_HIGH:
				vel = 500;
				break;
			case NOT_MOVING:
			default:
				vel = 0;
     5d8:	8c 2d       	mov	r24, r12
     5da:	9d 2d       	mov	r25, r13
				break;
     5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <move_as_global+0x106>
			goto move_as_global_continue;
		
		switch(direction)
		{
			case NEGATIVE_HIGH:
				rad = -1;
     5de:	6d 2f       	mov	r22, r29
     5e0:	7c 2f       	mov	r23, r28
		}
	
		switch(speed)
		{
			case NEGATIVE_HIGH:
				vel = -500;
     5e2:	8a 2d       	mov	r24, r10
     5e4:	9b 2d       	mov	r25, r11
			default:
				vel = 0;
				break;
		}
	
		if (rad == 1 || rad == -1) {
     5e6:	61 30       	cpi	r22, 0x01	; 1
     5e8:	71 05       	cpc	r23, r1
     5ea:	61 f0       	breq	.+24     	; 0x604 <move_as_global+0x124>
     5ec:	6f 3f       	cpi	r22, 0xFF	; 255
     5ee:	2f ef       	ldi	r18, 0xFF	; 255
     5f0:	72 07       	cpc	r23, r18
     5f2:	59 f0       	breq	.+22     	; 0x60a <move_as_global+0x12a>
			vel = 250;
		} else if (rad == 0 && vel == 0) {
     5f4:	61 15       	cp	r22, r1
     5f6:	71 05       	cpc	r23, r1
     5f8:	c9 f4       	brne	.+50     	; 0x62c <move_as_global+0x14c>
     5fa:	00 97       	sbiw	r24, 0x00	; 0
     5fc:	b9 f4       	brne	.+46     	; 0x62c <move_as_global+0x14c>
			vel = 250;
     5fe:	80 2f       	mov	r24, r16
     600:	91 2f       	mov	r25, r17
     602:	14 c0       	rjmp	.+40     	; 0x62c <move_as_global+0x14c>
				vel = 0;
				break;
		}
	
		if (rad == 1 || rad == -1) {
			vel = 250;
     604:	80 2f       	mov	r24, r16
     606:	91 2f       	mov	r25, r17
     608:	11 c0       	rjmp	.+34     	; 0x62c <move_as_global+0x14c>
     60a:	80 2f       	mov	r24, r16
     60c:	91 2f       	mov	r25, r17
     60e:	0e c0       	rjmp	.+28     	; 0x62c <move_as_global+0x14c>
				break;
			case POSITIVE_LOW:
				rad = 500;
				break;
			case POSITIVE_HIGH:
				rad = 1;
     610:	66 2d       	mov	r22, r6
     612:	77 2d       	mov	r23, r7
				vel = 0;
				break;
		}
	
		if (rad == 1 || rad == -1) {
			vel = 250;
     614:	80 2f       	mov	r24, r16
     616:	91 2f       	mov	r25, r17
     618:	09 c0       	rjmp	.+18     	; 0x62c <move_as_global+0x14c>
			case POSITIVE_HIGH:
				rad = 1;
				break;
			case NOT_MOVING:
			default:
				rad = 0;
     61a:	6c 2d       	mov	r22, r12
     61c:	7d 2d       	mov	r23, r13
		}
	
		switch(speed)
		{
			case NEGATIVE_HIGH:
				vel = -500;
     61e:	8a 2d       	mov	r24, r10
     620:	9b 2d       	mov	r25, r11
     622:	04 c0       	rjmp	.+8      	; 0x62c <move_as_global+0x14c>
		{
			case NEGATIVE_HIGH:
				rad = -1;
				break;
			case NEGATIVE_LOW:
				rad = 500;
     624:	6e 2d       	mov	r22, r14
     626:	7f 2d       	mov	r23, r15
		}
	
		switch(speed)
		{
			case NEGATIVE_HIGH:
				vel = -500;
     628:	8a 2d       	mov	r24, r10
     62a:	9b 2d       	mov	r25, r11
			vel = 250;
		} else if (rad == 0 && vel == 0) {
			vel = 250;
		}
	
		drive(vel, rad);
     62c:	24 df       	rcall	.-440    	; 0x476 <drive>

move_as_global_continue:
		if (fire == HOLD)
     62e:	80 91 00 02 	lds	r24, 0x0200
     632:	88 34       	cpi	r24, 0x48	; 72
     634:	11 f4       	brne	.+4      	; 0x63a <move_as_global+0x15a>
			PORTB &= ~(1<<PB2);	//pin 51 off
     636:	2a 98       	cbi	0x05, 2	; 5
     638:	05 c0       	rjmp	.+10     	; 0x644 <move_as_global+0x164>
		else
		if (fire == FIRE)
     63a:	80 91 00 02 	lds	r24, 0x0200
     63e:	86 34       	cpi	r24, 0x46	; 70
     640:	09 f4       	brne	.+2      	; 0x644 <move_as_global+0x164>
			PORTB |= (1<<PB2);	//pin 51 on
     642:	2a 9a       	sbi	0x05, 2	; 5
		Task_Sleep(3);
     644:	83 e0       	ldi	r24, 0x03	; 3
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 42 0b 	call	0x1684	; 0x1684 <Task_Sleep>
	}
     64c:	66 cf       	rjmp	.-308    	; 0x51a <move_as_global+0x3a>
			default:
				rad = 0;
				break;
		}
	
		switch(speed)
     64e:	80 91 02 02 	lds	r24, 0x0202
     652:	80 35       	cpi	r24, 0x50	; 80
     654:	09 f4       	brne	.+2      	; 0x658 <move_as_global+0x178>
     656:	aa cf       	rjmp	.-172    	; 0x5ac <move_as_global+0xcc>
     658:	18 f4       	brcc	.+6      	; 0x660 <move_as_global+0x180>
     65a:	8e 34       	cpi	r24, 0x4E	; 78
     65c:	c9 f2       	breq	.-78     	; 0x610 <move_as_global+0x130>
     65e:	b4 cf       	rjmp	.-152    	; 0x5c8 <move_as_global+0xe8>
     660:	8e 36       	cpi	r24, 0x6E	; 110
     662:	09 f4       	brne	.+2      	; 0x666 <move_as_global+0x186>
     664:	87 cf       	rjmp	.-242    	; 0x574 <move_as_global+0x94>
     666:	80 37       	cpi	r24, 0x70	; 112
     668:	09 f4       	brne	.+2      	; 0x66c <move_as_global+0x18c>
     66a:	92 cf       	rjmp	.-220    	; 0x590 <move_as_global+0xb0>
     66c:	ad cf       	rjmp	.-166    	; 0x5c8 <move_as_global+0xe8>
     66e:	80 91 02 02 	lds	r24, 0x0202
     672:	80 35       	cpi	r24, 0x50	; 80
     674:	09 f4       	brne	.+2      	; 0x678 <move_as_global+0x198>
     676:	9d cf       	rjmp	.-198    	; 0x5b2 <move_as_global+0xd2>
     678:	18 f4       	brcc	.+6      	; 0x680 <move_as_global+0x1a0>
     67a:	8e 34       	cpi	r24, 0x4E	; 78
     67c:	71 f2       	breq	.-100    	; 0x61a <move_as_global+0x13a>
     67e:	a7 cf       	rjmp	.-178    	; 0x5ce <move_as_global+0xee>
     680:	8e 36       	cpi	r24, 0x6E	; 110
     682:	09 f4       	brne	.+2      	; 0x686 <move_as_global+0x1a6>
     684:	7a cf       	rjmp	.-268    	; 0x57a <move_as_global+0x9a>
     686:	80 37       	cpi	r24, 0x70	; 112
     688:	09 f4       	brne	.+2      	; 0x68c <move_as_global+0x1ac>
     68a:	85 cf       	rjmp	.-246    	; 0x596 <move_as_global+0xb6>
     68c:	a0 cf       	rjmp	.-192    	; 0x5ce <move_as_global+0xee>
     68e:	80 91 02 02 	lds	r24, 0x0202
     692:	80 35       	cpi	r24, 0x50	; 80
     694:	09 f4       	brne	.+2      	; 0x698 <move_as_global+0x1b8>
     696:	90 cf       	rjmp	.-224    	; 0x5b8 <move_as_global+0xd8>
     698:	18 f4       	brcc	.+6      	; 0x6a0 <move_as_global+0x1c0>
     69a:	8e 34       	cpi	r24, 0x4E	; 78
     69c:	19 f2       	breq	.-122    	; 0x624 <move_as_global+0x144>
     69e:	9a cf       	rjmp	.-204    	; 0x5d4 <move_as_global+0xf4>
     6a0:	8e 36       	cpi	r24, 0x6E	; 110
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <move_as_global+0x1c6>
     6a4:	6d cf       	rjmp	.-294    	; 0x580 <move_as_global+0xa0>
     6a6:	80 37       	cpi	r24, 0x70	; 112
     6a8:	09 f4       	brne	.+2      	; 0x6ac <move_as_global+0x1cc>
     6aa:	78 cf       	rjmp	.-272    	; 0x59c <move_as_global+0xbc>
     6ac:	93 cf       	rjmp	.-218    	; 0x5d4 <move_as_global+0xf4>

000006ae <isHit>:
	}
}

int isHit()
{
	uint16_t val = readadc(PHOTORESIS_PIN); 
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	fd dd       	rcall	.-1030   	; 0x2ac <readadc>
	
	//uart0_sendstr("PS:\n");
	//uart0_sendbyte((uint8_t)val);
	return val > photores_thres;
     6b2:	21 e0       	ldi	r18, 0x01	; 1
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	40 91 1f 16 	lds	r20, 0x161F
     6ba:	50 91 20 16 	lds	r21, 0x1620
     6be:	48 17       	cp	r20, r24
     6c0:	59 07       	cpc	r21, r25
     6c2:	10 f0       	brcs	.+4      	; 0x6c8 <isHit+0x1a>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
}
     6c8:	c9 01       	movw	r24, r18
     6ca:	08 95       	ret

000006cc <handle_sensors>:
		Task_Sleep(2);						//End of upper half of handle_sensor
		
		//Check if laser has hit our photosensor
		if (isHit()) 
		{
			isDead = 1;
     6cc:	d1 e0       	ldi	r29, 0x01	; 1
	
	while(1)
	{
		/*Queries the sensors*/
		
		uart1_sendbyte(149);				//Opcode for Query List
     6ce:	85 e9       	ldi	r24, 0x95	; 149
     6d0:	0e 94 84 0b 	call	0x1708	; 0x1708 <uart1_sendbyte>
		uart1_sendbyte(SENSORS_TO_QUERY);	//Query will send three sensors packets
     6d4:	82 e0       	ldi	r24, 0x02	; 2
     6d6:	0e 94 84 0b 	call	0x1708	; 0x1708 <uart1_sendbyte>
		uart1_sendbyte(7);					//Packet 7: Bump/Wheeldrop detection
     6da:	87 e0       	ldi	r24, 0x07	; 7
     6dc:	0e 94 84 0b 	call	0x1708	; 0x1708 <uart1_sendbyte>
		uart1_sendbyte(13);					//Packet 13: Virtual wall seen?
     6e0:	8d e0       	ldi	r24, 0x0D	; 13
     6e2:	0e 94 84 0b 	call	0x1708	; 0x1708 <uart1_sendbyte>
	
		Task_Sleep(2);						//End of upper half of handle_sensor
     6e6:	82 e0       	ldi	r24, 0x02	; 2
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	cc d7       	rcall	.+3992   	; 0x1684 <Task_Sleep>
		
		//Check if laser has hit our photosensor
		if (isHit()) 
     6ec:	e0 df       	rcall	.-64     	; 0x6ae <isHit>
     6ee:	89 2b       	or	r24, r25
     6f0:	09 f4       	brne	.+2      	; 0x6f4 <handle_sensors+0x28>
     6f2:	88 c0       	rjmp	.+272    	; 0x804 <handle_sensors+0x138>
		{
			isDead = 1;
     6f4:	d0 93 2c 02 	sts	0x022C, r29
			drive(0,0);
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	ba de       	rcall	.-652    	; 0x476 <drive>
			beep();
     702:	55 de       	rcall	.-854    	; 0x3ae <beep>
			
			//Write DEAD on the LEDs
			uart1_sendbyte(164);
     704:	84 ea       	ldi	r24, 0xA4	; 164
     706:	0e 94 84 0b 	call	0x1708	; 0x1708 <uart1_sendbyte>
			uart1_sendbyte(68);
     70a:	84 e4       	ldi	r24, 0x44	; 68
     70c:	fd d7       	rcall	.+4090   	; 0x1708 <uart1_sendbyte>
			uart1_sendbyte(69);
     70e:	85 e4       	ldi	r24, 0x45	; 69
     710:	fb d7       	rcall	.+4086   	; 0x1708 <uart1_sendbyte>
			uart1_sendbyte(65);
     712:	81 e4       	ldi	r24, 0x41	; 65
     714:	f9 d7       	rcall	.+4082   	; 0x1708 <uart1_sendbyte>
			uart1_sendbyte(68);
     716:	84 e4       	ldi	r24, 0x44	; 68
     718:	f7 d7       	rcall	.+4078   	; 0x1708 <uart1_sendbyte>
			
			//Send the start command to go to passive mode
			uart1_sendbyte(128);	
     71a:	80 e8       	ldi	r24, 0x80	; 128
     71c:	f5 d7       	rcall	.+4074   	; 0x1708 <uart1_sendbyte>
     71e:	72 c0       	rjmp	.+228    	; 0x804 <handle_sensors+0x138>
		/*BELOW SENSOR ARE INTENDED FOR MANUAL CONTROLS*/
	
		//If the left bumper has been hit, back up a bit and then rotate 90 degrees to the right
		if(bytes[0] == 1)
		{
			beep();
     720:	46 de       	rcall	.-884    	; 0x3ae <beep>
			drive(-200, DRIVE_STRAIGHT);
     722:	6f ef       	ldi	r22, 0xFF	; 255
     724:	7f e7       	ldi	r23, 0x7F	; 127
     726:	88 e3       	ldi	r24, 0x38	; 56
     728:	9f ef       	ldi	r25, 0xFF	; 255
     72a:	a5 de       	rcall	.-694    	; 0x476 <drive>
     72c:	2f ef       	ldi	r18, 0xFF	; 255
     72e:	83 ec       	ldi	r24, 0xC3	; 195
     730:	99 e0       	ldi	r25, 0x09	; 9
     732:	21 50       	subi	r18, 0x01	; 1
     734:	80 40       	sbci	r24, 0x00	; 0
     736:	90 40       	sbci	r25, 0x00	; 0
     738:	e1 f7       	brne	.-8      	; 0x732 <handle_sensors+0x66>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <handle_sensors+0x70>
     73c:	00 00       	nop
			_delay_ms(200);
			drive(200,COUNTER_CLOCKWISE_TURN);
     73e:	61 e0       	ldi	r22, 0x01	; 1
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	88 ec       	ldi	r24, 0xC8	; 200
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	97 de       	rcall	.-722    	; 0x476 <drive>
     748:	2f ef       	ldi	r18, 0xFF	; 255
     74a:	83 ed       	ldi	r24, 0xD3	; 211
     74c:	90 e3       	ldi	r25, 0x30	; 48
     74e:	21 50       	subi	r18, 0x01	; 1
     750:	80 40       	sbci	r24, 0x00	; 0
     752:	90 40       	sbci	r25, 0x00	; 0
     754:	e1 f7       	brne	.-8      	; 0x74e <handle_sensors+0x82>
     756:	00 c0       	rjmp	.+0      	; 0x758 <handle_sensors+0x8c>
     758:	00 00       	nop
			_delay_ms(1000);
			drive(0,0);
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	89 de       	rcall	.-750    	; 0x476 <drive>
     764:	4b c0       	rjmp	.+150    	; 0x7fc <handle_sensors+0x130>
		}
		//If the right bumper has been hit, back up a bit and then rotate 90 degrees  to the right
		else if(bytes[0] == 2)
     766:	92 30       	cpi	r25, 0x02	; 2
     768:	19 f5       	brne	.+70     	; 0x7b0 <handle_sensors+0xe4>
		{
			beep();
     76a:	21 de       	rcall	.-958    	; 0x3ae <beep>
			drive(-200, DRIVE_STRAIGHT);
     76c:	6f ef       	ldi	r22, 0xFF	; 255
     76e:	7f e7       	ldi	r23, 0x7F	; 127
     770:	88 e3       	ldi	r24, 0x38	; 56
     772:	9f ef       	ldi	r25, 0xFF	; 255
     774:	80 de       	rcall	.-768    	; 0x476 <drive>
     776:	2f ef       	ldi	r18, 0xFF	; 255
     778:	83 ec       	ldi	r24, 0xC3	; 195
     77a:	99 e0       	ldi	r25, 0x09	; 9
     77c:	21 50       	subi	r18, 0x01	; 1
     77e:	80 40       	sbci	r24, 0x00	; 0
     780:	90 40       	sbci	r25, 0x00	; 0
     782:	e1 f7       	brne	.-8      	; 0x77c <handle_sensors+0xb0>
     784:	00 c0       	rjmp	.+0      	; 0x786 <handle_sensors+0xba>
     786:	00 00       	nop
			_delay_ms(200);
			drive(200,CLOCKWISE_TURN);
     788:	6f ef       	ldi	r22, 0xFF	; 255
     78a:	7f ef       	ldi	r23, 0xFF	; 255
     78c:	88 ec       	ldi	r24, 0xC8	; 200
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	72 de       	rcall	.-796    	; 0x476 <drive>
     792:	2f ef       	ldi	r18, 0xFF	; 255
     794:	83 ed       	ldi	r24, 0xD3	; 211
     796:	90 e3       	ldi	r25, 0x30	; 48
     798:	21 50       	subi	r18, 0x01	; 1
     79a:	80 40       	sbci	r24, 0x00	; 0
     79c:	90 40       	sbci	r25, 0x00	; 0
     79e:	e1 f7       	brne	.-8      	; 0x798 <handle_sensors+0xcc>
     7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <handle_sensors+0xd6>
     7a2:	00 00       	nop
			_delay_ms(1000);
			drive(0,0);
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	64 de       	rcall	.-824    	; 0x476 <drive>
     7ae:	26 c0       	rjmp	.+76     	; 0x7fc <handle_sensors+0x130>
		}
		//If the middle has been hit or virtual wall has been detected, back up a bit and then rotate 180 degrees 
		
		//else if (bytes[0] == 3)
		else if (bytes[0] == 3 || bytes[1] == 1)
     7b0:	93 30       	cpi	r25, 0x03	; 3
     7b2:	11 f0       	breq	.+4      	; 0x7b8 <handle_sensors+0xec>
     7b4:	81 30       	cpi	r24, 0x01	; 1
     7b6:	11 f5       	brne	.+68     	; 0x7fc <handle_sensors+0x130>
		{
			beep();
     7b8:	fa dd       	rcall	.-1036   	; 0x3ae <beep>
			drive(-200, DRIVE_STRAIGHT);
     7ba:	6f ef       	ldi	r22, 0xFF	; 255
     7bc:	7f e7       	ldi	r23, 0x7F	; 127
     7be:	88 e3       	ldi	r24, 0x38	; 56
     7c0:	9f ef       	ldi	r25, 0xFF	; 255
     7c2:	59 de       	rcall	.-846    	; 0x476 <drive>
     7c4:	2f ef       	ldi	r18, 0xFF	; 255
     7c6:	83 ec       	ldi	r24, 0xC3	; 195
     7c8:	99 e0       	ldi	r25, 0x09	; 9
     7ca:	21 50       	subi	r18, 0x01	; 1
     7cc:	80 40       	sbci	r24, 0x00	; 0
     7ce:	90 40       	sbci	r25, 0x00	; 0
     7d0:	e1 f7       	brne	.-8      	; 0x7ca <handle_sensors+0xfe>
     7d2:	00 c0       	rjmp	.+0      	; 0x7d4 <handle_sensors+0x108>
     7d4:	00 00       	nop
			_delay_ms(200);
			drive(200,COUNTER_CLOCKWISE_TURN);
     7d6:	61 e0       	ldi	r22, 0x01	; 1
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	88 ec       	ldi	r24, 0xC8	; 200
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	4b de       	rcall	.-874    	; 0x476 <drive>
     7e0:	2f ef       	ldi	r18, 0xFF	; 255
     7e2:	87 ea       	ldi	r24, 0xA7	; 167
     7e4:	91 e6       	ldi	r25, 0x61	; 97
     7e6:	21 50       	subi	r18, 0x01	; 1
     7e8:	80 40       	sbci	r24, 0x00	; 0
     7ea:	90 40       	sbci	r25, 0x00	; 0
     7ec:	e1 f7       	brne	.-8      	; 0x7e6 <handle_sensors+0x11a>
     7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <handle_sensors+0x124>
     7f0:	00 00       	nop
			_delay_ms(2000);
			drive(0,0);
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	3d de       	rcall	.-902    	; 0x476 <drive>
		}
	
		Task_Sleep(3);
     7fc:	83 e0       	ldi	r24, 0x03	; 3
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	41 d7       	rcall	.+3714   	; 0x1684 <Task_Sleep>
	}
     802:	65 cf       	rjmp	.-310    	; 0x6ce <handle_sensors+0x2>
			//Task_Terminate();
		}
	
		//Read sensor data returned by the roomba
		for(i=0; i<SENSORS_TO_QUERY + TWO_BYTE_SENSORS; i++)
			bytes[i] = uart1_recvbyte();		//Read a byte returned by the robot
     804:	89 d7       	rcall	.+3858   	; 0x1718 <uart1_recvbyte>
     806:	c8 2f       	mov	r28, r24
     808:	87 d7       	rcall	.+3854   	; 0x1718 <uart1_recvbyte>
		*/
	
		/*BELOW SENSOR ARE INTENDED FOR MANUAL CONTROLS*/
	
		//If the left bumper has been hit, back up a bit and then rotate 90 degrees to the right
		if(bytes[0] == 1)
     80a:	9c 2f       	mov	r25, r28
     80c:	c1 30       	cpi	r28, 0x01	; 1
     80e:	09 f0       	breq	.+2      	; 0x812 <handle_sensors+0x146>
     810:	aa cf       	rjmp	.-172    	; 0x766 <handle_sensors+0x9a>
     812:	86 cf       	rjmp	.-244    	; 0x720 <handle_sensors+0x54>

00000814 <a_main>:
	}
}

void a_main()
{
	DDRB |= (1<<PB2);	// pin 51 as ouput	
     814:	22 9a       	sbi	0x04, 2	; 4
	OS_Init();
     816:	51 d3       	rcall	.+1698   	; 0xeba <OS_Init>
	
	InitADC();
     818:	3e dd       	rcall	.-1412   	; 0x296 <InitADC>
	uart0_init();		//UART0 is used for BT
     81a:	4c d7       	rcall	.+3736   	; 0x16b4 <uart0_init>
	uart1_init();		//UART1 is used to communicate with the robot
     81c:	5c d7       	rcall	.+3768   	; 0x16d6 <uart1_init>
	roomba_init();
     81e:	12 de       	rcall	.-988    	; 0x444 <roomba_init>
	beep();
     820:	c6 dd       	rcall	.-1140   	; 0x3ae <beep>
	
	Task_Create(receive_and_update, 4, 0);
     822:	40 e0       	ldi	r20, 0x00	; 0
     824:	50 e0       	ldi	r21, 0x00	; 0
     826:	64 e0       	ldi	r22, 0x04	; 4
     828:	8a e6       	ldi	r24, 0x6A	; 106
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	f3 d6       	rcall	.+3558   	; 0x1614 <Task_Create>
	Task_Create(move_as_global, 5, 0);
     82e:	40 e0       	ldi	r20, 0x00	; 0
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	65 e0       	ldi	r22, 0x05	; 5
     834:	80 e7       	ldi	r24, 0x70	; 112
     836:	92 e0       	ldi	r25, 0x02	; 2
     838:	ed d6       	rcall	.+3546   	; 0x1614 <Task_Create>
	Task_Create(handle_sensors, 3, 0);
     83a:	40 e0       	ldi	r20, 0x00	; 0
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	63 e0       	ldi	r22, 0x03	; 3
     840:	86 e6       	ldi	r24, 0x66	; 102
     842:	93 e0       	ldi	r25, 0x03	; 3
     844:	e7 d6       	rcall	.+3534   	; 0x1614 <Task_Create>
	
	OS_Start();
     846:	ab c3       	rjmp	.+1878   	; 0xf9e <OS_Start>
     848:	08 95       	ret

0000084a <findProcessByPID>:
	
	if(e1 == NULL) 
		return 0;
		
	return e1->count;	
}
     84a:	18 16       	cp	r1, r24
     84c:	19 06       	cpc	r1, r25
     84e:	84 f5       	brge	.+96     	; 0x8b0 <findProcessByPID+0x66>
     850:	20 91 3f 05 	lds	r18, 0x053F
     854:	30 91 40 05 	lds	r19, 0x0540
     858:	28 17       	cp	r18, r24
     85a:	39 07       	cpc	r19, r25
     85c:	99 f0       	breq	.+38     	; 0x884 <findProcessByPID+0x3a>
     85e:	21 e0       	ldi	r18, 0x01	; 1
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	6e e0       	ldi	r22, 0x0E	; 14
     864:	71 e0       	ldi	r23, 0x01	; 1
     866:	26 9f       	mul	r18, r22
     868:	f0 01       	movw	r30, r0
     86a:	27 9f       	mul	r18, r23
     86c:	f0 0d       	add	r31, r0
     86e:	36 9f       	mul	r19, r22
     870:	f0 0d       	add	r31, r0
     872:	11 24       	eor	r1, r1
     874:	e1 5c       	subi	r30, 0xC1	; 193
     876:	fa 4f       	sbci	r31, 0xFA	; 250
     878:	40 81       	ld	r20, Z
     87a:	51 81       	ldd	r21, Z+1	; 0x01
     87c:	48 17       	cp	r20, r24
     87e:	59 07       	cpc	r21, r25
     880:	79 f4       	brne	.+30     	; 0x8a0 <findProcessByPID+0x56>
     882:	02 c0       	rjmp	.+4      	; 0x888 <findProcessByPID+0x3e>
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	4e e0       	ldi	r20, 0x0E	; 14
     88a:	51 e0       	ldi	r21, 0x01	; 1
     88c:	24 9f       	mul	r18, r20
     88e:	c0 01       	movw	r24, r0
     890:	25 9f       	mul	r18, r21
     892:	90 0d       	add	r25, r0
     894:	34 9f       	mul	r19, r20
     896:	90 0d       	add	r25, r0
     898:	11 24       	eor	r1, r1
     89a:	81 5c       	subi	r24, 0xC1	; 193
     89c:	9a 4f       	sbci	r25, 0xFA	; 250
     89e:	08 95       	ret
     8a0:	2f 5f       	subi	r18, 0xFF	; 255
     8a2:	3f 4f       	sbci	r19, 0xFF	; 255
     8a4:	20 31       	cpi	r18, 0x10	; 16
     8a6:	31 05       	cpc	r19, r1
     8a8:	f1 f6       	brne	.-68     	; 0x866 <findProcessByPID+0x1c>
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	08 95       	ret
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	08 95       	ret

000008b6 <findEventByEventID>:
     8b6:	00 97       	sbiw	r24, 0x00	; 0
     8b8:	51 f0       	breq	.+20     	; 0x8ce <findEventByEventID+0x18>
     8ba:	20 91 0f 05 	lds	r18, 0x050F
     8be:	30 91 10 05 	lds	r19, 0x0510
     8c2:	28 17       	cp	r18, r24
     8c4:	39 07       	cpc	r19, r25
     8c6:	c1 f0       	breq	.+48     	; 0x8f8 <findEventByEventID+0x42>
     8c8:	21 e0       	ldi	r18, 0x01	; 1
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	06 c0       	rjmp	.+12     	; 0x8da <findEventByEventID+0x24>
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	80 93 29 16 	sts	0x1629, r24
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	08 95       	ret
     8da:	f9 01       	movw	r30, r18
     8dc:	ee 0f       	add	r30, r30
     8de:	ff 1f       	adc	r31, r31
     8e0:	e2 0f       	add	r30, r18
     8e2:	f3 1f       	adc	r31, r19
     8e4:	ee 0f       	add	r30, r30
     8e6:	ff 1f       	adc	r31, r31
     8e8:	e1 5f       	subi	r30, 0xF1	; 241
     8ea:	fa 4f       	sbci	r31, 0xFA	; 250
     8ec:	40 81       	ld	r20, Z
     8ee:	51 81       	ldd	r21, Z+1	; 0x01
     8f0:	48 17       	cp	r20, r24
     8f2:	59 07       	cpc	r21, r25
     8f4:	69 f4       	brne	.+26     	; 0x910 <findEventByEventID+0x5a>
     8f6:	02 c0       	rjmp	.+4      	; 0x8fc <findEventByEventID+0x46>
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	c9 01       	movw	r24, r18
     8fe:	88 0f       	add	r24, r24
     900:	99 1f       	adc	r25, r25
     902:	82 0f       	add	r24, r18
     904:	93 1f       	adc	r25, r19
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	81 5f       	subi	r24, 0xF1	; 241
     90c:	9a 4f       	sbci	r25, 0xFA	; 250
     90e:	08 95       	ret
     910:	2f 5f       	subi	r18, 0xFF	; 255
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	28 30       	cpi	r18, 0x08	; 8
     916:	31 05       	cpc	r19, r1
     918:	01 f7       	brne	.-64     	; 0x8da <findEventByEventID+0x24>
     91a:	89 e0       	ldi	r24, 0x09	; 9
     91c:	80 93 29 16 	sts	0x1629, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	08 95       	ret

00000926 <findMutexByMutexID>:
     926:	00 97       	sbiw	r24, 0x00	; 0
     928:	59 f0       	breq	.+22     	; 0x940 <findMutexByMutexID+0x1a>
     92a:	20 91 37 02 	lds	r18, 0x0237
     92e:	30 91 38 02 	lds	r19, 0x0238
     932:	28 17       	cp	r18, r24
     934:	39 07       	cpc	r19, r25
     936:	b9 f0       	breq	.+46     	; 0x966 <findMutexByMutexID+0x40>
     938:	21 e0       	ldi	r18, 0x01	; 1
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	6b e5       	ldi	r22, 0x5B	; 91
     93e:	06 c0       	rjmp	.+12     	; 0x94c <findMutexByMutexID+0x26>
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	80 93 29 16 	sts	0x1629, r24
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	08 95       	ret
     94c:	62 9f       	mul	r22, r18
     94e:	f0 01       	movw	r30, r0
     950:	63 9f       	mul	r22, r19
     952:	f0 0d       	add	r31, r0
     954:	11 24       	eor	r1, r1
     956:	e9 5c       	subi	r30, 0xC9	; 201
     958:	fd 4f       	sbci	r31, 0xFD	; 253
     95a:	40 81       	ld	r20, Z
     95c:	51 81       	ldd	r21, Z+1	; 0x01
     95e:	48 17       	cp	r20, r24
     960:	59 07       	cpc	r21, r25
     962:	61 f4       	brne	.+24     	; 0x97c <findMutexByMutexID+0x56>
     964:	02 c0       	rjmp	.+4      	; 0x96a <findMutexByMutexID+0x44>
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	4b e5       	ldi	r20, 0x5B	; 91
     96c:	42 9f       	mul	r20, r18
     96e:	c0 01       	movw	r24, r0
     970:	43 9f       	mul	r20, r19
     972:	90 0d       	add	r25, r0
     974:	11 24       	eor	r1, r1
     976:	89 5c       	subi	r24, 0xC9	; 201
     978:	9d 4f       	sbci	r25, 0xFD	; 253
     97a:	08 95       	ret
     97c:	2f 5f       	subi	r18, 0xFF	; 255
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
     980:	28 30       	cpi	r18, 0x08	; 8
     982:	31 05       	cpc	r19, r1
     984:	19 f7       	brne	.-58     	; 0x94c <findMutexByMutexID+0x26>
     986:	8d e0       	ldi	r24, 0x0D	; 13
     988:	80 93 29 16 	sts	0x1629, r24
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	08 95       	ret

00000992 <__vector_17>:
/*                  ISR FOR HANDLING SLEEP TICKS                        */
/************************************************************************/

//Timer tick ISR
ISR(TIMER1_COMPA_vect)
{
     992:	1f 92       	push	r1
     994:	0f 92       	push	r0
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	0f 92       	push	r0
     99a:	11 24       	eor	r1, r1
     99c:	8f 93       	push	r24
     99e:	9f 93       	push	r25
	++Tick_Count;
     9a0:	80 91 2d 02 	lds	r24, 0x022D
     9a4:	90 91 2e 02 	lds	r25, 0x022E
     9a8:	01 96       	adiw	r24, 0x01	; 1
     9aa:	90 93 2e 02 	sts	0x022E, r25
     9ae:	80 93 2d 02 	sts	0x022D, r24
}
     9b2:	9f 91       	pop	r25
     9b4:	8f 91       	pop	r24
     9b6:	0f 90       	pop	r0
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	0f 90       	pop	r0
     9bc:	1f 90       	pop	r1
     9be:	18 95       	reti

000009c0 <Kernel_Tick_Handler>:
void Kernel_Tick_Handler()
{
	int i;
	
	//No ticks has been issued yet, skipping...
	if(Tick_Count == 0)
     9c0:	80 91 2d 02 	lds	r24, 0x022D
     9c4:	90 91 2e 02 	lds	r25, 0x022E
     9c8:	89 2b       	or	r24, r25
     9ca:	09 f4       	brne	.+2      	; 0x9ce <Kernel_Tick_Handler+0xe>
     9cc:	6f c0       	rjmp	.+222    	; 0xaac <Kernel_Tick_Handler+0xec>
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
		return;
	
	for(i=0; i<MAXTHREAD; i++)
	{
		//Process any active tasks that are sleeping
		if(Process[i].state == SLEEPING)
     9d2:	2e e0       	ldi	r18, 0x0E	; 14
     9d4:	31 e0       	ldi	r19, 0x01	; 1
		{
			//When task_resume is called again, the task will be back into its READY state instead if its sleep ticks expired.
			Process[i].request_arg -= Tick_Count;
			if(Process[i].request_arg <= 0)
			{
				Process[i].last_state = READY;
     9d6:	61 e0       	ldi	r22, 0x01	; 1
		return;
	
	for(i=0; i<MAXTHREAD; i++)
	{
		//Process any active tasks that are sleeping
		if(Process[i].state == SLEEPING)
     9d8:	82 9f       	mul	r24, r18
     9da:	f0 01       	movw	r30, r0
     9dc:	83 9f       	mul	r24, r19
     9de:	f0 0d       	add	r31, r0
     9e0:	92 9f       	mul	r25, r18
     9e2:	f0 0d       	add	r31, r0
     9e4:	11 24       	eor	r1, r1
     9e6:	e1 5c       	subi	r30, 0xC1	; 193
     9e8:	fa 4f       	sbci	r31, 0xFA	; 250
     9ea:	43 81       	ldd	r20, Z+3	; 0x03
     9ec:	44 30       	cpi	r20, 0x04	; 4
     9ee:	29 f5       	brne	.+74     	; 0xa3a <Kernel_Tick_Handler+0x7a>
		{
			//If the current sleeping task's tick count expires, put it back into its READY state
			Process[i].request_arg -= Tick_Count;
     9f0:	a0 91 2d 02 	lds	r26, 0x022D
     9f4:	b0 91 2e 02 	lds	r27, 0x022E
     9f8:	82 9f       	mul	r24, r18
     9fa:	f0 01       	movw	r30, r0
     9fc:	83 9f       	mul	r24, r19
     9fe:	f0 0d       	add	r31, r0
     a00:	92 9f       	mul	r25, r18
     a02:	f0 0d       	add	r31, r0
     a04:	11 24       	eor	r1, r1
     a06:	e1 5c       	subi	r30, 0xC1	; 193
     a08:	fa 4f       	sbci	r31, 0xFA	; 250
     a0a:	46 81       	ldd	r20, Z+6	; 0x06
     a0c:	57 81       	ldd	r21, Z+7	; 0x07
     a0e:	4a 1b       	sub	r20, r26
     a10:	5b 0b       	sbc	r21, r27
     a12:	57 83       	std	Z+7, r21	; 0x07
     a14:	46 83       	std	Z+6, r20	; 0x06
			if(Process[i].request_arg <= 0)
     a16:	46 81       	ldd	r20, Z+6	; 0x06
     a18:	57 81       	ldd	r21, Z+7	; 0x07
     a1a:	14 16       	cp	r1, r20
     a1c:	15 06       	cpc	r1, r21
     a1e:	ec f1       	brlt	.+122    	; 0xa9a <Kernel_Tick_Handler+0xda>
			{
				Process[i].state = READY;
     a20:	82 9f       	mul	r24, r18
     a22:	f0 01       	movw	r30, r0
     a24:	83 9f       	mul	r24, r19
     a26:	f0 0d       	add	r31, r0
     a28:	92 9f       	mul	r25, r18
     a2a:	f0 0d       	add	r31, r0
     a2c:	11 24       	eor	r1, r1
     a2e:	e1 5c       	subi	r30, 0xC1	; 193
     a30:	fa 4f       	sbci	r31, 0xFA	; 250
     a32:	63 83       	std	Z+3, r22	; 0x03
				Process[i].request_arg = 0;
     a34:	17 82       	std	Z+7, r1	; 0x07
     a36:	16 82       	std	Z+6, r1	; 0x06
     a38:	30 c0       	rjmp	.+96     	; 0xa9a <Kernel_Tick_Handler+0xda>
			}
		}
		
		//Process any SUSPENDED tasks that were previously sleeping
		else if(Process[i].last_state == SLEEPING)
     a3a:	82 9f       	mul	r24, r18
     a3c:	f0 01       	movw	r30, r0
     a3e:	83 9f       	mul	r24, r19
     a40:	f0 0d       	add	r31, r0
     a42:	92 9f       	mul	r25, r18
     a44:	f0 0d       	add	r31, r0
     a46:	11 24       	eor	r1, r1
     a48:	e1 5c       	subi	r30, 0xC1	; 193
     a4a:	fa 4f       	sbci	r31, 0xFA	; 250
     a4c:	44 81       	ldd	r20, Z+4	; 0x04
     a4e:	44 30       	cpi	r20, 0x04	; 4
     a50:	21 f5       	brne	.+72     	; 0xa9a <Kernel_Tick_Handler+0xda>
		{
			//When task_resume is called again, the task will be back into its READY state instead if its sleep ticks expired.
			Process[i].request_arg -= Tick_Count;
     a52:	a0 91 2d 02 	lds	r26, 0x022D
     a56:	b0 91 2e 02 	lds	r27, 0x022E
     a5a:	82 9f       	mul	r24, r18
     a5c:	f0 01       	movw	r30, r0
     a5e:	83 9f       	mul	r24, r19
     a60:	f0 0d       	add	r31, r0
     a62:	92 9f       	mul	r25, r18
     a64:	f0 0d       	add	r31, r0
     a66:	11 24       	eor	r1, r1
     a68:	e1 5c       	subi	r30, 0xC1	; 193
     a6a:	fa 4f       	sbci	r31, 0xFA	; 250
     a6c:	46 81       	ldd	r20, Z+6	; 0x06
     a6e:	57 81       	ldd	r21, Z+7	; 0x07
     a70:	4a 1b       	sub	r20, r26
     a72:	5b 0b       	sbc	r21, r27
     a74:	57 83       	std	Z+7, r21	; 0x07
     a76:	46 83       	std	Z+6, r20	; 0x06
			if(Process[i].request_arg <= 0)
     a78:	46 81       	ldd	r20, Z+6	; 0x06
     a7a:	57 81       	ldd	r21, Z+7	; 0x07
     a7c:	14 16       	cp	r1, r20
     a7e:	15 06       	cpc	r1, r21
     a80:	64 f0       	brlt	.+24     	; 0xa9a <Kernel_Tick_Handler+0xda>
			{
				Process[i].last_state = READY;
     a82:	82 9f       	mul	r24, r18
     a84:	f0 01       	movw	r30, r0
     a86:	83 9f       	mul	r24, r19
     a88:	f0 0d       	add	r31, r0
     a8a:	92 9f       	mul	r25, r18
     a8c:	f0 0d       	add	r31, r0
     a8e:	11 24       	eor	r1, r1
     a90:	e1 5c       	subi	r30, 0xC1	; 193
     a92:	fa 4f       	sbci	r31, 0xFA	; 250
     a94:	64 83       	std	Z+4, r22	; 0x04
				Process[i].request_arg = 0;
     a96:	17 82       	std	Z+7, r1	; 0x07
     a98:	16 82       	std	Z+6, r1	; 0x06
	
	//No ticks has been issued yet, skipping...
	if(Tick_Count == 0)
		return;
	
	for(i=0; i<MAXTHREAD; i++)
     a9a:	01 96       	adiw	r24, 0x01	; 1
     a9c:	80 31       	cpi	r24, 0x10	; 16
     a9e:	91 05       	cpc	r25, r1
     aa0:	09 f0       	breq	.+2      	; 0xaa4 <Kernel_Tick_Handler+0xe4>
     aa2:	9a cf       	rjmp	.-204    	; 0x9d8 <Kernel_Tick_Handler+0x18>
				Process[i].last_state = READY;
				Process[i].request_arg = 0;
			}
		}
	}
	Tick_Count = 0;
     aa4:	10 92 2e 02 	sts	0x022E, r1
     aa8:	10 92 2d 02 	sts	0x022D, r1
     aac:	08 95       	ret

00000aae <Dispatch>:
/*                     KERNEL SCHEDULING FUNCTIONS                      */
/************************************************************************/

/* This internal kernel function is a part of the "scheduler". It chooses the next task to run, i.e., Cp. */
static void Dispatch()
{
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	20 e1       	ldi	r18, 0x10	; 16
     ab4:	30 e0       	ldi	r19, 0x00	; 0
	unsigned int i = 0;
	int highest_pri = LOWEST_PRIORITY + 1;
	int highest_pri_index = -1;
     ab6:	af ef       	ldi	r26, 0xFF	; 255
     ab8:	bf ef       	ldi	r27, 0xFF	; 255

/* This internal kernel function is a part of the "scheduler". It chooses the next task to run, i.e., Cp. */
static void Dispatch()
{
	unsigned int i = 0;
	int highest_pri = LOWEST_PRIORITY + 1;
     aba:	6b e0       	ldi	r22, 0x0B	; 11
     abc:	70 e0       	ldi	r23, 0x00	; 0
	{
		//Increment process index
		NextP = (NextP + 1) % MAXTHREAD;
		
		//Select the READY process with the highest priority
		if(Process[NextP].state == READY && Process[NextP].pri < highest_pri)
     abe:	4e e0       	ldi	r20, 0x0E	; 14
     ac0:	51 e0       	ldi	r21, 0x01	; 1
	
	//Find the next READY task with the highest priority by iterating through the process list ONCE
	for(i=0; i<MAXTHREAD; i++)
	{
		//Increment process index
		NextP = (NextP + 1) % MAXTHREAD;
     ac2:	80 91 35 02 	lds	r24, 0x0235
     ac6:	90 91 36 02 	lds	r25, 0x0236
     aca:	01 96       	adiw	r24, 0x01	; 1
     acc:	8f 70       	andi	r24, 0x0F	; 15
     ace:	99 27       	eor	r25, r25
     ad0:	90 93 36 02 	sts	0x0236, r25
     ad4:	80 93 35 02 	sts	0x0235, r24
		
		//Select the READY process with the highest priority
		if(Process[NextP].state == READY && Process[NextP].pri < highest_pri)
     ad8:	80 91 35 02 	lds	r24, 0x0235
     adc:	90 91 36 02 	lds	r25, 0x0236
     ae0:	84 9f       	mul	r24, r20
     ae2:	f0 01       	movw	r30, r0
     ae4:	85 9f       	mul	r24, r21
     ae6:	f0 0d       	add	r31, r0
     ae8:	94 9f       	mul	r25, r20
     aea:	f0 0d       	add	r31, r0
     aec:	11 24       	eor	r1, r1
     aee:	e1 5c       	subi	r30, 0xC1	; 193
     af0:	fa 4f       	sbci	r31, 0xFA	; 250
     af2:	83 81       	ldd	r24, Z+3	; 0x03
     af4:	81 30       	cpi	r24, 0x01	; 1
     af6:	29 f5       	brne	.+74     	; 0xb42 <Dispatch+0x94>
     af8:	80 91 35 02 	lds	r24, 0x0235
     afc:	90 91 36 02 	lds	r25, 0x0236
     b00:	84 9f       	mul	r24, r20
     b02:	f0 01       	movw	r30, r0
     b04:	85 9f       	mul	r24, r21
     b06:	f0 0d       	add	r31, r0
     b08:	94 9f       	mul	r25, r20
     b0a:	f0 0d       	add	r31, r0
     b0c:	11 24       	eor	r1, r1
     b0e:	e1 5c       	subi	r30, 0xC1	; 193
     b10:	fa 4f       	sbci	r31, 0xFA	; 250
     b12:	82 81       	ldd	r24, Z+2	; 0x02
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	86 17       	cp	r24, r22
     b18:	97 07       	cpc	r25, r23
     b1a:	9c f4       	brge	.+38     	; 0xb42 <Dispatch+0x94>
		{
			highest_pri = Process[NextP].pri;
     b1c:	80 91 35 02 	lds	r24, 0x0235
     b20:	90 91 36 02 	lds	r25, 0x0236
     b24:	84 9f       	mul	r24, r20
     b26:	f0 01       	movw	r30, r0
     b28:	85 9f       	mul	r24, r21
     b2a:	f0 0d       	add	r31, r0
     b2c:	94 9f       	mul	r25, r20
     b2e:	f0 0d       	add	r31, r0
     b30:	11 24       	eor	r1, r1
     b32:	e1 5c       	subi	r30, 0xC1	; 193
     b34:	fa 4f       	sbci	r31, 0xFA	; 250
     b36:	62 81       	ldd	r22, Z+2	; 0x02
     b38:	70 e0       	ldi	r23, 0x00	; 0
			highest_pri_index = NextP;
     b3a:	a0 91 35 02 	lds	r26, 0x0235
     b3e:	b0 91 36 02 	lds	r27, 0x0236
     b42:	21 50       	subi	r18, 0x01	; 1
     b44:	31 09       	sbc	r19, r1
	unsigned int i = 0;
	int highest_pri = LOWEST_PRIORITY + 1;
	int highest_pri_index = -1;
	
	//Find the next READY task with the highest priority by iterating through the process list ONCE
	for(i=0; i<MAXTHREAD; i++)
     b46:	09 f0       	breq	.+2      	; 0xb4a <Dispatch+0x9c>
     b48:	bc cf       	rjmp	.-136    	; 0xac2 <Dispatch+0x14>
			highest_pri_index = NextP;
		}
	}
		
	//When none of the tasks in the process list is ready
	if(highest_pri_index == -1)
     b4a:	af 3f       	cpi	r26, 0xFF	; 255
     b4c:	8f ef       	ldi	r24, 0xFF	; 255
     b4e:	b8 07       	cpc	r27, r24
     b50:	11 f5       	brne	.+68     	; 0xb96 <Dispatch+0xe8>
	{
		//We'll temporarily re-enable interrupt in case if one or more task is waiting on events/interrupts or sleeping
		Enable_Interrupt();
     b52:	78 94       	sei
		
		//Looping through the process list until any process becomes ready
		while(Process[NextP].state != READY)
     b54:	ce e0       	ldi	r28, 0x0E	; 14
     b56:	d1 e0       	ldi	r29, 0x01	; 1
     b58:	0c c0       	rjmp	.+24     	; 0xb72 <Dispatch+0xc4>
		{
			//Increment process index
			NextP = (NextP + 1) % MAXTHREAD;
     b5a:	80 91 35 02 	lds	r24, 0x0235
     b5e:	90 91 36 02 	lds	r25, 0x0236
     b62:	01 96       	adiw	r24, 0x01	; 1
     b64:	8f 70       	andi	r24, 0x0F	; 15
     b66:	99 27       	eor	r25, r25
     b68:	90 93 36 02 	sts	0x0236, r25
     b6c:	80 93 35 02 	sts	0x0235, r24
			
			//Check if any timer ticks came in
			Kernel_Tick_Handler();	
     b70:	27 df       	rcall	.-434    	; 0x9c0 <Kernel_Tick_Handler>
	{
		//We'll temporarily re-enable interrupt in case if one or more task is waiting on events/interrupts or sleeping
		Enable_Interrupt();
		
		//Looping through the process list until any process becomes ready
		while(Process[NextP].state != READY)
     b72:	80 91 35 02 	lds	r24, 0x0235
     b76:	90 91 36 02 	lds	r25, 0x0236
     b7a:	8c 9f       	mul	r24, r28
     b7c:	f0 01       	movw	r30, r0
     b7e:	8d 9f       	mul	r24, r29
     b80:	f0 0d       	add	r31, r0
     b82:	9c 9f       	mul	r25, r28
     b84:	f0 0d       	add	r31, r0
     b86:	11 24       	eor	r1, r1
     b88:	e1 5c       	subi	r30, 0xC1	; 193
     b8a:	fa 4f       	sbci	r31, 0xFA	; 250
     b8c:	83 81       	ldd	r24, Z+3	; 0x03
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	21 f7       	brne	.-56     	; 0xb5a <Dispatch+0xac>
			//Check if any timer ticks came in
			Kernel_Tick_Handler();	
		}
		
		//Now that we have a ready task, interrupts must be disabled for the kernel to function properly again.
		Disable_Interrupt();
     b92:	f8 94       	cli
     b94:	04 c0       	rjmp	.+8      	; 0xb9e <Dispatch+0xf0>
	}
	else
		NextP = highest_pri_index;
     b96:	b0 93 36 02 	sts	0x0236, r27
     b9a:	a0 93 35 02 	sts	0x0235, r26

	//Load the next selected task's process descriptor into Cp
	Cp = &(Process[NextP]);
     b9e:	20 91 35 02 	lds	r18, 0x0235
     ba2:	30 91 36 02 	lds	r19, 0x0236
     ba6:	8e e0       	ldi	r24, 0x0E	; 14
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	28 9f       	mul	r18, r24
     bac:	f0 01       	movw	r30, r0
     bae:	29 9f       	mul	r18, r25
     bb0:	f0 0d       	add	r31, r0
     bb2:	38 9f       	mul	r19, r24
     bb4:	f0 0d       	add	r31, r0
     bb6:	11 24       	eor	r1, r1
     bb8:	e1 5c       	subi	r30, 0xC1	; 193
     bba:	fa 4f       	sbci	r31, 0xFA	; 250
     bbc:	f0 93 2d 16 	sts	0x162D, r31
     bc0:	e0 93 2c 16 	sts	0x162C, r30
	CurrentSp = Cp->sp;
     bc4:	82 85       	ldd	r24, Z+10	; 0x0a
     bc6:	93 85       	ldd	r25, Z+11	; 0x0b
     bc8:	90 93 2b 16 	sts	0x162B, r25
     bcc:	80 93 2a 16 	sts	0x162A, r24
	Cp->state = RUNNING;
     bd0:	82 e0       	ldi	r24, 0x02	; 2
     bd2:	83 83       	std	Z+3, r24	; 0x03
}
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	08 95       	ret

00000bda <Kernel_Create_Task>:
/*                   TASK RELATED KERNEL FUNCTIONS                      */
/************************************************************************/

/* Handles all low level operations for creating a new task */
void Kernel_Create_Task(voidfuncptr f, PRIORITY py, int arg)
{
     bda:	ef 92       	push	r14
     bdc:	ff 92       	push	r15
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	ec 01       	movw	r28, r24
	#ifdef OS_DEBUG
	int counter = 0;
	#endif
	
	//Make sure the system can still have enough resources to create more tasks
	if (Task_Count == MAXTHREAD)
     be8:	80 91 33 02 	lds	r24, 0x0233
     bec:	90 91 34 02 	lds	r25, 0x0234
     bf0:	40 97       	sbiw	r24, 0x10	; 16
     bf2:	49 f0       	breq	.+18     	; 0xc06 <Kernel_Create_Task+0x2c>
		return;
	}

	//Find a dead or empty PD slot to allocate our new task
	for (x = 0; x < MAXTHREAD; x++)
	if (Process[x].state == DEAD) break;
     bf4:	80 91 42 05 	lds	r24, 0x0542
     bf8:	88 23       	and	r24, r24
     bfa:	d9 f0       	breq	.+54     	; 0xc32 <Kernel_Create_Task+0x58>
     bfc:	21 e0       	ldi	r18, 0x01	; 1
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	ae e0       	ldi	r26, 0x0E	; 14
     c02:	b1 e0       	ldi	r27, 0x01	; 1
     c04:	04 c0       	rjmp	.+8      	; 0xc0e <Kernel_Create_Task+0x34>
	{
		#ifdef OS_DEBUG
		printf("Task_Create: Failed to create task. The system is at its process threshold.\n");
		#endif
		
		err = MAX_PROCESS_ERR;
     c06:	84 e0       	ldi	r24, 0x04	; 4
     c08:	80 93 29 16 	sts	0x1629, r24
		return;
     c0c:	62 c0       	rjmp	.+196    	; 0xcd2 <Kernel_Create_Task+0xf8>
	}

	//Find a dead or empty PD slot to allocate our new task
	for (x = 0; x < MAXTHREAD; x++)
	if (Process[x].state == DEAD) break;
     c0e:	2a 9f       	mul	r18, r26
     c10:	f0 01       	movw	r30, r0
     c12:	2b 9f       	mul	r18, r27
     c14:	f0 0d       	add	r31, r0
     c16:	3a 9f       	mul	r19, r26
     c18:	f0 0d       	add	r31, r0
     c1a:	11 24       	eor	r1, r1
     c1c:	e1 5c       	subi	r30, 0xC1	; 193
     c1e:	fa 4f       	sbci	r31, 0xFA	; 250
     c20:	93 81       	ldd	r25, Z+3	; 0x03
     c22:	99 23       	and	r25, r25
     c24:	41 f0       	breq	.+16     	; 0xc36 <Kernel_Create_Task+0x5c>
		err = MAX_PROCESS_ERR;
		return;
	}

	//Find a dead or empty PD slot to allocate our new task
	for (x = 0; x < MAXTHREAD; x++)
     c26:	2f 5f       	subi	r18, 0xFF	; 255
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	20 31       	cpi	r18, 0x10	; 16
     c2c:	31 05       	cpc	r19, r1
     c2e:	79 f7       	brne	.-34     	; 0xc0e <Kernel_Create_Task+0x34>
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <Kernel_Create_Task+0x5c>
	if (Process[x].state == DEAD) break;
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
	
	++Task_Count;
     c36:	80 91 33 02 	lds	r24, 0x0233
     c3a:	90 91 34 02 	lds	r25, 0x0234
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	90 93 34 02 	sts	0x0234, r25
     c44:	80 93 33 02 	sts	0x0233, r24
	p = &(Process[x]);
	
	/*The code below was agglomerated from Kernel_Create_Task_At;*/
	
	//Initializing the workspace memory for the new task
	sp = (unsigned char *) &(p->workSpace[WORKSPACE-1]);
     c48:	8e e0       	ldi	r24, 0x0E	; 14
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	28 9f       	mul	r18, r24
     c4e:	f0 01       	movw	r30, r0
     c50:	29 9f       	mul	r18, r25
     c52:	f0 0d       	add	r31, r0
     c54:	38 9f       	mul	r19, r24
     c56:	f0 0d       	add	r31, r0
     c58:	11 24       	eor	r1, r1
     c5a:	9f 01       	movw	r18, r30
     c5c:	26 5b       	subi	r18, 0xB6	; 182
     c5e:	39 4f       	sbci	r19, 0xF9	; 249
	memset(&(p->workSpace),0,WORKSPACE);
     c60:	8f 01       	movw	r16, r30
     c62:	05 5b       	subi	r16, 0xB5	; 181
     c64:	1a 4f       	sbci	r17, 0xFA	; 250
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	d8 01       	movw	r26, r16
     c6c:	8c 01       	movw	r16, r24
     c6e:	1d 92       	st	X+, r1
     c70:	01 50       	subi	r16, 0x01	; 1
     c72:	10 40       	sbci	r17, 0x00	; 0
     c74:	e1 f7       	brne	.-8      	; 0xc6e <Kernel_Create_Task+0x94>

	//Store terminate at the bottom of stack to protect against stack underrun.
	*(unsigned char *)sp-- = ((unsigned int)Task_Terminate) & 0xff;
     c76:	e1 5c       	subi	r30, 0xC1	; 193
     c78:	fa 4f       	sbci	r31, 0xFA	; 250
     c7a:	df 01       	movw	r26, r30
     c7c:	a5 5f       	subi	r26, 0xF5	; 245
     c7e:	be 4f       	sbci	r27, 0xFE	; 254
     c80:	8e e2       	ldi	r24, 0x2E	; 46
     c82:	9b e0       	ldi	r25, 0x0B	; 11
     c84:	8c 93       	st	X, r24
	*(unsigned char *)sp-- = (((unsigned int)Task_Terminate) >> 8) & 0xff;
     c86:	d9 01       	movw	r26, r18
     c88:	11 97       	sbiw	r26, 0x01	; 1
     c8a:	9c 93       	st	X, r25
	*(unsigned char *)sp-- = 0x00;
     c8c:	11 97       	sbiw	r26, 0x01	; 1
     c8e:	1c 92       	st	X, r1

	//Place return address of function at bottom of stack
	*(unsigned char *)sp-- = ((unsigned int)f) & 0xff;
     c90:	11 97       	sbiw	r26, 0x01	; 1
     c92:	cc 93       	st	X, r28
	*(unsigned char *)sp-- = (((unsigned int)f) >> 8) & 0xff;
     c94:	11 97       	sbiw	r26, 0x01	; 1
     c96:	dc 93       	st	X, r29
	*(unsigned char *)sp-- = 0x00;
     c98:	11 97       	sbiw	r26, 0x01	; 1
     c9a:	1c 92       	st	X, r1
	 //Place stack pointer at top of stack
	 sp = sp - 34;
	#endif
	
	//Build the process descriptor for the new task
	p->pid = ++Last_PID;
     c9c:	80 91 23 16 	lds	r24, 0x1623
     ca0:	90 91 24 16 	lds	r25, 0x1624
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	90 93 24 16 	sts	0x1624, r25
     caa:	80 93 23 16 	sts	0x1623, r24
     cae:	91 83       	std	Z+1, r25	; 0x01
     cb0:	80 83       	st	Z, r24
	p->pri = py;
     cb2:	62 83       	std	Z+2, r22	; 0x02
	p->arg = arg;
     cb4:	51 87       	std	Z+9, r21	; 0x09
     cb6:	40 87       	std	Z+8, r20	; 0x08
	p->request = NONE;
     cb8:	15 82       	std	Z+5, r1	; 0x05
	p->state = READY;
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	83 83       	std	Z+3, r24	; 0x03
	 {
		 *(unsigned char *)sp-- = counter;
	 }
	#else
	 //Place stack pointer at top of stack
	 sp = sp - 34;
     cbe:	28 52       	subi	r18, 0x28	; 40
     cc0:	31 09       	sbc	r19, r1
	p->pid = ++Last_PID;
	p->pri = py;
	p->arg = arg;
	p->request = NONE;
	p->state = READY;
	p->sp = sp;					/* stack pointer into the "workSpace" */
     cc2:	33 87       	std	Z+11, r19	; 0x0b
     cc4:	22 87       	std	Z+10, r18	; 0x0a
	p->code = f;				/* function to be executed as a task */
     cc6:	e4 5f       	subi	r30, 0xF4	; 244
     cc8:	fe 4f       	sbci	r31, 0xFE	; 254
     cca:	d1 83       	std	Z+1, r29	; 0x01
     ccc:	c0 83       	st	Z, r28
	
	//No errors occured
	err = NO_ERR;
     cce:	10 92 29 16 	sts	0x1629, r1
}
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	1f 91       	pop	r17
     cd8:	0f 91       	pop	r16
     cda:	ff 90       	pop	r15
     cdc:	ef 90       	pop	r14
     cde:	08 95       	ret

00000ce0 <Kernel_Create_Event>:
void Kernel_Create_Event(void)
{
	int i;
	
	//Make sure the system's events are not at max
	if(Event_Count >= MAXEVENT)
     ce0:	80 91 31 02 	lds	r24, 0x0231
     ce4:	90 91 32 02 	lds	r25, 0x0232
     ce8:	08 97       	sbiw	r24, 0x08	; 8
     cea:	48 f4       	brcc	.+18     	; 0xcfe <Kernel_Create_Event+0x1e>
		return;
	}
	
	//Find an uninitialized Event slot
	for(i=0; i<MAXEVENT; i++)
		if(Event[i].id == 0) break;
     cec:	80 91 0f 05 	lds	r24, 0x050F
     cf0:	90 91 10 05 	lds	r25, 0x0510
     cf4:	89 2b       	or	r24, r25
     cf6:	c9 f0       	breq	.+50     	; 0xd2a <Kernel_Create_Event+0x4a>
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	04 c0       	rjmp	.+8      	; 0xd06 <Kernel_Create_Event+0x26>
	if(Event_Count >= MAXEVENT)
	{
		#ifdef OS_DEBUG
		printf("Event_Init: Failed to create Event. The system is at its max event threshold.\n");
		#endif
		err = MAX_EVENT_ERR;
     cfe:	88 e0       	ldi	r24, 0x08	; 8
     d00:	80 93 29 16 	sts	0x1629, r24
		return;
     d04:	08 95       	ret
	}
	
	//Find an uninitialized Event slot
	for(i=0; i<MAXEVENT; i++)
		if(Event[i].id == 0) break;
     d06:	fc 01       	movw	r30, r24
     d08:	ee 0f       	add	r30, r30
     d0a:	ff 1f       	adc	r31, r31
     d0c:	e8 0f       	add	r30, r24
     d0e:	f9 1f       	adc	r31, r25
     d10:	ee 0f       	add	r30, r30
     d12:	ff 1f       	adc	r31, r31
     d14:	e1 5f       	subi	r30, 0xF1	; 241
     d16:	fa 4f       	sbci	r31, 0xFA	; 250
     d18:	20 81       	ld	r18, Z
     d1a:	31 81       	ldd	r19, Z+1	; 0x01
     d1c:	23 2b       	or	r18, r19
     d1e:	39 f0       	breq	.+14     	; 0xd2e <Kernel_Create_Event+0x4e>
		err = MAX_EVENT_ERR;
		return;
	}
	
	//Find an uninitialized Event slot
	for(i=0; i<MAXEVENT; i++)
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	88 30       	cpi	r24, 0x08	; 8
     d24:	91 05       	cpc	r25, r1
     d26:	79 f7       	brne	.-34     	; 0xd06 <Kernel_Create_Event+0x26>
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <Kernel_Create_Event+0x4e>
		if(Event[i].id == 0) break;
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
	
	//Assign a new unique ID to the event. Note that the smallest valid Event ID is 1.
	Event[i].id = ++Last_EventID;
     d2e:	20 91 27 16 	lds	r18, 0x1627
     d32:	30 91 28 16 	lds	r19, 0x1628
     d36:	2f 5f       	subi	r18, 0xFF	; 255
     d38:	3f 4f       	sbci	r19, 0xFF	; 255
     d3a:	30 93 28 16 	sts	0x1628, r19
     d3e:	20 93 27 16 	sts	0x1627, r18
     d42:	fc 01       	movw	r30, r24
     d44:	ee 0f       	add	r30, r30
     d46:	ff 1f       	adc	r31, r31
     d48:	df 01       	movw	r26, r30
     d4a:	a8 0f       	add	r26, r24
     d4c:	b9 1f       	adc	r27, r25
     d4e:	aa 0f       	add	r26, r26
     d50:	bb 1f       	adc	r27, r27
     d52:	a1 5f       	subi	r26, 0xF1	; 241
     d54:	ba 4f       	sbci	r27, 0xFA	; 250
     d56:	11 96       	adiw	r26, 0x01	; 1
     d58:	3c 93       	st	X, r19
     d5a:	2e 93       	st	-X, r18
	Event[i].owner = 0;
     d5c:	fd 01       	movw	r30, r26
     d5e:	13 82       	std	Z+3, r1	; 0x03
     d60:	12 82       	std	Z+2, r1	; 0x02
	++Event_Count;
     d62:	80 91 31 02 	lds	r24, 0x0231
     d66:	90 91 32 02 	lds	r25, 0x0232
     d6a:	01 96       	adiw	r24, 0x01	; 1
     d6c:	90 93 32 02 	sts	0x0232, r25
     d70:	80 93 31 02 	sts	0x0231, r24
	err = NO_ERR;
     d74:	10 92 29 16 	sts	0x1629, r1
     d78:	08 95       	ret

00000d7a <Kernel_Create_Mutex>:
/************************************************************************/
/*                  MUTEX RELATED KERNEL FUNCTIONS                      */
/************************************************************************/

void Kernel_Create_Mutex(void)
{
     d7a:	cf 93       	push	r28
	int i;
	
	//Make sure the system's mutexes are not at max
	if(Mutex_Count >= MAXMUTEX)
     d7c:	80 91 2f 02 	lds	r24, 0x022F
     d80:	90 91 30 02 	lds	r25, 0x0230
     d84:	08 97       	sbiw	r24, 0x08	; 8
     d86:	50 f4       	brcc	.+20     	; 0xd9c <Kernel_Create_Mutex+0x22>
		return;
	}
	
	//Find an uninitialized Mutex slot
	for(i=0; i<MAXMUTEX; i++)
		if(Mutex[i].id == 0) break;
     d88:	80 91 37 02 	lds	r24, 0x0237
     d8c:	90 91 38 02 	lds	r25, 0x0238
     d90:	89 2b       	or	r24, r25
     d92:	c9 f0       	breq	.+50     	; 0xdc6 <Kernel_Create_Mutex+0x4c>
     d94:	41 e0       	ldi	r20, 0x01	; 1
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	2b e5       	ldi	r18, 0x5B	; 91
     d9a:	04 c0       	rjmp	.+8      	; 0xda4 <Kernel_Create_Mutex+0x2a>
	if(Mutex_Count >= MAXMUTEX)
	{
		#ifdef OS_DEBUG
		printf("Kernel_Create_Mutex: Failed to create Mutex. The system is at its max mutex threshold.\n");
		#endif
		err = MAX_MUTEX_ERR;
     d9c:	8c e0       	ldi	r24, 0x0C	; 12
     d9e:	80 93 29 16 	sts	0x1629, r24
		return;
     da2:	6b c0       	rjmp	.+214    	; 0xe7a <Kernel_Create_Mutex+0x100>
	}
	
	//Find an uninitialized Mutex slot
	for(i=0; i<MAXMUTEX; i++)
		if(Mutex[i].id == 0) break;
     da4:	24 9f       	mul	r18, r20
     da6:	f0 01       	movw	r30, r0
     da8:	25 9f       	mul	r18, r21
     daa:	f0 0d       	add	r31, r0
     dac:	11 24       	eor	r1, r1
     dae:	e9 5c       	subi	r30, 0xC9	; 201
     db0:	fd 4f       	sbci	r31, 0xFD	; 253
     db2:	80 81       	ld	r24, Z
     db4:	91 81       	ldd	r25, Z+1	; 0x01
     db6:	89 2b       	or	r24, r25
     db8:	41 f0       	breq	.+16     	; 0xdca <Kernel_Create_Mutex+0x50>
		err = MAX_MUTEX_ERR;
		return;
	}
	
	//Find an uninitialized Mutex slot
	for(i=0; i<MAXMUTEX; i++)
     dba:	4f 5f       	subi	r20, 0xFF	; 255
     dbc:	5f 4f       	sbci	r21, 0xFF	; 255
     dbe:	48 30       	cpi	r20, 0x08	; 8
     dc0:	51 05       	cpc	r21, r1
     dc2:	81 f7       	brne	.-32     	; 0xda4 <Kernel_Create_Mutex+0x2a>
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <Kernel_Create_Mutex+0x50>
		if(Mutex[i].id == 0) break;
     dc6:	40 e0       	ldi	r20, 0x00	; 0
     dc8:	50 e0       	ldi	r21, 0x00	; 0
	
	//Assign a new unique ID to the mutex. Note that the smallest valid mutex ID is 1.
	Mutex[i].id = ++Last_MutexID;
     dca:	80 91 2e 16 	lds	r24, 0x162E
     dce:	90 91 2f 16 	lds	r25, 0x162F
     dd2:	01 96       	adiw	r24, 0x01	; 1
     dd4:	90 93 2f 16 	sts	0x162F, r25
     dd8:	80 93 2e 16 	sts	0x162E, r24
     ddc:	2b e5       	ldi	r18, 0x5B	; 91
     dde:	24 9f       	mul	r18, r20
     de0:	f0 01       	movw	r30, r0
     de2:	25 9f       	mul	r18, r21
     de4:	f0 0d       	add	r31, r0
     de6:	11 24       	eor	r1, r1
     de8:	e9 5c       	subi	r30, 0xC9	; 201
     dea:	fd 4f       	sbci	r31, 0xFD	; 253
     dec:	91 83       	std	Z+1, r25	; 0x01
     dee:	80 83       	st	Z, r24
	Mutex[i].owner = 0;		// note when mutex's owner is 0, it is free
     df0:	13 82       	std	Z+3, r1	; 0x03
     df2:	12 82       	std	Z+2, r1	; 0x02
	// init priority stack
	for (int j=0; j<MAXTHREAD; j++) {
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	90 e0       	ldi	r25, 0x00	; 0
		Mutex[i].priority_stack[j] = LOWEST_PRIORITY+1;
     df8:	6b e5       	ldi	r22, 0x5B	; 91
     dfa:	64 9f       	mul	r22, r20
     dfc:	90 01       	movw	r18, r0
     dfe:	65 9f       	mul	r22, r21
     e00:	30 0d       	add	r19, r0
     e02:	11 24       	eor	r1, r1
     e04:	df 01       	movw	r26, r30
     e06:	cb e0       	ldi	r28, 0x0B	; 11
		Mutex[i].blocked_stack[j] = -1;
     e08:	6f ef       	ldi	r22, 0xFF	; 255
     e0a:	7f ef       	ldi	r23, 0xFF	; 255
	//Assign a new unique ID to the mutex. Note that the smallest valid mutex ID is 1.
	Mutex[i].id = ++Last_MutexID;
	Mutex[i].owner = 0;		// note when mutex's owner is 0, it is free
	// init priority stack
	for (int j=0; j<MAXTHREAD; j++) {
		Mutex[i].priority_stack[j] = LOWEST_PRIORITY+1;
     e0c:	fd 01       	movw	r30, r26
     e0e:	e8 0f       	add	r30, r24
     e10:	f9 1f       	adc	r31, r25
     e12:	c6 a3       	std	Z+38, r28	; 0x26
		Mutex[i].blocked_stack[j] = -1;
     e14:	fc 01       	movw	r30, r24
     e16:	33 96       	adiw	r30, 0x03	; 3
     e18:	ee 0f       	add	r30, r30
     e1a:	ff 1f       	adc	r31, r31
     e1c:	e2 0f       	add	r30, r18
     e1e:	f3 1f       	adc	r31, r19
     e20:	e9 5c       	subi	r30, 0xC9	; 201
     e22:	fd 4f       	sbci	r31, 0xFD	; 253
     e24:	71 83       	std	Z+1, r23	; 0x01
     e26:	60 83       	st	Z, r22
		Mutex[i].order[j] = 0;
     e28:	fc 01       	movw	r30, r24
     e2a:	7b 96       	adiw	r30, 0x1b	; 27
     e2c:	ee 0f       	add	r30, r30
     e2e:	ff 1f       	adc	r31, r31
     e30:	e2 0f       	add	r30, r18
     e32:	f3 1f       	adc	r31, r19
     e34:	e9 5c       	subi	r30, 0xC9	; 201
     e36:	fd 4f       	sbci	r31, 0xFD	; 253
     e38:	11 82       	std	Z+1, r1	; 0x01
     e3a:	10 82       	st	Z, r1
	
	//Assign a new unique ID to the mutex. Note that the smallest valid mutex ID is 1.
	Mutex[i].id = ++Last_MutexID;
	Mutex[i].owner = 0;		// note when mutex's owner is 0, it is free
	// init priority stack
	for (int j=0; j<MAXTHREAD; j++) {
     e3c:	01 96       	adiw	r24, 0x01	; 1
     e3e:	80 31       	cpi	r24, 0x10	; 16
     e40:	91 05       	cpc	r25, r1
     e42:	21 f7       	brne	.-56     	; 0xe0c <Kernel_Create_Mutex+0x92>
		Mutex[i].priority_stack[j] = LOWEST_PRIORITY+1;
		Mutex[i].blocked_stack[j] = -1;
		Mutex[i].order[j] = 0;
	}
	Mutex[i].num_of_process = 0;
     e44:	2b e5       	ldi	r18, 0x5B	; 91
     e46:	24 9f       	mul	r18, r20
     e48:	c0 01       	movw	r24, r0
     e4a:	25 9f       	mul	r18, r21
     e4c:	90 0d       	add	r25, r0
     e4e:	11 24       	eor	r1, r1
     e50:	89 5c       	subi	r24, 0xC9	; 201
     e52:	9d 4f       	sbci	r25, 0xFD	; 253
     e54:	fc 01       	movw	r30, r24
     e56:	ea 5a       	subi	r30, 0xAA	; 170
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	11 82       	std	Z+1, r1	; 0x01
     e5c:	10 82       	st	Z, r1
	Mutex[i].total_num = 0;
     e5e:	32 96       	adiw	r30, 0x02	; 2
     e60:	11 82       	std	Z+1, r1	; 0x01
     e62:	10 82       	st	Z, r1
	++Mutex_Count;
     e64:	80 91 2f 02 	lds	r24, 0x022F
     e68:	90 91 30 02 	lds	r25, 0x0230
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	90 93 30 02 	sts	0x0230, r25
     e72:	80 93 2f 02 	sts	0x022F, r24
	err = NO_ERR;
     e76:	10 92 29 16 	sts	0x1629, r1
	
	#ifdef OS_DEBUG
	printf("Kernel_Create_Mutex: Created Mutex %d!\n", Last_MutexID);
	#endif
}
     e7a:	cf 91       	pop	r28
     e7c:	08 95       	ret

00000e7e <Timer_init>:
void Timer_init()
{
	/*Timer1 is configured for the task*/
	
	//Use Prescaler = 256
	TCCR1B |= (1<<CS12);
     e7e:	e1 e8       	ldi	r30, 0x81	; 129
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	84 60       	ori	r24, 0x04	; 4
     e86:	80 83       	st	Z, r24
	TCCR1B &= ~((1<<CS11)|(1<<CS10));
     e88:	80 81       	ld	r24, Z
     e8a:	8c 7f       	andi	r24, 0xFC	; 252
     e8c:	80 83       	st	Z, r24
	
	//Use CTC mode (mode 4)
	TCCR1B |= (1<<WGM12);
     e8e:	80 81       	ld	r24, Z
     e90:	88 60       	ori	r24, 0x08	; 8
     e92:	80 83       	st	Z, r24
	TCCR1B &= ~((1<<WGM13)|(1<<WGM11)|(1<<WGM10));
     e94:	80 81       	ld	r24, Z
     e96:	8c 7e       	andi	r24, 0xEC	; 236
     e98:	80 83       	st	Z, r24
	
	OCR1A = TICK_LENG;			//Set timer top comparison value to ~10ms
     e9a:	81 e7       	ldi	r24, 0x71	; 113
     e9c:	92 e0       	ldi	r25, 0x02	; 2
     e9e:	90 93 89 00 	sts	0x0089, r25
     ea2:	80 93 88 00 	sts	0x0088, r24
	TCNT1 = 0;					//Load initial value for timer
     ea6:	10 92 85 00 	sts	0x0085, r1
     eaa:	10 92 84 00 	sts	0x0084, r1
	TIMSK1 |= (1<<OCIE1A);      //enable match for OCR1A interrupt
     eae:	ef e6       	ldi	r30, 0x6F	; 111
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	82 60       	ori	r24, 0x02	; 2
     eb6:	80 83       	st	Z, r24
     eb8:	08 95       	ret

00000eba <OS_Init>:
/*This function initializes the RTOS and must be called before any othersystem calls.*/
void OS_Init()
{
	int x;
	
	Task_Count = 0;
     eba:	10 92 34 02 	sts	0x0234, r1
     ebe:	10 92 33 02 	sts	0x0233, r1
	Event_Count = 0;
     ec2:	10 92 32 02 	sts	0x0232, r1
     ec6:	10 92 31 02 	sts	0x0231, r1
	KernelActive = 0;
     eca:	10 92 26 16 	sts	0x1626, r1
     ece:	10 92 25 16 	sts	0x1625, r1
	Tick_Count = 0;
     ed2:	10 92 2e 02 	sts	0x022E, r1
     ed6:	10 92 2d 02 	sts	0x022D, r1
	NextP = 0;
     eda:	10 92 36 02 	sts	0x0236, r1
     ede:	10 92 35 02 	sts	0x0235, r1
	Last_PID = 0;
     ee2:	10 92 24 16 	sts	0x1624, r1
     ee6:	10 92 23 16 	sts	0x1623, r1
	Last_EventID = 0;
     eea:	10 92 28 16 	sts	0x1628, r1
     eee:	10 92 27 16 	sts	0x1627, r1
	Last_MutexID = 0;
     ef2:	10 92 2f 16 	sts	0x162F, r1
     ef6:	10 92 2e 16 	sts	0x162E, r1
	err = NO_ERR;
     efa:	10 92 29 16 	sts	0x1629, r1
	
	//Clear and initialize the memory used for tasks
	memset(Process, 0, MAXTHREAD*sizeof(PD));
     efe:	80 ee       	ldi	r24, 0xE0	; 224
     f00:	90 e1       	ldi	r25, 0x10	; 16
     f02:	ef e3       	ldi	r30, 0x3F	; 63
     f04:	f5 e0       	ldi	r31, 0x05	; 5
     f06:	df 01       	movw	r26, r30
     f08:	9c 01       	movw	r18, r24
     f0a:	1d 92       	st	X+, r1
     f0c:	21 50       	subi	r18, 0x01	; 1
     f0e:	30 40       	sbci	r19, 0x00	; 0
     f10:	e1 f7       	brne	.-8      	; 0xf0a <OS_Init+0x50>
	for (x = 0; x < MAXTHREAD; x++) {
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	90 e0       	ldi	r25, 0x00	; 0
		Process[x].state = DEAD;
     f16:	2e e0       	ldi	r18, 0x0E	; 14
     f18:	31 e0       	ldi	r19, 0x01	; 1
     f1a:	82 9f       	mul	r24, r18
     f1c:	f0 01       	movw	r30, r0
     f1e:	83 9f       	mul	r24, r19
     f20:	f0 0d       	add	r31, r0
     f22:	92 9f       	mul	r25, r18
     f24:	f0 0d       	add	r31, r0
     f26:	11 24       	eor	r1, r1
     f28:	e1 5c       	subi	r30, 0xC1	; 193
     f2a:	fa 4f       	sbci	r31, 0xFA	; 250
     f2c:	13 82       	std	Z+3, r1	; 0x03
	Last_MutexID = 0;
	err = NO_ERR;
	
	//Clear and initialize the memory used for tasks
	memset(Process, 0, MAXTHREAD*sizeof(PD));
	for (x = 0; x < MAXTHREAD; x++) {
     f2e:	01 96       	adiw	r24, 0x01	; 1
     f30:	80 31       	cpi	r24, 0x10	; 16
     f32:	91 05       	cpc	r25, r1
     f34:	91 f7       	brne	.-28     	; 0xf1a <OS_Init+0x60>
		Process[x].state = DEAD;
	}
	
	//Clear and initialize the memory used for Events
	memset(Event, 0, MAXEVENT*sizeof(EVENT_TYPE));
     f36:	80 e3       	ldi	r24, 0x30	; 48
     f38:	ef e0       	ldi	r30, 0x0F	; 15
     f3a:	f5 e0       	ldi	r31, 0x05	; 5
     f3c:	df 01       	movw	r26, r30
     f3e:	1d 92       	st	X+, r1
     f40:	8a 95       	dec	r24
     f42:	e9 f7       	brne	.-6      	; 0xf3e <OS_Init+0x84>
	for (x = 0; x < MAXEVENT; x++) {
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	90 e0       	ldi	r25, 0x00	; 0
		Event[x].id = 0;
     f48:	fc 01       	movw	r30, r24
     f4a:	ee 0f       	add	r30, r30
     f4c:	ff 1f       	adc	r31, r31
     f4e:	e8 0f       	add	r30, r24
     f50:	f9 1f       	adc	r31, r25
     f52:	ee 0f       	add	r30, r30
     f54:	ff 1f       	adc	r31, r31
     f56:	e1 5f       	subi	r30, 0xF1	; 241
     f58:	fa 4f       	sbci	r31, 0xFA	; 250
     f5a:	11 82       	std	Z+1, r1	; 0x01
     f5c:	10 82       	st	Z, r1
		Process[x].state = DEAD;
	}
	
	//Clear and initialize the memory used for Events
	memset(Event, 0, MAXEVENT*sizeof(EVENT_TYPE));
	for (x = 0; x < MAXEVENT; x++) {
     f5e:	01 96       	adiw	r24, 0x01	; 1
     f60:	88 30       	cpi	r24, 0x08	; 8
     f62:	91 05       	cpc	r25, r1
     f64:	89 f7       	brne	.-30     	; 0xf48 <OS_Init+0x8e>
		Event[x].id = 0;
	}
	
	//Clear and initialize the memory used for Mutex
	memset(Mutex, 0, MAXMUTEX*sizeof(MUTEX_TYPE));
     f66:	88 ed       	ldi	r24, 0xD8	; 216
     f68:	92 e0       	ldi	r25, 0x02	; 2
     f6a:	e7 e3       	ldi	r30, 0x37	; 55
     f6c:	f2 e0       	ldi	r31, 0x02	; 2
     f6e:	df 01       	movw	r26, r30
     f70:	9c 01       	movw	r18, r24
     f72:	1d 92       	st	X+, r1
     f74:	21 50       	subi	r18, 0x01	; 1
     f76:	30 40       	sbci	r19, 0x00	; 0
     f78:	e1 f7       	brne	.-8      	; 0xf72 <OS_Init+0xb8>
	for (x = 0; x < MAXMUTEX; x++) {
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
		Event[x].id = 0;
     f7e:	fc 01       	movw	r30, r24
     f80:	ee 0f       	add	r30, r30
     f82:	ff 1f       	adc	r31, r31
     f84:	e8 0f       	add	r30, r24
     f86:	f9 1f       	adc	r31, r25
     f88:	ee 0f       	add	r30, r30
     f8a:	ff 1f       	adc	r31, r31
     f8c:	e1 5f       	subi	r30, 0xF1	; 241
     f8e:	fa 4f       	sbci	r31, 0xFA	; 250
     f90:	11 82       	std	Z+1, r1	; 0x01
     f92:	10 82       	st	Z, r1
		Event[x].id = 0;
	}
	
	//Clear and initialize the memory used for Mutex
	memset(Mutex, 0, MAXMUTEX*sizeof(MUTEX_TYPE));
	for (x = 0; x < MAXMUTEX; x++) {
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	88 30       	cpi	r24, 0x08	; 8
     f98:	91 05       	cpc	r25, r1
     f9a:	89 f7       	brne	.-30     	; 0xf7e <OS_Init+0xc4>
	}
	
	#ifdef OS_DEBUG
	printf("OS initialized!\n");
	#endif
}
     f9c:	08 95       	ret

00000f9e <OS_Start>:

/* This function starts the RTOS after creating a few tasks.*/
void OS_Start()
{
     f9e:	2f 92       	push	r2
     fa0:	3f 92       	push	r3
     fa2:	4f 92       	push	r4
     fa4:	5f 92       	push	r5
     fa6:	6f 92       	push	r6
     fa8:	7f 92       	push	r7
     faa:	8f 92       	push	r8
     fac:	9f 92       	push	r9
     fae:	af 92       	push	r10
     fb0:	bf 92       	push	r11
     fb2:	cf 92       	push	r12
     fb4:	df 92       	push	r13
     fb6:	ef 92       	push	r14
     fb8:	ff 92       	push	r15
     fba:	0f 93       	push	r16
     fbc:	1f 93       	push	r17
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
	if ( (! KernelActive) && (Task_Count > 0))
     fc2:	80 91 25 16 	lds	r24, 0x1625
     fc6:	90 91 26 16 	lds	r25, 0x1626
     fca:	89 2b       	or	r24, r25
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <OS_Start+0x32>
     fce:	0f c3       	rjmp	.+1566   	; 0x15ee <OS_Start+0x650>
     fd0:	80 91 33 02 	lds	r24, 0x0233
     fd4:	90 91 34 02 	lds	r25, 0x0234
     fd8:	89 2b       	or	r24, r25
     fda:	09 f4       	brne	.+2      	; 0xfde <OS_Start+0x40>
     fdc:	08 c3       	rjmp	.+1552   	; 0x15ee <OS_Start+0x650>
	{
		Disable_Interrupt();
     fde:	f8 94       	cli
		
		/* we may have to initialize the interrupt vector for Enter_Kernel() here. */
			/* here we go...  */
		KernelActive = 1;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	90 93 26 16 	sts	0x1626, r25
     fe8:	80 93 25 16 	sts	0x1625, r24
		
		/*Initialize and start Timer needed for sleep*/
		Timer_init();
     fec:	48 df       	rcall	.-368    	; 0xe7e <Timer_init>
  *
  * This is the main loop of our kernel, called by OS_Start().
  */
static void Next_Kernel_Request() 
{
	Dispatch();	//Select an initial task to run
     fee:	5f dd       	rcall	.-1346   	; 0xaae <Dispatch>
			Dispatch();
			break;
       
			//Invalid request code, just ignore
			default:
				err = INVALID_KERNET_REQUEST_ERR;
     ff0:	68 94       	set
     ff2:	55 24       	eor	r5, r5
     ff4:	51 f8       	bld	r5, 1
			//Does this need dispatch under any circumstances?
			break;
		   
			case YIELD:
			case NONE:					// NONE could be caused by a timer interrupt
			Cp->state = READY;
     ff6:	99 24       	eor	r9, r9
     ff8:	93 94       	inc	r9
	} else if (m->num_of_process > 0) {
		// there are tasks waiting on the mutex
		// deque the task with highest priority
		PID p_dequeue = 0;
		unsigned int temp_order = m->total_num + 1;
		PRIORITY temp_pri = LOWEST_PRIORITY + 1;
     ffa:	0f 2e       	mov	r0, r31
     ffc:	fb e0       	ldi	r31, 0x0B	; 11
     ffe:	8f 2e       	mov	r8, r31
    1000:	f0 2d       	mov	r31, r0
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
		//enqueue cp to stack
		++(m->num_of_process);
		++(m->total_num);
		for (int i=0; i<MAXTHREAD; i++) {
    1002:	77 24       	eor	r7, r7
    1004:	73 94       	inc	r7
    1006:	61 2c       	mov	r6, r1
		return;
	}
	
	//Ensure the task is not currently owning a mutex
	for(int i=0; i<MAXMUTEX; i++) {
		if (Mutex[i].owner == p->pid) {
    1008:	0f 2e       	mov	r0, r31
    100a:	fb e5       	ldi	r31, 0x5B	; 91
    100c:	cf 2e       	mov	r12, r31
    100e:	f0 2d       	mov	r31, r0
		if (Mutex[index].owner == Cp->pid) {
			// it owns a mutex unlock the mutex
			if (Mutex[index].num_of_process > 0) {
				printf("something is waiting\n");
				// if there are other process waiting on the mutex
				PID p_dequeue = 0;
    1010:	41 2c       	mov	r4, r1
    1012:	31 2c       	mov	r3, r1
	//After OS initialization, THIS WILL BE KERNEL'S MAIN LOOP!
	//NOTE: When another task makes a syscall and enters the loop, it's still in the RUNNING state!
	while(1) 
	{
		//Clears the process' request fields
		Cp->request = NONE;
    1014:	e0 91 2c 16 	lds	r30, 0x162C
    1018:	f0 91 2d 16 	lds	r31, 0x162D
    101c:	15 82       	std	Z+5, r1	; 0x05
		//Cp->request_arg is not reset, because task_sleep uses it to keep track of remaining ticks

		//Load the current task's stack pointer and switch to its context
		CurrentSp = Cp->sp;
    101e:	82 85       	ldd	r24, Z+10	; 0x0a
    1020:	93 85       	ldd	r25, Z+11	; 0x0b
    1022:	90 93 2b 16 	sts	0x162B, r25
    1026:	80 93 2a 16 	sts	0x162A, r24
		Exit_Kernel();
    102a:	8b d8       	rcall	.-3818   	; 0x142 <CSwitch>

		/* if this task makes a system call, it will return to here! */

		//Save the current task's stack pointer and proceed to handle its request
		Cp->sp = CurrentSp;
    102c:	e0 91 2c 16 	lds	r30, 0x162C
    1030:	f0 91 2d 16 	lds	r31, 0x162D
    1034:	80 91 2a 16 	lds	r24, 0x162A
    1038:	90 91 2b 16 	lds	r25, 0x162B
    103c:	93 87       	std	Z+11, r25	; 0x0b
    103e:	82 87       	std	Z+10, r24	; 0x0a
		
		//Check if any timer ticks came in
		Kernel_Tick_Handler();
    1040:	bf dc       	rcall	.-1666   	; 0x9c0 <Kernel_Tick_Handler>

		switch(Cp->request)
    1042:	c0 91 2c 16 	lds	r28, 0x162C
    1046:	d0 91 2d 16 	lds	r29, 0x162D
    104a:	8d 81       	ldd	r24, Y+5	; 0x05
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	8d 30       	cpi	r24, 0x0D	; 13
    1050:	91 05       	cpc	r25, r1
    1052:	08 f0       	brcs	.+2      	; 0x1056 <OS_Start+0xb8>
    1054:	c9 c2       	rjmp	.+1426   	; 0x15e8 <OS_Start+0x64a>
    1056:	fc 01       	movw	r30, r24
    1058:	88 27       	eor	r24, r24
    105a:	ee 58       	subi	r30, 0x8E	; 142
    105c:	ff 4f       	sbci	r31, 0xFF	; 255
    105e:	8f 4f       	sbci	r24, 0xFF	; 255
    1060:	80 c4       	rjmp	.+2304   	; 0x1962 <__tablejump2__>
		{
			case CREATE_T:
			Kernel_Create_Task(Cp->code, Cp->pri, Cp->arg);
    1062:	48 85       	ldd	r20, Y+8	; 0x08
    1064:	59 85       	ldd	r21, Y+9	; 0x09
    1066:	6a 81       	ldd	r22, Y+2	; 0x02
    1068:	c4 5f       	subi	r28, 0xF4	; 244
    106a:	de 4f       	sbci	r29, 0xFE	; 254
    106c:	88 81       	ld	r24, Y
    106e:	99 81       	ldd	r25, Y+1	; 0x01
    1070:	b4 dd       	rcall	.-1176   	; 0xbda <Kernel_Create_Task>
    1072:	d0 cf       	rjmp	.-96     	; 0x1014 <OS_Start+0x76>
		Cp->sp = CurrentSp;
		
		//Check if any timer ticks came in
		Kernel_Tick_Handler();

		switch(Cp->request)
    1074:	10 e0       	ldi	r17, 0x00	; 0
    1076:	c1 2f       	mov	r28, r17
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	d2 2f       	mov	r29, r18
{
	MUTEX_TYPE* m;
	// go through all mutex check if it owns a mutex
	int index;
	for (index=0; index<MAXMUTEX; index++) {
		if (Mutex[index].owner == Cp->pid) {
    107c:	cc 9e       	mul	r12, r28
    107e:	f0 01       	movw	r30, r0
    1080:	cd 9e       	mul	r12, r29
    1082:	f0 0d       	add	r31, r0
    1084:	11 24       	eor	r1, r1
    1086:	e9 5c       	subi	r30, 0xC9	; 201
    1088:	fd 4f       	sbci	r31, 0xFD	; 253
    108a:	22 81       	ldd	r18, Z+2	; 0x02
    108c:	33 81       	ldd	r19, Z+3	; 0x03
    108e:	e0 91 2c 16 	lds	r30, 0x162C
    1092:	f0 91 2d 16 	lds	r31, 0x162D
    1096:	80 81       	ld	r24, Z
    1098:	91 81       	ldd	r25, Z+1	; 0x01
    109a:	28 17       	cp	r18, r24
    109c:	39 07       	cpc	r19, r25
    109e:	09 f0       	breq	.+2      	; 0x10a2 <OS_Start+0x104>
    10a0:	ac c0       	rjmp	.+344    	; 0x11fa <OS_Start+0x25c>
			// it owns a mutex unlock the mutex
			if (Mutex[index].num_of_process > 0) {
    10a2:	cc 9e       	mul	r12, r28
    10a4:	f0 01       	movw	r30, r0
    10a6:	cd 9e       	mul	r12, r29
    10a8:	f0 0d       	add	r31, r0
    10aa:	11 24       	eor	r1, r1
    10ac:	e3 57       	subi	r30, 0x73	; 115
    10ae:	fd 4f       	sbci	r31, 0xFD	; 253
    10b0:	80 81       	ld	r24, Z
    10b2:	91 81       	ldd	r25, Z+1	; 0x01
    10b4:	89 2b       	or	r24, r25
    10b6:	09 f4       	brne	.+2      	; 0x10ba <OS_Start+0x11c>
    10b8:	95 c0       	rjmp	.+298    	; 0x11e4 <OS_Start+0x246>
				printf("something is waiting\n");
    10ba:	85 e0       	ldi	r24, 0x05	; 5
    10bc:	92 e0       	ldi	r25, 0x02	; 2
    10be:	68 d4       	rcall	.+2256   	; 0x1990 <puts>
				// if there are other process waiting on the mutex
				PID p_dequeue = 0;
				unsigned int temp_order = Mutex[index].total_num + 1;
    10c0:	cc 9e       	mul	r12, r28
    10c2:	f0 01       	movw	r30, r0
    10c4:	cd 9e       	mul	r12, r29
    10c6:	f0 0d       	add	r31, r0
    10c8:	11 24       	eor	r1, r1
    10ca:	e1 57       	subi	r30, 0x71	; 113
    10cc:	fd 4f       	sbci	r31, 0xFD	; 253
    10ce:	60 81       	ld	r22, Z
    10d0:	71 81       	ldd	r23, Z+1	; 0x01
    10d2:	6f 5f       	subi	r22, 0xFF	; 255
    10d4:	7f 4f       	sbci	r23, 0xFF	; 255
		if (Mutex[index].owner == Cp->pid) {
			// it owns a mutex unlock the mutex
			if (Mutex[index].num_of_process > 0) {
				printf("something is waiting\n");
				// if there are other process waiting on the mutex
				PID p_dequeue = 0;
    10d6:	e4 2c       	mov	r14, r4
    10d8:	f3 2c       	mov	r15, r3
				unsigned int temp_order = Mutex[index].total_num + 1;
				PRIORITY temp_pri = LOWEST_PRIORITY + 1;
    10da:	18 2d       	mov	r17, r8
				int i;
				for (i=0; i<MAXTHREAD; i++) {
    10dc:	24 2d       	mov	r18, r4
    10de:	33 2d       	mov	r19, r3
					if (Mutex[index].priority_stack[i] < temp_pri) {
    10e0:	cc 9e       	mul	r12, r28
    10e2:	a0 01       	movw	r20, r0
    10e4:	cd 9e       	mul	r12, r29
    10e6:	50 0d       	add	r21, r0
    10e8:	11 24       	eor	r1, r1
    10ea:	ca 01       	movw	r24, r20
    10ec:	89 5c       	subi	r24, 0xC9	; 201
    10ee:	9d 4f       	sbci	r25, 0xFD	; 253
    10f0:	fc 01       	movw	r30, r24
    10f2:	e2 0f       	add	r30, r18
    10f4:	f3 1f       	adc	r31, r19
    10f6:	e6 a1       	ldd	r30, Z+38	; 0x26
    10f8:	e1 17       	cp	r30, r17
    10fa:	c8 f4       	brcc	.+50     	; 0x112e <OS_Start+0x190>
						// found a task with higher priority
						temp_pri = Mutex[index].priority_stack[i];
    10fc:	fc 01       	movw	r30, r24
    10fe:	e2 0f       	add	r30, r18
    1100:	f3 1f       	adc	r31, r19
    1102:	16 a1       	ldd	r17, Z+38	; 0x26
						temp_order = Mutex[index].order[i];
    1104:	f9 01       	movw	r30, r18
    1106:	7b 96       	adiw	r30, 0x1b	; 27
    1108:	ee 0f       	add	r30, r30
    110a:	ff 1f       	adc	r31, r31
    110c:	e4 0f       	add	r30, r20
    110e:	f5 1f       	adc	r31, r21
    1110:	e9 5c       	subi	r30, 0xC9	; 201
    1112:	fd 4f       	sbci	r31, 0xFD	; 253
    1114:	60 81       	ld	r22, Z
    1116:	71 81       	ldd	r23, Z+1	; 0x01
						p_dequeue = Mutex[index].blocked_stack[i];
    1118:	f9 01       	movw	r30, r18
    111a:	33 96       	adiw	r30, 0x03	; 3
    111c:	ee 0f       	add	r30, r30
    111e:	ff 1f       	adc	r31, r31
    1120:	e4 0f       	add	r30, r20
    1122:	f5 1f       	adc	r31, r21
    1124:	e9 5c       	subi	r30, 0xC9	; 201
    1126:	fd 4f       	sbci	r31, 0xFD	; 253
    1128:	e0 80       	ld	r14, Z
    112a:	f1 80       	ldd	r15, Z+1	; 0x01
    112c:	28 c0       	rjmp	.+80     	; 0x117e <OS_Start+0x1e0>
						} else if (Mutex[index].priority_stack[i] == temp_pri && temp_order < Mutex[index].order[i]) {
    112e:	fc 01       	movw	r30, r24
    1130:	e2 0f       	add	r30, r18
    1132:	f3 1f       	adc	r31, r19
    1134:	e6 a1       	ldd	r30, Z+38	; 0x26
    1136:	1e 13       	cpse	r17, r30
    1138:	22 c0       	rjmp	.+68     	; 0x117e <OS_Start+0x1e0>
    113a:	f9 01       	movw	r30, r18
    113c:	7b 96       	adiw	r30, 0x1b	; 27
    113e:	ee 0f       	add	r30, r30
    1140:	ff 1f       	adc	r31, r31
    1142:	e4 0f       	add	r30, r20
    1144:	f5 1f       	adc	r31, r21
    1146:	e9 5c       	subi	r30, 0xC9	; 201
    1148:	fd 4f       	sbci	r31, 0xFD	; 253
    114a:	01 90       	ld	r0, Z+
    114c:	f0 81       	ld	r31, Z
    114e:	e0 2d       	mov	r30, r0
    1150:	6e 17       	cp	r22, r30
    1152:	7f 07       	cpc	r23, r31
    1154:	a0 f4       	brcc	.+40     	; 0x117e <OS_Start+0x1e0>
						// same priority and came into the queue earlier
						temp_order = Mutex[index].order[i];
    1156:	f9 01       	movw	r30, r18
    1158:	7b 96       	adiw	r30, 0x1b	; 27
    115a:	ee 0f       	add	r30, r30
    115c:	ff 1f       	adc	r31, r31
    115e:	e4 0f       	add	r30, r20
    1160:	f5 1f       	adc	r31, r21
    1162:	e9 5c       	subi	r30, 0xC9	; 201
    1164:	fd 4f       	sbci	r31, 0xFD	; 253
    1166:	60 81       	ld	r22, Z
    1168:	71 81       	ldd	r23, Z+1	; 0x01
						p_dequeue = Mutex[index].blocked_stack[i];
    116a:	f9 01       	movw	r30, r18
    116c:	33 96       	adiw	r30, 0x03	; 3
    116e:	ee 0f       	add	r30, r30
    1170:	ff 1f       	adc	r31, r31
    1172:	e4 0f       	add	r30, r20
    1174:	f5 1f       	adc	r31, r21
    1176:	e9 5c       	subi	r30, 0xC9	; 201
    1178:	fd 4f       	sbci	r31, 0xFD	; 253
    117a:	e0 80       	ld	r14, Z
    117c:	f1 80       	ldd	r15, Z+1	; 0x01
				// if there are other process waiting on the mutex
				PID p_dequeue = 0;
				unsigned int temp_order = Mutex[index].total_num + 1;
				PRIORITY temp_pri = LOWEST_PRIORITY + 1;
				int i;
				for (i=0; i<MAXTHREAD; i++) {
    117e:	2f 5f       	subi	r18, 0xFF	; 255
    1180:	3f 4f       	sbci	r19, 0xFF	; 255
    1182:	20 31       	cpi	r18, 0x10	; 16
    1184:	31 05       	cpc	r19, r1
    1186:	09 f0       	breq	.+2      	; 0x118a <OS_Start+0x1ec>
    1188:	b3 cf       	rjmp	.-154    	; 0x10f0 <OS_Start+0x152>
						temp_order = Mutex[index].order[i];
						p_dequeue = Mutex[index].blocked_stack[i];
					}
				}
				//dequeue index i
				Mutex[index].blocked_stack[i] = -1;
    118a:	cc 9e       	mul	r12, r28
    118c:	c0 01       	movw	r24, r0
    118e:	cd 9e       	mul	r12, r29
    1190:	90 0d       	add	r25, r0
    1192:	11 24       	eor	r1, r1
    1194:	dc 01       	movw	r26, r24
    1196:	a9 5c       	subi	r26, 0xC9	; 201
    1198:	bd 4f       	sbci	r27, 0xFD	; 253
    119a:	5d 01       	movw	r10, r26
    119c:	ef ef       	ldi	r30, 0xFF	; 255
    119e:	ff ef       	ldi	r31, 0xFF	; 255
    11a0:	97 96       	adiw	r26, 0x27	; 39
    11a2:	fc 93       	st	X, r31
    11a4:	ee 93       	st	-X, r30
    11a6:	96 97       	sbiw	r26, 0x26	; 38
				Mutex[index].priority_stack[i] = LOWEST_PRIORITY+1;
    11a8:	d6 96       	adiw	r26, 0x36	; 54
    11aa:	8c 92       	st	X, r8
    11ac:	d6 97       	sbiw	r26, 0x36	; 54
				Mutex[index].order[i] = 0;
    11ae:	fd 01       	movw	r30, r26
    11b0:	ea 5a       	subi	r30, 0xAA	; 170
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	11 82       	std	Z+1, r1	; 0x01
    11b6:	10 82       	st	Z, r1
				--(Mutex[index].num_of_process);
    11b8:	80 81       	ld	r24, Z
    11ba:	91 81       	ldd	r25, Z+1	; 0x01
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	91 83       	std	Z+1, r25	; 0x01
    11c0:	80 83       	st	Z, r24
				PD* target_p = findProcessByPID(p_dequeue);
    11c2:	c7 01       	movw	r24, r14
    11c4:	42 db       	rcall	.-2428   	; 0x84a <findProcessByPID>
				Mutex[index].owner = p_dequeue;
    11c6:	d5 01       	movw	r26, r10
    11c8:	13 96       	adiw	r26, 0x03	; 3
    11ca:	fc 92       	st	X, r15
    11cc:	ee 92       	st	-X, r14
    11ce:	12 97       	sbiw	r26, 0x02	; 2
				Mutex[index].own_pri = temp_pri;			//keep track of new owner's priority;
    11d0:	f5 01       	movw	r30, r10
    11d2:	e6 5a       	subi	r30, 0xA6	; 166
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	10 83       	st	Z, r17
				target_p->state = READY;
    11d8:	fc 01       	movw	r30, r24
    11da:	93 82       	std	Z+3, r9	; 0x03
				printf("target p is readd\n");
    11dc:	8a e1       	ldi	r24, 0x1A	; 26
    11de:	92 e0       	ldi	r25, 0x02	; 2
    11e0:	d7 d3       	rcall	.+1966   	; 0x1990 <puts>
    11e2:	0b c0       	rjmp	.+22     	; 0x11fa <OS_Start+0x25c>
			} else {
				Mutex[index].owner = 0;
    11e4:	cc 9e       	mul	r12, r28
    11e6:	f0 01       	movw	r30, r0
    11e8:	cd 9e       	mul	r12, r29
    11ea:	f0 0d       	add	r31, r0
    11ec:	11 24       	eor	r1, r1
    11ee:	e9 5c       	subi	r30, 0xC9	; 201
    11f0:	fd 4f       	sbci	r31, 0xFD	; 253
    11f2:	13 82       	std	Z+3, r1	; 0x03
    11f4:	12 82       	std	Z+2, r1	; 0x02
				Mutex[index].count = 0;
    11f6:	15 82       	std	Z+5, r1	; 0x05
    11f8:	14 82       	std	Z+4, r1	; 0x04
static void Kernel_Terminate_Task(void)
{
	MUTEX_TYPE* m;
	// go through all mutex check if it owns a mutex
	int index;
	for (index=0; index<MAXMUTEX; index++) {
    11fa:	21 96       	adiw	r28, 0x01	; 1
    11fc:	c8 30       	cpi	r28, 0x08	; 8
    11fe:	d1 05       	cpc	r29, r1
    1200:	09 f0       	breq	.+2      	; 0x1204 <OS_Start+0x266>
    1202:	3c cf       	rjmp	.-392    	; 0x107c <OS_Start+0xde>
				Mutex[index].owner = 0;
				Mutex[index].count = 0;
			}
		}
	}
	Cp->state = DEAD;			//Mark the task as DEAD so its resources will be recycled later when new tasks are created
    1204:	e0 91 2c 16 	lds	r30, 0x162C
    1208:	f0 91 2d 16 	lds	r31, 0x162D
    120c:	13 82       	std	Z+3, r1	; 0x03
	--Task_Count;
    120e:	80 91 33 02 	lds	r24, 0x0233
    1212:	90 91 34 02 	lds	r25, 0x0234
    1216:	01 97       	sbiw	r24, 0x01	; 1
    1218:	90 93 34 02 	sts	0x0234, r25
    121c:	80 93 33 02 	sts	0x0233, r24
			Kernel_Create_Task(Cp->code, Cp->pri, Cp->arg);
			break;
			
			case TERMINATE:
			Kernel_Terminate_Task();
			Dispatch();					//Dispatch is only needed if the syscall requires running a different task  after it's done
    1220:	46 dc       	rcall	.-1908   	; 0xaae <Dispatch>
    1222:	f8 ce       	rjmp	.-528    	; 0x1014 <OS_Start+0x76>

/*TODO: Check for mutex ownership. If PID owns any mutex, ignore this request*/
static void Kernel_Suspend_Task() 
{
	//Finds the process descriptor for the specified PID
	PD* p = findProcessByPID(Cp->request_arg);
    1224:	8e 81       	ldd	r24, Y+6	; 0x06
    1226:	9f 81       	ldd	r25, Y+7	; 0x07
    1228:	10 db       	rcall	.-2528   	; 0x84a <findProcessByPID>
	
	//Ensure the PID specified in the PD currently exists in the global process list
	if(p == NULL)
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	21 f4       	brne	.+8      	; 0x1236 <OS_Start+0x298>
	{
		#ifdef OS_DEBUG
			printf("Kernel_Suspend_Task: PID not found in global process list!\n");
		#endif
		err = PID_NOT_FOUND_ERR;
    122e:	85 e0       	ldi	r24, 0x05	; 5
    1230:	80 93 29 16 	sts	0x1629, r24
    1234:	31 c0       	rjmp	.+98     	; 0x1298 <OS_Start+0x2fa>
		return;
	}
	
	//Ensure the task is not in a unsuspendable state
	if(p->state == DEAD || p->state == SUSPENDED)
    1236:	fc 01       	movw	r30, r24
    1238:	a3 81       	ldd	r26, Z+3	; 0x03
    123a:	aa 23       	and	r26, r26
    123c:	71 f0       	breq	.+28     	; 0x125a <OS_Start+0x2bc>
    123e:	a3 30       	cpi	r26, 0x03	; 3
    1240:	61 f0       	breq	.+24     	; 0x125a <OS_Start+0x2bc>
		return;
	}
	
	//Ensure the task is not currently owning a mutex
	for(int i=0; i<MAXMUTEX; i++) {
		if (Mutex[i].owner == p->pid) {
    1242:	20 91 39 02 	lds	r18, 0x0239
    1246:	30 91 3a 02 	lds	r19, 0x023A
    124a:	60 81       	ld	r22, Z
    124c:	71 81       	ldd	r23, Z+1	; 0x01
    124e:	26 17       	cp	r18, r22
    1250:	37 07       	cpc	r19, r23
    1252:	99 f0       	breq	.+38     	; 0x127a <OS_Start+0x2dc>
    1254:	27 2d       	mov	r18, r7
    1256:	36 2d       	mov	r19, r6
    1258:	04 c0       	rjmp	.+8      	; 0x1262 <OS_Start+0x2c4>
	if(p->state == DEAD || p->state == SUSPENDED)
	{
		#ifdef OS_DEBUG
		printf("Kernel_Suspend_Task: Trying to suspend a task that's in an unsuspendable state %d!\n", p->state);
		#endif
		err = SUSPEND_NONRUNNING_TASK_ERR;
    125a:	86 e0       	ldi	r24, 0x06	; 6
    125c:	80 93 29 16 	sts	0x1629, r24
    1260:	1b c0       	rjmp	.+54     	; 0x1298 <OS_Start+0x2fa>
		return;
	}
	
	//Ensure the task is not currently owning a mutex
	for(int i=0; i<MAXMUTEX; i++) {
		if (Mutex[i].owner == p->pid) {
    1262:	c2 9e       	mul	r12, r18
    1264:	f0 01       	movw	r30, r0
    1266:	c3 9e       	mul	r12, r19
    1268:	f0 0d       	add	r31, r0
    126a:	11 24       	eor	r1, r1
    126c:	e9 5c       	subi	r30, 0xC9	; 201
    126e:	fd 4f       	sbci	r31, 0xFD	; 253
    1270:	42 81       	ldd	r20, Z+2	; 0x02
    1272:	53 81       	ldd	r21, Z+3	; 0x03
    1274:	46 17       	cp	r20, r22
    1276:	57 07       	cpc	r21, r23
    1278:	21 f4       	brne	.+8      	; 0x1282 <OS_Start+0x2e4>
			#ifdef OS_DEBUG
			printf("Kernel_Suspend_Task: Trying to suspend a task that currently owns a mutex\n");
			#endif
			err = SUSPEND_NONRUNNING_TASK_ERR;
    127a:	86 e0       	ldi	r24, 0x06	; 6
    127c:	80 93 29 16 	sts	0x1629, r24
    1280:	0b c0       	rjmp	.+22     	; 0x1298 <OS_Start+0x2fa>
		err = SUSPEND_NONRUNNING_TASK_ERR;
		return;
	}
	
	//Ensure the task is not currently owning a mutex
	for(int i=0; i<MAXMUTEX; i++) {
    1282:	2f 5f       	subi	r18, 0xFF	; 255
    1284:	3f 4f       	sbci	r19, 0xFF	; 255
    1286:	28 30       	cpi	r18, 0x08	; 8
    1288:	31 05       	cpc	r19, r1
    128a:	59 f7       	brne	.-42     	; 0x1262 <OS_Start+0x2c4>
			return;
		}
	}
	
	//Save its current state and set it to SUSPENDED
	p->last_state = p->state;
    128c:	fc 01       	movw	r30, r24
    128e:	a4 83       	std	Z+4, r26	; 0x04
	p->state = SUSPENDED;
    1290:	23 e0       	ldi	r18, 0x03	; 3
    1292:	23 83       	std	Z+3, r18	; 0x03
	err = NO_ERR;
    1294:	10 92 29 16 	sts	0x1629, r1
			Dispatch();					//Dispatch is only needed if the syscall requires running a different task  after it's done
			break;
		   
			case SUSPEND:
			Kernel_Suspend_Task();
			if(Cp->state != RUNNING) Dispatch();
    1298:	e0 91 2c 16 	lds	r30, 0x162C
    129c:	f0 91 2d 16 	lds	r31, 0x162D
    12a0:	83 81       	ldd	r24, Z+3	; 0x03
    12a2:	82 30       	cpi	r24, 0x02	; 2
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <OS_Start+0x30a>
    12a6:	b6 ce       	rjmp	.-660    	; 0x1014 <OS_Start+0x76>
    12a8:	02 dc       	rcall	.-2044   	; 0xaae <Dispatch>
    12aa:	b4 ce       	rjmp	.-664    	; 0x1014 <OS_Start+0x76>
}

static void Kernel_Resume_Task()
{
	//Finds the process descriptor for the specified PID
	PD* p = findProcessByPID(Cp->request_arg);
    12ac:	8e 81       	ldd	r24, Y+6	; 0x06
    12ae:	9f 81       	ldd	r25, Y+7	; 0x07
    12b0:	cc da       	rcall	.-2664   	; 0x84a <findProcessByPID>
	
	//Ensure the PID specified in the PD currently exists in the global process list
	if(p == NULL)
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	21 f4       	brne	.+8      	; 0x12be <OS_Start+0x320>
	{
		#ifdef OS_DEBUG
			printf("Kernel_Resume_Task: PID not found in global process list!\n");
		#endif
		err = PID_NOT_FOUND_ERR;
    12b6:	85 e0       	ldi	r24, 0x05	; 5
    12b8:	80 93 29 16 	sts	0x1629, r24
    12bc:	10 c0       	rjmp	.+32     	; 0x12de <OS_Start+0x340>
		return;
	}
	
	//Ensure the task is currently in the SUSPENDED state
	if(p->state != SUSPENDED)
    12be:	dc 01       	movw	r26, r24
    12c0:	13 96       	adiw	r26, 0x03	; 3
    12c2:	2c 91       	ld	r18, X
    12c4:	23 30       	cpi	r18, 0x03	; 3
    12c6:	21 f0       	breq	.+8      	; 0x12d0 <OS_Start+0x332>
	{
		#ifdef OS_DEBUG
		printf("Kernel_Resume_Task: Trying to resume a task that's not SUSPENDED!\n");
		printf("CURRENT STATE: %d\n", p->state);
		#endif
		err = RESUME_NONSUSPENDED_TASK_ERR;
    12c8:	87 e0       	ldi	r24, 0x07	; 7
    12ca:	80 93 29 16 	sts	0x1629, r24
    12ce:	07 c0       	rjmp	.+14     	; 0x12de <OS_Start+0x340>
		return;
	}
	
	//Restore the previous state of the task
	p->state = p->last_state;
    12d0:	fc 01       	movw	r30, r24
    12d2:	24 81       	ldd	r18, Z+4	; 0x04
    12d4:	23 83       	std	Z+3, r18	; 0x03
	p->last_state = SUSPENDED;			
    12d6:	23 e0       	ldi	r18, 0x03	; 3
    12d8:	24 83       	std	Z+4, r18	; 0x04
	err = NO_ERR;
    12da:	10 92 29 16 	sts	0x1629, r1
			if(Cp->state != RUNNING) Dispatch();
			break;
			
			case RESUME:
			Kernel_Resume_Task();
			Dispatch();
    12de:	e7 db       	rcall	.-2098   	; 0xaae <Dispatch>
    12e0:	99 ce       	rjmp	.-718    	; 0x1014 <OS_Start+0x76>
			break;
			
			case SLEEP:
			Cp->state = SLEEPING;
    12e2:	84 e0       	ldi	r24, 0x04	; 4
    12e4:	8b 83       	std	Y+3, r24	; 0x03
			Dispatch();					
    12e6:	e3 db       	rcall	.-2106   	; 0xaae <Dispatch>
    12e8:	95 ce       	rjmp	.-726    	; 0x1014 <OS_Start+0x76>
			break;
			
			case CREATE_E:
			Kernel_Create_Event();
    12ea:	fa dc       	rcall	.-1548   	; 0xce0 <Kernel_Create_Event>
    12ec:	93 ce       	rjmp	.-730    	; 0x1014 <OS_Start+0x76>
	#endif
}

static void Kernel_Wait_Event(void)
{
	EVENT_TYPE* e = findEventByEventID(Cp->request_arg);
    12ee:	8e 81       	ldd	r24, Y+6	; 0x06
    12f0:	9f 81       	ldd	r25, Y+7	; 0x07
    12f2:	e1 da       	rcall	.-2622   	; 0x8b6 <findEventByEventID>
    12f4:	fc 01       	movw	r30, r24
	
	if(e == NULL)
    12f6:	89 2b       	or	r24, r25
    12f8:	99 f1       	breq	.+102    	; 0x1360 <OS_Start+0x3c2>
		#endif
		return;
	}
	
	//Ensure no one else is waiting for this same event
	if(e->owner > 0 && e->owner != Cp->pid)
    12fa:	82 81       	ldd	r24, Z+2	; 0x02
    12fc:	93 81       	ldd	r25, Z+3	; 0x03
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	69 f0       	breq	.+26     	; 0x131c <OS_Start+0x37e>
    1302:	a0 91 2c 16 	lds	r26, 0x162C
    1306:	b0 91 2d 16 	lds	r27, 0x162D
    130a:	2d 91       	ld	r18, X+
    130c:	3c 91       	ld	r19, X
    130e:	82 17       	cp	r24, r18
    1310:	93 07       	cpc	r25, r19
    1312:	21 f0       	breq	.+8      	; 0x131c <OS_Start+0x37e>
	{
		#ifdef OS_DEBUG
			printf("Kernel_Wait_Event: The requested event is already being waited by PID %d\n", e->owner);
		#endif
		err = EVENT_NOT_FOUND_ERR;
    1314:	89 e0       	ldi	r24, 0x09	; 9
    1316:	80 93 29 16 	sts	0x1629, r24
    131a:	22 c0       	rjmp	.+68     	; 0x1360 <OS_Start+0x3c2>
		return;
	}
	
	//Has this event been signaled already? If yes, "consume" event and keep executing the same task
	if(e->count > 0)
    131c:	84 81       	ldd	r24, Z+4	; 0x04
    131e:	95 81       	ldd	r25, Z+5	; 0x05
    1320:	89 2b       	or	r24, r25
    1322:	81 f0       	breq	.+32     	; 0x1344 <OS_Start+0x3a6>
	{
		e->owner = 0;
    1324:	13 82       	std	Z+3, r1	; 0x03
    1326:	12 82       	std	Z+2, r1	; 0x02
		e->count = 0;
    1328:	15 82       	std	Z+5, r1	; 0x05
    132a:	14 82       	std	Z+4, r1	; 0x04
		e->id = 0;
    132c:	11 82       	std	Z+1, r1	; 0x01
    132e:	10 82       	st	Z, r1
		--Event_Count;	
    1330:	80 91 31 02 	lds	r24, 0x0231
    1334:	90 91 32 02 	lds	r25, 0x0232
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	90 93 32 02 	sts	0x0232, r25
    133e:	80 93 31 02 	sts	0x0231, r24
    1342:	0e c0       	rjmp	.+28     	; 0x1360 <OS_Start+0x3c2>
		return;
	}
	
	//Set the owner of the requested event to the current task and put it into the WAIT EVENT state
	e->owner = Cp->pid;
    1344:	a0 91 2c 16 	lds	r26, 0x162C
    1348:	b0 91 2d 16 	lds	r27, 0x162D
    134c:	8d 91       	ld	r24, X+
    134e:	9c 91       	ld	r25, X
    1350:	11 97       	sbiw	r26, 0x01	; 1
    1352:	93 83       	std	Z+3, r25	; 0x03
    1354:	82 83       	std	Z+2, r24	; 0x02
	Cp->state = WAIT_EVENT;
    1356:	85 e0       	ldi	r24, 0x05	; 5
    1358:	13 96       	adiw	r26, 0x03	; 3
    135a:	8c 93       	st	X, r24
	err = NO_ERR;
    135c:	10 92 29 16 	sts	0x1629, r1
			Kernel_Create_Event();
			break;
			
			case WAIT_E:
			Kernel_Wait_Event();	
			if(Cp->state != RUNNING) Dispatch();	//Don't dispatch to a different task if the event is already siganlled
    1360:	e0 91 2c 16 	lds	r30, 0x162C
    1364:	f0 91 2d 16 	lds	r31, 0x162D
    1368:	83 81       	ldd	r24, Z+3	; 0x03
    136a:	82 30       	cpi	r24, 0x02	; 2
    136c:	09 f4       	brne	.+2      	; 0x1370 <OS_Start+0x3d2>
    136e:	52 ce       	rjmp	.-860    	; 0x1014 <OS_Start+0x76>
    1370:	9e db       	rcall	.-2244   	; 0xaae <Dispatch>
    1372:	50 ce       	rjmp	.-864    	; 0x1014 <OS_Start+0x76>
	err = NO_ERR;
}

static void Kernel_Signal_Event(void)
{
	EVENT_TYPE* e = findEventByEventID(Cp->request_arg);
    1374:	8e 81       	ldd	r24, Y+6	; 0x06
    1376:	9f 81       	ldd	r25, Y+7	; 0x07
    1378:	9e da       	rcall	.-2756   	; 0x8b6 <findEventByEventID>
    137a:	ec 01       	movw	r28, r24
	PD *e_owner;
	
	if(e == NULL)
    137c:	89 2b       	or	r24, r25
    137e:	61 f1       	breq	.+88     	; 0x13d8 <OS_Start+0x43a>
		#endif
		return;
	}
	
	//Increment the event counter if needed 
	if(MAX_EVENT_SIG_MISS == 0 || e->count < MAX_EVENT_SIG_MISS)
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
    1382:	9d 81       	ldd	r25, Y+5	; 0x05
    1384:	89 2b       	or	r24, r25
    1386:	11 f4       	brne	.+4      	; 0x138c <OS_Start+0x3ee>
		e->count++;
    1388:	7c 82       	std	Y+4, r7	; 0x04
    138a:	6d 82       	std	Y+5, r6	; 0x05
	
	//If the event is unowned, return
	if(e->owner == 0)
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	9b 81       	ldd	r25, Y+3	; 0x03
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	19 f4       	brne	.+6      	; 0x139a <OS_Start+0x3fc>
	{
		#ifdef OS_DEBUG
		printf("Kernel_Signal_Event: *WARNING* The requested event is not being waited by anyone!\n");
		#endif
		err = SIGNAL_UNOWNED_EVENT_ERR;
    1394:	80 92 29 16 	sts	0x1629, r8
    1398:	1f c0       	rjmp	.+62     	; 0x13d8 <OS_Start+0x43a>
		return;
	}
	
	//Fetch the owner's PD and ensure it's still valid
	e_owner = findProcessByPID(e->owner);
    139a:	57 da       	rcall	.-2898   	; 0x84a <findProcessByPID>
	if(e_owner == NULL)
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	21 f4       	brne	.+8      	; 0x13a8 <OS_Start+0x40a>
	{
		#ifdef OS_DEBUG
		printf("Kernel_Signal_Event: Event owner's PID not found in global process list!\n");
		#endif
		err = PID_NOT_FOUND_ERR;
    13a0:	85 e0       	ldi	r24, 0x05	; 5
    13a2:	80 93 29 16 	sts	0x1629, r24
    13a6:	18 c0       	rjmp	.+48     	; 0x13d8 <OS_Start+0x43a>
		return;
	}
	
	//Wake up the owner of the event by setting its state to READY if it's active. The event is "consumed"
	if(e_owner->state == WAIT_EVENT)
    13a8:	dc 01       	movw	r26, r24
    13aa:	13 96       	adiw	r26, 0x03	; 3
    13ac:	2c 91       	ld	r18, X
    13ae:	13 97       	sbiw	r26, 0x03	; 3
    13b0:	25 30       	cpi	r18, 0x05	; 5
    13b2:	91 f4       	brne	.+36     	; 0x13d8 <OS_Start+0x43a>
	{
		e->owner = 0;
    13b4:	1b 82       	std	Y+3, r1	; 0x03
    13b6:	1a 82       	std	Y+2, r1	; 0x02
		e->count = 0;
    13b8:	1d 82       	std	Y+5, r1	; 0x05
    13ba:	1c 82       	std	Y+4, r1	; 0x04
		e->id = 0;
    13bc:	19 82       	std	Y+1, r1	; 0x01
    13be:	18 82       	st	Y, r1
		--Event_Count;
    13c0:	20 91 31 02 	lds	r18, 0x0231
    13c4:	30 91 32 02 	lds	r19, 0x0232
    13c8:	21 50       	subi	r18, 0x01	; 1
    13ca:	31 09       	sbc	r19, r1
    13cc:	30 93 32 02 	sts	0x0232, r19
    13d0:	20 93 31 02 	sts	0x0231, r18
		e_owner->state = READY;
    13d4:	13 96       	adiw	r26, 0x03	; 3
    13d6:	9c 92       	st	X, r9
			if(Cp->state != RUNNING) Dispatch();	//Don't dispatch to a different task if the event is already siganlled
			break;
			
			case SIGNAL_E:
			Kernel_Signal_Event();
			Dispatch();
    13d8:	6a db       	rcall	.-2348   	; 0xaae <Dispatch>
    13da:	1c ce       	rjmp	.-968    	; 0x1014 <OS_Start+0x76>
			break;
			
			case CREATE_M:
			Kernel_Create_Mutex();
    13dc:	ce dc       	rcall	.-1636   	; 0xd7a <Kernel_Create_Mutex>
    13de:	1a ce       	rjmp	.-972    	; 0x1014 <OS_Start+0x76>

static void Dispatch();

static void Kernel_Lock_Mutex(void)
{
	MUTEX_TYPE* m = findMutexByMutexID(Cp->request_arg);
    13e0:	8e 81       	ldd	r24, Y+6	; 0x06
    13e2:	9f 81       	ldd	r25, Y+7	; 0x07
    13e4:	a0 da       	rcall	.-2752   	; 0x926 <findMutexByMutexID>
    13e6:	ec 01       	movw	r28, r24
	PD *m_owner = findProcessByPID(m->owner);
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	9b 81       	ldd	r25, Y+3	; 0x03
    13ec:	2e da       	rcall	.-2980   	; 0x84a <findProcessByPID>
	
	if(m == NULL)
    13ee:	20 97       	sbiw	r28, 0x00	; 0
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <OS_Start+0x456>
    13f2:	10 ce       	rjmp	.-992    	; 0x1014 <OS_Start+0x76>
		#endif
		return;
	}
	
	// if mutex is free
	if(m->owner == 0)
    13f4:	2a 81       	ldd	r18, Y+2	; 0x02
    13f6:	3b 81       	ldd	r19, Y+3	; 0x03
    13f8:	21 15       	cp	r18, r1
    13fa:	31 05       	cpc	r19, r1
    13fc:	79 f4       	brne	.+30     	; 0x141c <OS_Start+0x47e>
	{
		m->owner = Cp->pid;
    13fe:	e0 91 2c 16 	lds	r30, 0x162C
    1402:	f0 91 2d 16 	lds	r31, 0x162D
    1406:	80 81       	ld	r24, Z
    1408:	91 81       	ldd	r25, Z+1	; 0x01
    140a:	9b 83       	std	Y+3, r25	; 0x03
    140c:	8a 83       	std	Y+2, r24	; 0x02
		m->count = 1;
    140e:	7c 82       	std	Y+4, r7	; 0x04
    1410:	6d 82       	std	Y+5, r6	; 0x05
		m->own_pri = Cp->pri;				// keep track of the original priority of the owner
    1412:	82 81       	ldd	r24, Z+2	; 0x02
    1414:	c6 5a       	subi	r28, 0xA6	; 166
    1416:	df 4f       	sbci	r29, 0xFF	; 255
    1418:	88 83       	st	Y, r24
    141a:	fc cd       	rjmp	.-1032   	; 0x1014 <OS_Start+0x76>
		return;
	} else if (m->owner == Cp->pid) {
    141c:	a0 91 2c 16 	lds	r26, 0x162C
    1420:	b0 91 2d 16 	lds	r27, 0x162D
    1424:	4d 91       	ld	r20, X+
    1426:	5c 91       	ld	r21, X
    1428:	11 97       	sbiw	r26, 0x01	; 1
    142a:	24 17       	cp	r18, r20
    142c:	35 07       	cpc	r19, r21
    142e:	31 f4       	brne	.+12     	; 0x143c <OS_Start+0x49e>
		// if it has locked by the current process
		++(m->count);
    1430:	8c 81       	ldd	r24, Y+4	; 0x04
    1432:	9d 81       	ldd	r25, Y+5	; 0x05
    1434:	01 96       	adiw	r24, 0x01	; 1
    1436:	9d 83       	std	Y+5, r25	; 0x05
    1438:	8c 83       	std	Y+4, r24	; 0x04
    143a:	ec cd       	rjmp	.-1064   	; 0x1014 <OS_Start+0x76>
		return;
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
    143c:	26 e0       	ldi	r18, 0x06	; 6
    143e:	13 96       	adiw	r26, 0x03	; 3
    1440:	2c 93       	st	X, r18
    1442:	13 97       	sbiw	r26, 0x03	; 3
		//enqueue cp to stack
		++(m->num_of_process);
    1444:	fe 01       	movw	r30, r28
    1446:	ea 5a       	subi	r30, 0xAA	; 170
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	20 81       	ld	r18, Z
    144c:	31 81       	ldd	r19, Z+1	; 0x01
    144e:	2f 5f       	subi	r18, 0xFF	; 255
    1450:	3f 4f       	sbci	r19, 0xFF	; 255
    1452:	31 83       	std	Z+1, r19	; 0x01
    1454:	20 83       	st	Z, r18
		++(m->total_num);
    1456:	32 96       	adiw	r30, 0x02	; 2
    1458:	60 81       	ld	r22, Z
    145a:	71 81       	ldd	r23, Z+1	; 0x01
    145c:	6f 5f       	subi	r22, 0xFF	; 255
    145e:	7f 4f       	sbci	r23, 0xFF	; 255
    1460:	71 83       	std	Z+1, r23	; 0x01
    1462:	60 83       	st	Z, r22
		for (int i=0; i<MAXTHREAD; i++) {
			if (m->blocked_stack[i] == -1){
    1464:	2e 81       	ldd	r18, Y+6	; 0x06
    1466:	3f 81       	ldd	r19, Y+7	; 0x07
    1468:	2f 3f       	cpi	r18, 0xFF	; 255
    146a:	3f 4f       	sbci	r19, 0xFF	; 255
    146c:	51 f0       	breq	.+20     	; 0x1482 <OS_Start+0x4e4>
    146e:	fe 01       	movw	r30, r28
    1470:	38 96       	adiw	r30, 0x08	; 8
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
		//enqueue cp to stack
		++(m->num_of_process);
		++(m->total_num);
		for (int i=0; i<MAXTHREAD; i++) {
    1472:	27 2d       	mov	r18, r7
    1474:	36 2d       	mov	r19, r6
			if (m->blocked_stack[i] == -1){
    1476:	41 91       	ld	r20, Z+
    1478:	51 91       	ld	r21, Z+
    147a:	4f 3f       	cpi	r20, 0xFF	; 255
    147c:	5f 4f       	sbci	r21, 0xFF	; 255
    147e:	b9 f4       	brne	.+46     	; 0x14ae <OS_Start+0x510>
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <OS_Start+0x4e8>
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
		//enqueue cp to stack
		++(m->num_of_process);
		++(m->total_num);
		for (int i=0; i<MAXTHREAD; i++) {
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
			if (m->blocked_stack[i] == -1){
				m->blocked_stack[i] = Cp->pid;
    1486:	4d 91       	ld	r20, X+
    1488:	5c 91       	ld	r21, X
    148a:	11 97       	sbiw	r26, 0x01	; 1
    148c:	f9 01       	movw	r30, r18
    148e:	ee 0f       	add	r30, r30
    1490:	ff 1f       	adc	r31, r31
    1492:	ec 0f       	add	r30, r28
    1494:	fd 1f       	adc	r31, r29
    1496:	57 83       	std	Z+7, r21	; 0x07
    1498:	46 83       	std	Z+6, r20	; 0x06
				m->order[i] = m->total_num;
    149a:	77 ab       	std	Z+55, r23	; 0x37
    149c:	66 ab       	std	Z+54, r22	; 0x36
				m->priority_stack[i] = Cp->pri;
    149e:	12 96       	adiw	r26, 0x02	; 2
    14a0:	4c 91       	ld	r20, X
    14a2:	12 97       	sbiw	r26, 0x02	; 2
    14a4:	fe 01       	movw	r30, r28
    14a6:	e2 0f       	add	r30, r18
    14a8:	f3 1f       	adc	r31, r19
    14aa:	46 a3       	std	Z+38, r20	; 0x26
    14ac:	05 c0       	rjmp	.+10     	; 0x14b8 <OS_Start+0x51a>
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
		//enqueue cp to stack
		++(m->num_of_process);
		++(m->total_num);
		for (int i=0; i<MAXTHREAD; i++) {
    14ae:	2f 5f       	subi	r18, 0xFF	; 255
    14b0:	3f 4f       	sbci	r19, 0xFF	; 255
    14b2:	20 31       	cpi	r18, 0x10	; 16
    14b4:	31 05       	cpc	r19, r1
    14b6:	f9 f6       	brne	.-66     	; 0x1476 <OS_Start+0x4d8>
			}
		}
		// end of enqueue
		
		//if cp's priority is higher than the owner
		if (Cp->pri < m_owner->pri) {
    14b8:	12 96       	adiw	r26, 0x02	; 2
    14ba:	3c 91       	ld	r19, X
    14bc:	12 97       	sbiw	r26, 0x02	; 2
    14be:	fc 01       	movw	r30, r24
    14c0:	22 81       	ldd	r18, Z+2	; 0x02
    14c2:	32 17       	cp	r19, r18
    14c4:	18 f4       	brcc	.+6      	; 0x14cc <OS_Start+0x52e>
			m_owner->pri = Cp->pri;				// the owner gets cp's priority
    14c6:	12 96       	adiw	r26, 0x02	; 2
    14c8:	2c 91       	ld	r18, X
    14ca:	22 83       	std	Z+2, r18	; 0x02
		}
		Dispatch();
    14cc:	f0 da       	rcall	.-2592   	; 0xaae <Dispatch>
    14ce:	a2 cd       	rjmp	.-1212   	; 0x1014 <OS_Start+0x76>
	}
}

static void Kernel_Unlock_Mutex(void)
{
	MUTEX_TYPE* m = findMutexByMutexID(Cp->request_arg);
    14d0:	8e 81       	ldd	r24, Y+6	; 0x06
    14d2:	9f 81       	ldd	r25, Y+7	; 0x07
    14d4:	28 da       	rcall	.-2992   	; 0x926 <findMutexByMutexID>
    14d6:	ec 01       	movw	r28, r24
	PD *m_owner = findProcessByPID(m->owner);
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	9b 81       	ldd	r25, Y+3	; 0x03
    14dc:	b6 d9       	rcall	.-3220   	; 0x84a <findProcessByPID>
    14de:	8c 01       	movw	r16, r24
	
	if(m == NULL)
    14e0:	20 97       	sbiw	r28, 0x00	; 0
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <OS_Start+0x548>
    14e4:	97 cd       	rjmp	.-1234   	; 0x1014 <OS_Start+0x76>
		printf("Kernel_Unlock_Mutex: Error finding requested mutex!\n");
		#endif
		return;
	}
	
	if(m->owner != Cp->pid){
    14e6:	e0 91 2c 16 	lds	r30, 0x162C
    14ea:	f0 91 2d 16 	lds	r31, 0x162D
    14ee:	80 81       	ld	r24, Z
    14f0:	91 81       	ldd	r25, Z+1	; 0x01
    14f2:	2a 81       	ldd	r18, Y+2	; 0x02
    14f4:	3b 81       	ldd	r19, Y+3	; 0x03
    14f6:	28 17       	cp	r18, r24
    14f8:	39 07       	cpc	r19, r25
    14fa:	09 f0       	breq	.+2      	; 0x14fe <OS_Start+0x560>
    14fc:	8b cd       	rjmp	.-1258   	; 0x1014 <OS_Start+0x76>
		#ifdef OS_DEBUG
		printf("Kernel_Unlock_Mutex: The owner is not the current process\n");
		#endif
		return;
	} else if (m->count > 1) {
    14fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1500:	9d 81       	ldd	r25, Y+5	; 0x05
    1502:	82 30       	cpi	r24, 0x02	; 2
    1504:	91 05       	cpc	r25, r1
    1506:	20 f0       	brcs	.+8      	; 0x1510 <OS_Start+0x572>
		// M is locked more than once
		--(m->count);
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	9d 83       	std	Y+5, r25	; 0x05
    150c:	8c 83       	std	Y+4, r24	; 0x04
    150e:	82 cd       	rjmp	.-1276   	; 0x1014 <OS_Start+0x76>
	} else if (m->num_of_process > 0) {
    1510:	fe 01       	movw	r30, r28
    1512:	ea 5a       	subi	r30, 0xAA	; 170
    1514:	ff 4f       	sbci	r31, 0xFF	; 255
    1516:	a0 80       	ld	r10, Z
    1518:	b1 80       	ldd	r11, Z+1	; 0x01
    151a:	a1 14       	cp	r10, r1
    151c:	b1 04       	cpc	r11, r1
    151e:	09 f4       	brne	.+2      	; 0x1522 <OS_Start+0x584>
    1520:	55 c0       	rjmp	.+170    	; 0x15cc <OS_Start+0x62e>
		// there are tasks waiting on the mutex
		// deque the task with highest priority
		PID p_dequeue = 0;
		unsigned int temp_order = m->total_num + 1;
    1522:	32 96       	adiw	r30, 0x02	; 2
    1524:	60 81       	ld	r22, Z
    1526:	71 81       	ldd	r23, Z+1	; 0x01
    1528:	6f 5f       	subi	r22, 0xFF	; 255
    152a:	7f 4f       	sbci	r23, 0xFF	; 255
    152c:	ce 01       	movw	r24, r28
    152e:	86 96       	adiw	r24, 0x26	; 38
    1530:	b2 97       	sbiw	r30, 0x22	; 34
    1532:	de 01       	movw	r26, r28
    1534:	16 96       	adiw	r26, 0x06	; 6
    1536:	ae 01       	movw	r20, r28
    1538:	4a 5a       	subi	r20, 0xAA	; 170
    153a:	5f 4f       	sbci	r21, 0xFF	; 255
		// M is locked more than once
		--(m->count);
	} else if (m->num_of_process > 0) {
		// there are tasks waiting on the mutex
		// deque the task with highest priority
		PID p_dequeue = 0;
    153c:	e1 2c       	mov	r14, r1
    153e:	d1 2c       	mov	r13, r1
		unsigned int temp_order = m->total_num + 1;
		PRIORITY temp_pri = LOWEST_PRIORITY + 1;
    1540:	f8 2c       	mov	r15, r8
    1542:	9e 01       	movw	r18, r28
    1544:	ec 01       	movw	r28, r24
		int i;
		for (i=0; i<MAXTHREAD; i++) {
			if (m->priority_stack[i] < temp_pri) {
    1546:	29 90       	ld	r2, Y+
    1548:	2f 14       	cp	r2, r15
    154a:	40 f4       	brcc	.+16     	; 0x155c <OS_Start+0x5be>
				// found a task with higher priority
				temp_pri = m->priority_stack[i];
				temp_order = m->order[i];
    154c:	60 81       	ld	r22, Z
    154e:	71 81       	ldd	r23, Z+1	; 0x01
				p_dequeue = m->blocked_stack[i];
    1550:	ec 90       	ld	r14, X
    1552:	11 96       	adiw	r26, 0x01	; 1
    1554:	dc 90       	ld	r13, X
    1556:	11 97       	sbiw	r26, 0x01	; 1
		PRIORITY temp_pri = LOWEST_PRIORITY + 1;
		int i;
		for (i=0; i<MAXTHREAD; i++) {
			if (m->priority_stack[i] < temp_pri) {
				// found a task with higher priority
				temp_pri = m->priority_stack[i];
    1558:	f2 2c       	mov	r15, r2
    155a:	0f c0       	rjmp	.+30     	; 0x157a <OS_Start+0x5dc>
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			} else if (m->priority_stack[i] == temp_pri && temp_order < m->order[i]) {
    155c:	2f 10       	cpse	r2, r15
    155e:	0d c0       	rjmp	.+26     	; 0x157a <OS_Start+0x5dc>
    1560:	80 81       	ld	r24, Z
    1562:	91 81       	ldd	r25, Z+1	; 0x01
    1564:	68 17       	cp	r22, r24
    1566:	79 07       	cpc	r23, r25
    1568:	38 f4       	brcc	.+14     	; 0x1578 <OS_Start+0x5da>
				// same priority and came into the queue earlier
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
    156a:	ec 90       	ld	r14, X
    156c:	11 96       	adiw	r26, 0x01	; 1
    156e:	dc 90       	ld	r13, X
    1570:	11 97       	sbiw	r26, 0x01	; 1
    1572:	f2 2c       	mov	r15, r2
				temp_pri = m->priority_stack[i];
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			} else if (m->priority_stack[i] == temp_pri && temp_order < m->order[i]) {
				// same priority and came into the queue earlier
				temp_order = m->order[i];
    1574:	bc 01       	movw	r22, r24
    1576:	01 c0       	rjmp	.+2      	; 0x157a <OS_Start+0x5dc>
			if (m->priority_stack[i] < temp_pri) {
				// found a task with higher priority
				temp_pri = m->priority_stack[i];
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			} else if (m->priority_stack[i] == temp_pri && temp_order < m->order[i]) {
    1578:	f2 2c       	mov	r15, r2
    157a:	32 96       	adiw	r30, 0x02	; 2
    157c:	12 96       	adiw	r26, 0x02	; 2
		// deque the task with highest priority
		PID p_dequeue = 0;
		unsigned int temp_order = m->total_num + 1;
		PRIORITY temp_pri = LOWEST_PRIORITY + 1;
		int i;
		for (i=0; i<MAXTHREAD; i++) {
    157e:	e4 17       	cp	r30, r20
    1580:	f5 07       	cpc	r31, r21
    1582:	09 f7       	brne	.-62     	; 0x1546 <OS_Start+0x5a8>
    1584:	e9 01       	movw	r28, r18
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			}
		}
		//dequeue index i
		m->blocked_stack[i] = -1;
    1586:	2f ef       	ldi	r18, 0xFF	; 255
    1588:	3f ef       	ldi	r19, 0xFF	; 255
    158a:	3f a3       	std	Y+39, r19	; 0x27
    158c:	2e a3       	std	Y+38, r18	; 0x26
		m->priority_stack[i] = LOWEST_PRIORITY+1;
    158e:	8e aa       	std	Y+54, r8	; 0x36
		m->order[i] = 0;
		--(m->num_of_process);
    1590:	fe 01       	movw	r30, r28
    1592:	ea 5a       	subi	r30, 0xAA	; 170
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	31 e0       	ldi	r19, 0x01	; 1
    1598:	a3 1a       	sub	r10, r19
    159a:	b1 08       	sbc	r11, r1
    159c:	b1 82       	std	Z+1, r11	; 0x01
    159e:	a0 82       	st	Z, r10
		PD* target_p = findProcessByPID(p_dequeue);
    15a0:	8e 2d       	mov	r24, r14
    15a2:	9d 2d       	mov	r25, r13
    15a4:	52 d9       	rcall	.-3420   	; 0x84a <findProcessByPID>
		m_owner->pri = m->own_pri;		//reset owner's priority
    15a6:	fe 01       	movw	r30, r28
    15a8:	e6 5a       	subi	r30, 0xA6	; 166
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	20 81       	ld	r18, Z
    15ae:	d8 01       	movw	r26, r16
    15b0:	12 96       	adiw	r26, 0x02	; 2
    15b2:	2c 93       	st	X, r18
		m->owner = p_dequeue;
    15b4:	ea 82       	std	Y+2, r14	; 0x02
    15b6:	db 82       	std	Y+3, r13	; 0x03
		m->own_pri = temp_pri;			//keep track of new owner's priority;
    15b8:	f0 82       	st	Z, r15
		target_p->state = READY;
    15ba:	fc 01       	movw	r30, r24
    15bc:	93 82       	std	Z+3, r9	; 0x03
		Cp->state = READY;
    15be:	e0 91 2c 16 	lds	r30, 0x162C
    15c2:	f0 91 2d 16 	lds	r31, 0x162D
    15c6:	93 82       	std	Z+3, r9	; 0x03
		Dispatch();
    15c8:	72 da       	rcall	.-2844   	; 0xaae <Dispatch>
    15ca:	24 cd       	rjmp	.-1464   	; 0x1014 <OS_Start+0x76>
		return;
	} else {
		m->owner = 0;
    15cc:	1b 82       	std	Y+3, r1	; 0x03
    15ce:	1a 82       	std	Y+2, r1	; 0x02
		m->count = 0;
    15d0:	1d 82       	std	Y+5, r1	; 0x05
    15d2:	1c 82       	std	Y+4, r1	; 0x04
		m_owner->pri = m->own_pri;		//reset owner's priority
    15d4:	c6 5a       	subi	r28, 0xA6	; 166
    15d6:	df 4f       	sbci	r29, 0xFF	; 255
    15d8:	88 81       	ld	r24, Y
    15da:	d8 01       	movw	r26, r16
    15dc:	12 96       	adiw	r26, 0x02	; 2
    15de:	8c 93       	st	X, r24
    15e0:	19 cd       	rjmp	.-1486   	; 0x1014 <OS_Start+0x76>
			//Does this need dispatch under any circumstances?
			break;
		   
			case YIELD:
			case NONE:					// NONE could be caused by a timer interrupt
			Cp->state = READY;
    15e2:	9b 82       	std	Y+3, r9	; 0x03
			Dispatch();
    15e4:	64 da       	rcall	.-2872   	; 0xaae <Dispatch>
    15e6:	16 cd       	rjmp	.-1492   	; 0x1014 <OS_Start+0x76>
			break;
       
			//Invalid request code, just ignore
			default:
				err = INVALID_KERNET_REQUEST_ERR;
    15e8:	50 92 29 16 	sts	0x1629, r5
    15ec:	13 cd       	rjmp	.-1498   	; 0x1014 <OS_Start+0x76>
		#endif
		
		Next_Kernel_Request();
		/* NEVER RETURNS!!! */
	}
}
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	1f 91       	pop	r17
    15f4:	0f 91       	pop	r16
    15f6:	ff 90       	pop	r15
    15f8:	ef 90       	pop	r14
    15fa:	df 90       	pop	r13
    15fc:	cf 90       	pop	r12
    15fe:	bf 90       	pop	r11
    1600:	af 90       	pop	r10
    1602:	9f 90       	pop	r9
    1604:	8f 90       	pop	r8
    1606:	7f 90       	pop	r7
    1608:	6f 90       	pop	r6
    160a:	5f 90       	pop	r5
    160c:	4f 90       	pop	r4
    160e:	3f 90       	pop	r3
    1610:	2f 90       	pop	r2
    1612:	08 95       	ret

00001614 <Task_Create>:
	}
	Disable_Interrupt();
	
	Cp->request = UNLOCK_M;
	Cp->request_arg = m;
	Enter_Kernel();
    1614:	20 91 25 16 	lds	r18, 0x1625
    1618:	30 91 26 16 	lds	r19, 0x1626
    161c:	23 2b       	or	r18, r19
    161e:	89 f0       	breq	.+34     	; 0x1642 <Task_Create+0x2e>
    1620:	f8 94       	cli
    1622:	e0 91 2c 16 	lds	r30, 0x162C
    1626:	f0 91 2d 16 	lds	r31, 0x162D
    162a:	62 83       	std	Z+2, r22	; 0x02
    162c:	51 87       	std	Z+9, r21	; 0x09
    162e:	40 87       	std	Z+8, r20	; 0x08
    1630:	21 e0       	ldi	r18, 0x01	; 1
    1632:	25 83       	std	Z+5, r18	; 0x05
    1634:	e4 5f       	subi	r30, 0xF4	; 244
    1636:	fe 4f       	sbci	r31, 0xFE	; 254
    1638:	91 83       	std	Z+1, r25	; 0x01
    163a:	80 83       	st	Z, r24
    163c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    1640:	01 c0       	rjmp	.+2      	; 0x1644 <Task_Create+0x30>
    1642:	cb da       	rcall	.-2666   	; 0xbda <Kernel_Create_Task>
    1644:	80 91 29 16 	lds	r24, 0x1629
    1648:	84 30       	cpi	r24, 0x04	; 4
    164a:	29 f0       	breq	.+10     	; 0x1656 <Task_Create+0x42>
    164c:	80 91 23 16 	lds	r24, 0x1623
    1650:	90 91 24 16 	lds	r25, 0x1624
    1654:	08 95       	ret
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	08 95       	ret

0000165c <Task_Terminate>:
    165c:	80 91 25 16 	lds	r24, 0x1625
    1660:	90 91 26 16 	lds	r25, 0x1626
    1664:	89 2b       	or	r24, r25
    1666:	21 f4       	brne	.+8      	; 0x1670 <Task_Terminate+0x14>
    1668:	83 e0       	ldi	r24, 0x03	; 3
    166a:	80 93 29 16 	sts	0x1629, r24
    166e:	08 95       	ret
    1670:	f8 94       	cli
    1672:	e0 91 2c 16 	lds	r30, 0x162C
    1676:	f0 91 2d 16 	lds	r31, 0x162D
    167a:	83 e0       	ldi	r24, 0x03	; 3
    167c:	85 83       	std	Z+5, r24	; 0x05
    167e:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    1682:	08 95       	ret

00001684 <Task_Sleep>:
    1684:	20 91 25 16 	lds	r18, 0x1625
    1688:	30 91 26 16 	lds	r19, 0x1626
    168c:	23 2b       	or	r18, r19
    168e:	21 f4       	brne	.+8      	; 0x1698 <Task_Sleep+0x14>
    1690:	83 e0       	ldi	r24, 0x03	; 3
    1692:	80 93 29 16 	sts	0x1629, r24
    1696:	08 95       	ret
    1698:	f8 94       	cli
    169a:	e0 91 2c 16 	lds	r30, 0x162C
    169e:	f0 91 2d 16 	lds	r31, 0x162D
    16a2:	26 e0       	ldi	r18, 0x06	; 6
    16a4:	25 83       	std	Z+5, r18	; 0x05
    16a6:	97 83       	std	Z+7, r25	; 0x07
    16a8:	86 83       	std	Z+6, r24	; 0x06
    16aa:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    16ae:	08 95       	ret

000016b0 <main>:
	uart_init();
	uart_setredir();
	printf("STDOUT->UART!\n");
   #endif  
   
   a_main();
    16b0:	b1 c8       	rjmp	.-3742   	; 0x814 <a_main>
    16b2:	08 95       	ret

000016b4 <uart0_init>:
		bytes_read++;
	}
	while(cur != end_char && bytes_read < max_chars);

	return bytes_read;
}
    16b4:	10 92 c5 00 	sts	0x00C5, r1
    16b8:	83 e3       	ldi	r24, 0x33	; 51
    16ba:	80 93 c4 00 	sts	0x00C4, r24
    16be:	e0 ec       	ldi	r30, 0xC0	; 192
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	8d 7f       	andi	r24, 0xFD	; 253
    16c6:	80 83       	st	Z, r24
    16c8:	86 e0       	ldi	r24, 0x06	; 6
    16ca:	80 93 c2 00 	sts	0x00C2, r24
    16ce:	88 e1       	ldi	r24, 0x18	; 24
    16d0:	80 93 c1 00 	sts	0x00C1, r24
    16d4:	08 95       	ret

000016d6 <uart1_init>:
    16d6:	10 92 cd 00 	sts	0x00CD, r1
    16da:	83 e3       	ldi	r24, 0x33	; 51
    16dc:	80 93 cc 00 	sts	0x00CC, r24
    16e0:	e8 ec       	ldi	r30, 0xC8	; 200
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	8d 7f       	andi	r24, 0xFD	; 253
    16e8:	80 83       	st	Z, r24
    16ea:	86 e0       	ldi	r24, 0x06	; 6
    16ec:	80 93 ca 00 	sts	0x00CA, r24
    16f0:	88 e1       	ldi	r24, 0x18	; 24
    16f2:	80 93 c9 00 	sts	0x00C9, r24
    16f6:	08 95       	ret

000016f8 <uart0_recvbyte>:
    16f8:	e0 ec       	ldi	r30, 0xC0	; 192
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	88 23       	and	r24, r24
    1700:	ec f7       	brge	.-6      	; 0x16fc <uart0_recvbyte+0x4>
    1702:	80 91 c6 00 	lds	r24, 0x00C6
    1706:	08 95       	ret

00001708 <uart1_sendbyte>:

void uart1_sendbyte(uint8_t data)
{
	while(!(UCSR1A & (1<<UDRE1)));
    1708:	e8 ec       	ldi	r30, 0xC8	; 200
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	90 81       	ld	r25, Z
    170e:	95 ff       	sbrs	r25, 5
    1710:	fd cf       	rjmp	.-6      	; 0x170c <uart1_sendbyte+0x4>
	UDR1 = data;
    1712:	80 93 ce 00 	sts	0x00CE, r24
    1716:	08 95       	ret

00001718 <uart1_recvbyte>:
}

uint8_t uart1_recvbyte(void)
{
	while(!(UCSR1A & (1<<RXC1)));
    1718:	e8 ec       	ldi	r30, 0xC8	; 200
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	88 23       	and	r24, r24
    1720:	ec f7       	brge	.-6      	; 0x171c <uart1_recvbyte+0x4>
	return UDR1;
    1722:	80 91 ce 00 	lds	r24, 0x00CE
}
    1726:	08 95       	ret

00001728 <__fixunssfsi>:
    1728:	70 d0       	rcall	.+224    	; 0x180a <__fp_splitA>
    172a:	88 f0       	brcs	.+34     	; 0x174e <__fixunssfsi+0x26>
    172c:	9f 57       	subi	r25, 0x7F	; 127
    172e:	90 f0       	brcs	.+36     	; 0x1754 <__fixunssfsi+0x2c>
    1730:	b9 2f       	mov	r27, r25
    1732:	99 27       	eor	r25, r25
    1734:	b7 51       	subi	r27, 0x17	; 23
    1736:	a0 f0       	brcs	.+40     	; 0x1760 <__fixunssfsi+0x38>
    1738:	d1 f0       	breq	.+52     	; 0x176e <__fixunssfsi+0x46>
    173a:	66 0f       	add	r22, r22
    173c:	77 1f       	adc	r23, r23
    173e:	88 1f       	adc	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	1a f0       	brmi	.+6      	; 0x174a <__fixunssfsi+0x22>
    1744:	ba 95       	dec	r27
    1746:	c9 f7       	brne	.-14     	; 0x173a <__fixunssfsi+0x12>
    1748:	12 c0       	rjmp	.+36     	; 0x176e <__fixunssfsi+0x46>
    174a:	b1 30       	cpi	r27, 0x01	; 1
    174c:	81 f0       	breq	.+32     	; 0x176e <__fixunssfsi+0x46>
    174e:	77 d0       	rcall	.+238    	; 0x183e <__fp_zero>
    1750:	b1 e0       	ldi	r27, 0x01	; 1
    1752:	08 95       	ret
    1754:	74 c0       	rjmp	.+232    	; 0x183e <__fp_zero>
    1756:	67 2f       	mov	r22, r23
    1758:	78 2f       	mov	r23, r24
    175a:	88 27       	eor	r24, r24
    175c:	b8 5f       	subi	r27, 0xF8	; 248
    175e:	39 f0       	breq	.+14     	; 0x176e <__fixunssfsi+0x46>
    1760:	b9 3f       	cpi	r27, 0xF9	; 249
    1762:	cc f3       	brlt	.-14     	; 0x1756 <__fixunssfsi+0x2e>
    1764:	86 95       	lsr	r24
    1766:	77 95       	ror	r23
    1768:	67 95       	ror	r22
    176a:	b3 95       	inc	r27
    176c:	d9 f7       	brne	.-10     	; 0x1764 <__fixunssfsi+0x3c>
    176e:	3e f4       	brtc	.+14     	; 0x177e <__fixunssfsi+0x56>
    1770:	90 95       	com	r25
    1772:	80 95       	com	r24
    1774:	70 95       	com	r23
    1776:	61 95       	neg	r22
    1778:	7f 4f       	sbci	r23, 0xFF	; 255
    177a:	8f 4f       	sbci	r24, 0xFF	; 255
    177c:	9f 4f       	sbci	r25, 0xFF	; 255
    177e:	08 95       	ret

00001780 <__floatunsisf>:
    1780:	e8 94       	clt
    1782:	09 c0       	rjmp	.+18     	; 0x1796 <__floatsisf+0x12>

00001784 <__floatsisf>:
    1784:	97 fb       	bst	r25, 7
    1786:	3e f4       	brtc	.+14     	; 0x1796 <__floatsisf+0x12>
    1788:	90 95       	com	r25
    178a:	80 95       	com	r24
    178c:	70 95       	com	r23
    178e:	61 95       	neg	r22
    1790:	7f 4f       	sbci	r23, 0xFF	; 255
    1792:	8f 4f       	sbci	r24, 0xFF	; 255
    1794:	9f 4f       	sbci	r25, 0xFF	; 255
    1796:	99 23       	and	r25, r25
    1798:	a9 f0       	breq	.+42     	; 0x17c4 <__floatsisf+0x40>
    179a:	f9 2f       	mov	r31, r25
    179c:	96 e9       	ldi	r25, 0x96	; 150
    179e:	bb 27       	eor	r27, r27
    17a0:	93 95       	inc	r25
    17a2:	f6 95       	lsr	r31
    17a4:	87 95       	ror	r24
    17a6:	77 95       	ror	r23
    17a8:	67 95       	ror	r22
    17aa:	b7 95       	ror	r27
    17ac:	f1 11       	cpse	r31, r1
    17ae:	f8 cf       	rjmp	.-16     	; 0x17a0 <__floatsisf+0x1c>
    17b0:	fa f4       	brpl	.+62     	; 0x17f0 <__floatsisf+0x6c>
    17b2:	bb 0f       	add	r27, r27
    17b4:	11 f4       	brne	.+4      	; 0x17ba <__floatsisf+0x36>
    17b6:	60 ff       	sbrs	r22, 0
    17b8:	1b c0       	rjmp	.+54     	; 0x17f0 <__floatsisf+0x6c>
    17ba:	6f 5f       	subi	r22, 0xFF	; 255
    17bc:	7f 4f       	sbci	r23, 0xFF	; 255
    17be:	8f 4f       	sbci	r24, 0xFF	; 255
    17c0:	9f 4f       	sbci	r25, 0xFF	; 255
    17c2:	16 c0       	rjmp	.+44     	; 0x17f0 <__floatsisf+0x6c>
    17c4:	88 23       	and	r24, r24
    17c6:	11 f0       	breq	.+4      	; 0x17cc <__floatsisf+0x48>
    17c8:	96 e9       	ldi	r25, 0x96	; 150
    17ca:	11 c0       	rjmp	.+34     	; 0x17ee <__floatsisf+0x6a>
    17cc:	77 23       	and	r23, r23
    17ce:	21 f0       	breq	.+8      	; 0x17d8 <__floatsisf+0x54>
    17d0:	9e e8       	ldi	r25, 0x8E	; 142
    17d2:	87 2f       	mov	r24, r23
    17d4:	76 2f       	mov	r23, r22
    17d6:	05 c0       	rjmp	.+10     	; 0x17e2 <__floatsisf+0x5e>
    17d8:	66 23       	and	r22, r22
    17da:	71 f0       	breq	.+28     	; 0x17f8 <__floatsisf+0x74>
    17dc:	96 e8       	ldi	r25, 0x86	; 134
    17de:	86 2f       	mov	r24, r22
    17e0:	70 e0       	ldi	r23, 0x00	; 0
    17e2:	60 e0       	ldi	r22, 0x00	; 0
    17e4:	2a f0       	brmi	.+10     	; 0x17f0 <__floatsisf+0x6c>
    17e6:	9a 95       	dec	r25
    17e8:	66 0f       	add	r22, r22
    17ea:	77 1f       	adc	r23, r23
    17ec:	88 1f       	adc	r24, r24
    17ee:	da f7       	brpl	.-10     	; 0x17e6 <__floatsisf+0x62>
    17f0:	88 0f       	add	r24, r24
    17f2:	96 95       	lsr	r25
    17f4:	87 95       	ror	r24
    17f6:	97 f9       	bld	r25, 7
    17f8:	08 95       	ret

000017fa <__fp_split3>:
    17fa:	57 fd       	sbrc	r21, 7
    17fc:	90 58       	subi	r25, 0x80	; 128
    17fe:	44 0f       	add	r20, r20
    1800:	55 1f       	adc	r21, r21
    1802:	59 f0       	breq	.+22     	; 0x181a <__fp_splitA+0x10>
    1804:	5f 3f       	cpi	r21, 0xFF	; 255
    1806:	71 f0       	breq	.+28     	; 0x1824 <__fp_splitA+0x1a>
    1808:	47 95       	ror	r20

0000180a <__fp_splitA>:
    180a:	88 0f       	add	r24, r24
    180c:	97 fb       	bst	r25, 7
    180e:	99 1f       	adc	r25, r25
    1810:	61 f0       	breq	.+24     	; 0x182a <__fp_splitA+0x20>
    1812:	9f 3f       	cpi	r25, 0xFF	; 255
    1814:	79 f0       	breq	.+30     	; 0x1834 <__fp_splitA+0x2a>
    1816:	87 95       	ror	r24
    1818:	08 95       	ret
    181a:	12 16       	cp	r1, r18
    181c:	13 06       	cpc	r1, r19
    181e:	14 06       	cpc	r1, r20
    1820:	55 1f       	adc	r21, r21
    1822:	f2 cf       	rjmp	.-28     	; 0x1808 <__fp_split3+0xe>
    1824:	46 95       	lsr	r20
    1826:	f1 df       	rcall	.-30     	; 0x180a <__fp_splitA>
    1828:	08 c0       	rjmp	.+16     	; 0x183a <__fp_splitA+0x30>
    182a:	16 16       	cp	r1, r22
    182c:	17 06       	cpc	r1, r23
    182e:	18 06       	cpc	r1, r24
    1830:	99 1f       	adc	r25, r25
    1832:	f1 cf       	rjmp	.-30     	; 0x1816 <__fp_splitA+0xc>
    1834:	86 95       	lsr	r24
    1836:	71 05       	cpc	r23, r1
    1838:	61 05       	cpc	r22, r1
    183a:	08 94       	sec
    183c:	08 95       	ret

0000183e <__fp_zero>:
    183e:	e8 94       	clt

00001840 <__fp_szero>:
    1840:	bb 27       	eor	r27, r27
    1842:	66 27       	eor	r22, r22
    1844:	77 27       	eor	r23, r23
    1846:	cb 01       	movw	r24, r22
    1848:	97 f9       	bld	r25, 7
    184a:	08 95       	ret

0000184c <__mulsf3>:
    184c:	0b d0       	rcall	.+22     	; 0x1864 <__mulsf3x>
    184e:	78 c0       	rjmp	.+240    	; 0x1940 <__fp_round>
    1850:	69 d0       	rcall	.+210    	; 0x1924 <__fp_pscA>
    1852:	28 f0       	brcs	.+10     	; 0x185e <__mulsf3+0x12>
    1854:	6e d0       	rcall	.+220    	; 0x1932 <__fp_pscB>
    1856:	18 f0       	brcs	.+6      	; 0x185e <__mulsf3+0x12>
    1858:	95 23       	and	r25, r21
    185a:	09 f0       	breq	.+2      	; 0x185e <__mulsf3+0x12>
    185c:	5a c0       	rjmp	.+180    	; 0x1912 <__fp_inf>
    185e:	5f c0       	rjmp	.+190    	; 0x191e <__fp_nan>
    1860:	11 24       	eor	r1, r1
    1862:	ee cf       	rjmp	.-36     	; 0x1840 <__fp_szero>

00001864 <__mulsf3x>:
    1864:	ca df       	rcall	.-108    	; 0x17fa <__fp_split3>
    1866:	a0 f3       	brcs	.-24     	; 0x1850 <__mulsf3+0x4>

00001868 <__mulsf3_pse>:
    1868:	95 9f       	mul	r25, r21
    186a:	d1 f3       	breq	.-12     	; 0x1860 <__mulsf3+0x14>
    186c:	95 0f       	add	r25, r21
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	55 1f       	adc	r21, r21
    1872:	62 9f       	mul	r22, r18
    1874:	f0 01       	movw	r30, r0
    1876:	72 9f       	mul	r23, r18
    1878:	bb 27       	eor	r27, r27
    187a:	f0 0d       	add	r31, r0
    187c:	b1 1d       	adc	r27, r1
    187e:	63 9f       	mul	r22, r19
    1880:	aa 27       	eor	r26, r26
    1882:	f0 0d       	add	r31, r0
    1884:	b1 1d       	adc	r27, r1
    1886:	aa 1f       	adc	r26, r26
    1888:	64 9f       	mul	r22, r20
    188a:	66 27       	eor	r22, r22
    188c:	b0 0d       	add	r27, r0
    188e:	a1 1d       	adc	r26, r1
    1890:	66 1f       	adc	r22, r22
    1892:	82 9f       	mul	r24, r18
    1894:	22 27       	eor	r18, r18
    1896:	b0 0d       	add	r27, r0
    1898:	a1 1d       	adc	r26, r1
    189a:	62 1f       	adc	r22, r18
    189c:	73 9f       	mul	r23, r19
    189e:	b0 0d       	add	r27, r0
    18a0:	a1 1d       	adc	r26, r1
    18a2:	62 1f       	adc	r22, r18
    18a4:	83 9f       	mul	r24, r19
    18a6:	a0 0d       	add	r26, r0
    18a8:	61 1d       	adc	r22, r1
    18aa:	22 1f       	adc	r18, r18
    18ac:	74 9f       	mul	r23, r20
    18ae:	33 27       	eor	r19, r19
    18b0:	a0 0d       	add	r26, r0
    18b2:	61 1d       	adc	r22, r1
    18b4:	23 1f       	adc	r18, r19
    18b6:	84 9f       	mul	r24, r20
    18b8:	60 0d       	add	r22, r0
    18ba:	21 1d       	adc	r18, r1
    18bc:	82 2f       	mov	r24, r18
    18be:	76 2f       	mov	r23, r22
    18c0:	6a 2f       	mov	r22, r26
    18c2:	11 24       	eor	r1, r1
    18c4:	9f 57       	subi	r25, 0x7F	; 127
    18c6:	50 40       	sbci	r21, 0x00	; 0
    18c8:	8a f0       	brmi	.+34     	; 0x18ec <__mulsf3_pse+0x84>
    18ca:	e1 f0       	breq	.+56     	; 0x1904 <__mulsf3_pse+0x9c>
    18cc:	88 23       	and	r24, r24
    18ce:	4a f0       	brmi	.+18     	; 0x18e2 <__mulsf3_pse+0x7a>
    18d0:	ee 0f       	add	r30, r30
    18d2:	ff 1f       	adc	r31, r31
    18d4:	bb 1f       	adc	r27, r27
    18d6:	66 1f       	adc	r22, r22
    18d8:	77 1f       	adc	r23, r23
    18da:	88 1f       	adc	r24, r24
    18dc:	91 50       	subi	r25, 0x01	; 1
    18de:	50 40       	sbci	r21, 0x00	; 0
    18e0:	a9 f7       	brne	.-22     	; 0x18cc <__mulsf3_pse+0x64>
    18e2:	9e 3f       	cpi	r25, 0xFE	; 254
    18e4:	51 05       	cpc	r21, r1
    18e6:	70 f0       	brcs	.+28     	; 0x1904 <__mulsf3_pse+0x9c>
    18e8:	14 c0       	rjmp	.+40     	; 0x1912 <__fp_inf>
    18ea:	aa cf       	rjmp	.-172    	; 0x1840 <__fp_szero>
    18ec:	5f 3f       	cpi	r21, 0xFF	; 255
    18ee:	ec f3       	brlt	.-6      	; 0x18ea <__mulsf3_pse+0x82>
    18f0:	98 3e       	cpi	r25, 0xE8	; 232
    18f2:	dc f3       	brlt	.-10     	; 0x18ea <__mulsf3_pse+0x82>
    18f4:	86 95       	lsr	r24
    18f6:	77 95       	ror	r23
    18f8:	67 95       	ror	r22
    18fa:	b7 95       	ror	r27
    18fc:	f7 95       	ror	r31
    18fe:	e7 95       	ror	r30
    1900:	9f 5f       	subi	r25, 0xFF	; 255
    1902:	c1 f7       	brne	.-16     	; 0x18f4 <__mulsf3_pse+0x8c>
    1904:	fe 2b       	or	r31, r30
    1906:	88 0f       	add	r24, r24
    1908:	91 1d       	adc	r25, r1
    190a:	96 95       	lsr	r25
    190c:	87 95       	ror	r24
    190e:	97 f9       	bld	r25, 7
    1910:	08 95       	ret

00001912 <__fp_inf>:
    1912:	97 f9       	bld	r25, 7
    1914:	9f 67       	ori	r25, 0x7F	; 127
    1916:	80 e8       	ldi	r24, 0x80	; 128
    1918:	70 e0       	ldi	r23, 0x00	; 0
    191a:	60 e0       	ldi	r22, 0x00	; 0
    191c:	08 95       	ret

0000191e <__fp_nan>:
    191e:	9f ef       	ldi	r25, 0xFF	; 255
    1920:	80 ec       	ldi	r24, 0xC0	; 192
    1922:	08 95       	ret

00001924 <__fp_pscA>:
    1924:	00 24       	eor	r0, r0
    1926:	0a 94       	dec	r0
    1928:	16 16       	cp	r1, r22
    192a:	17 06       	cpc	r1, r23
    192c:	18 06       	cpc	r1, r24
    192e:	09 06       	cpc	r0, r25
    1930:	08 95       	ret

00001932 <__fp_pscB>:
    1932:	00 24       	eor	r0, r0
    1934:	0a 94       	dec	r0
    1936:	12 16       	cp	r1, r18
    1938:	13 06       	cpc	r1, r19
    193a:	14 06       	cpc	r1, r20
    193c:	05 06       	cpc	r0, r21
    193e:	08 95       	ret

00001940 <__fp_round>:
    1940:	09 2e       	mov	r0, r25
    1942:	03 94       	inc	r0
    1944:	00 0c       	add	r0, r0
    1946:	11 f4       	brne	.+4      	; 0x194c <__fp_round+0xc>
    1948:	88 23       	and	r24, r24
    194a:	52 f0       	brmi	.+20     	; 0x1960 <__fp_round+0x20>
    194c:	bb 0f       	add	r27, r27
    194e:	40 f4       	brcc	.+16     	; 0x1960 <__fp_round+0x20>
    1950:	bf 2b       	or	r27, r31
    1952:	11 f4       	brne	.+4      	; 0x1958 <__fp_round+0x18>
    1954:	60 ff       	sbrs	r22, 0
    1956:	04 c0       	rjmp	.+8      	; 0x1960 <__fp_round+0x20>
    1958:	6f 5f       	subi	r22, 0xFF	; 255
    195a:	7f 4f       	sbci	r23, 0xFF	; 255
    195c:	8f 4f       	sbci	r24, 0xFF	; 255
    195e:	9f 4f       	sbci	r25, 0xFF	; 255
    1960:	08 95       	ret

00001962 <__tablejump2__>:
    1962:	ee 0f       	add	r30, r30
    1964:	ff 1f       	adc	r31, r31
    1966:	88 1f       	adc	r24, r24
    1968:	8b bf       	out	0x3b, r24	; 59
    196a:	07 90       	elpm	r0, Z+
    196c:	f6 91       	elpm	r31, Z
    196e:	e0 2d       	mov	r30, r0
    1970:	19 94       	eijmp

00001972 <__umulhisi3>:
    1972:	a2 9f       	mul	r26, r18
    1974:	b0 01       	movw	r22, r0
    1976:	b3 9f       	mul	r27, r19
    1978:	c0 01       	movw	r24, r0
    197a:	a3 9f       	mul	r26, r19
    197c:	70 0d       	add	r23, r0
    197e:	81 1d       	adc	r24, r1
    1980:	11 24       	eor	r1, r1
    1982:	91 1d       	adc	r25, r1
    1984:	b2 9f       	mul	r27, r18
    1986:	70 0d       	add	r23, r0
    1988:	81 1d       	adc	r24, r1
    198a:	11 24       	eor	r1, r1
    198c:	91 1d       	adc	r25, r1
    198e:	08 95       	ret

00001990 <puts>:
    1990:	0f 93       	push	r16
    1992:	1f 93       	push	r17
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
    1998:	e0 91 34 16 	lds	r30, 0x1634
    199c:	f0 91 35 16 	lds	r31, 0x1635
    19a0:	23 81       	ldd	r18, Z+3	; 0x03
    19a2:	21 ff       	sbrs	r18, 1
    19a4:	1b c0       	rjmp	.+54     	; 0x19dc <puts+0x4c>
    19a6:	8c 01       	movw	r16, r24
    19a8:	d0 e0       	ldi	r29, 0x00	; 0
    19aa:	c0 e0       	ldi	r28, 0x00	; 0
    19ac:	f8 01       	movw	r30, r16
    19ae:	81 91       	ld	r24, Z+
    19b0:	8f 01       	movw	r16, r30
    19b2:	60 91 34 16 	lds	r22, 0x1634
    19b6:	70 91 35 16 	lds	r23, 0x1635
    19ba:	db 01       	movw	r26, r22
    19bc:	18 96       	adiw	r26, 0x08	; 8
    19be:	ed 91       	ld	r30, X+
    19c0:	fc 91       	ld	r31, X
    19c2:	19 97       	sbiw	r26, 0x09	; 9
    19c4:	88 23       	and	r24, r24
    19c6:	31 f0       	breq	.+12     	; 0x19d4 <puts+0x44>
    19c8:	19 95       	eicall
    19ca:	89 2b       	or	r24, r25
    19cc:	79 f3       	breq	.-34     	; 0x19ac <puts+0x1c>
    19ce:	df ef       	ldi	r29, 0xFF	; 255
    19d0:	cf ef       	ldi	r28, 0xFF	; 255
    19d2:	ec cf       	rjmp	.-40     	; 0x19ac <puts+0x1c>
    19d4:	8a e0       	ldi	r24, 0x0A	; 10
    19d6:	19 95       	eicall
    19d8:	89 2b       	or	r24, r25
    19da:	19 f0       	breq	.+6      	; 0x19e2 <puts+0x52>
    19dc:	8f ef       	ldi	r24, 0xFF	; 255
    19de:	9f ef       	ldi	r25, 0xFF	; 255
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <puts+0x56>
    19e2:	8d 2f       	mov	r24, r29
    19e4:	9c 2f       	mov	r25, r28
    19e6:	df 91       	pop	r29
    19e8:	cf 91       	pop	r28
    19ea:	1f 91       	pop	r17
    19ec:	0f 91       	pop	r16
    19ee:	08 95       	ret

000019f0 <_exit>:
    19f0:	f8 94       	cli

000019f2 <__stop_program>:
    19f2:	ff cf       	rjmp	.-2      	; 0x19f2 <__stop_program>
