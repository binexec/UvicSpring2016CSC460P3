
roomba_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  000002a0  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b6  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000378  00000000  00000000  00000d16  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000574  00000000  00000000  0000108e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  00001604  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e2  00000000  00000000  00001798  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b7  00000000  00000000  00001a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00001d31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ea       	ldi	r30, 0xA0	; 160
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 31       	cpi	r26, 0x14	; 20
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e1       	ldi	r26, 0x14	; 20
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 31       	cpi	r26, 0x14	; 20
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	64 d0       	rcall	.+200    	; 0x1e8 <main>
 120:	bd c0       	rjmp	.+378    	; 0x29c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <switch_uart_19200>:
	uart1_sendbyte(137);				//Opcode for drive
	uart1_sendbyte(vel >> 8);			//Velocity high byte
	uart1_sendbyte(vel);				//velocity low byte
	uart1_sendbyte(rad >> 8);			//Radius high byte
	uart1_sendbyte(rad);				//Radius low byte
}
 124:	20 9a       	sbi	0x04, 0	; 4
 126:	28 9a       	sbi	0x05, 0	; 5
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	87 ea       	ldi	r24, 0xA7	; 167
 12c:	91 e6       	ldi	r25, 0x61	; 97
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <switch_uart_19200+0xa>
 136:	00 c0       	rjmp	.+0      	; 0x138 <switch_uart_19200+0x14>
 138:	00 00       	nop
 13a:	28 98       	cbi	0x05, 0	; 5
 13c:	2f ef       	ldi	r18, 0xFF	; 255
 13e:	81 ee       	ldi	r24, 0xE1	; 225
 140:	94 e0       	ldi	r25, 0x04	; 4
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <switch_uart_19200+0x1e>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <switch_uart_19200+0x28>
 14c:	00 00       	nop
 14e:	28 9a       	sbi	0x05, 0	; 5
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	81 ee       	ldi	r24, 0xE1	; 225
 154:	94 e0       	ldi	r25, 0x04	; 4
 156:	21 50       	subi	r18, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <switch_uart_19200+0x32>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <switch_uart_19200+0x3c>
 160:	00 00       	nop
 162:	28 98       	cbi	0x05, 0	; 5
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	81 ee       	ldi	r24, 0xE1	; 225
 168:	94 e0       	ldi	r25, 0x04	; 4
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <switch_uart_19200+0x46>
 172:	00 c0       	rjmp	.+0      	; 0x174 <switch_uart_19200+0x50>
 174:	00 00       	nop
 176:	28 9a       	sbi	0x05, 0	; 5
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	81 ee       	ldi	r24, 0xE1	; 225
 17c:	94 e0       	ldi	r25, 0x04	; 4
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <switch_uart_19200+0x5a>
 186:	00 c0       	rjmp	.+0      	; 0x188 <switch_uart_19200+0x64>
 188:	00 00       	nop
 18a:	28 98       	cbi	0x05, 0	; 5
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	81 ee       	ldi	r24, 0xE1	; 225
 190:	94 e0       	ldi	r25, 0x04	; 4
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <switch_uart_19200+0x6e>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <switch_uart_19200+0x78>
 19c:	00 00       	nop
 19e:	28 9a       	sbi	0x05, 0	; 5
 1a0:	08 95       	ret

000001a2 <start_robot_safe>:
 1a2:	80 e8       	ldi	r24, 0x80	; 128
 1a4:	6b d0       	rcall	.+214    	; 0x27c <uart1_sendbyte>
 1a6:	83 e8       	ldi	r24, 0x83	; 131
 1a8:	69 c0       	rjmp	.+210    	; 0x27c <uart1_sendbyte>
 1aa:	08 95       	ret

000001ac <roomba_init>:
 1ac:	bb df       	rcall	.-138    	; 0x124 <switch_uart_19200>
 1ae:	f9 df       	rcall	.-14     	; 0x1a2 <start_robot_safe>
 1b0:	8c e8       	ldi	r24, 0x8C	; 140
 1b2:	64 d0       	rcall	.+200    	; 0x27c <uart1_sendbyte>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	62 d0       	rcall	.+196    	; 0x27c <uart1_sendbyte>
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	60 d0       	rcall	.+192    	; 0x27c <uart1_sendbyte>
 1bc:	8e e3       	ldi	r24, 0x3E	; 62
 1be:	5e d0       	rcall	.+188    	; 0x27c <uart1_sendbyte>
 1c0:	80 e2       	ldi	r24, 0x20	; 32
 1c2:	5c c0       	rjmp	.+184    	; 0x27c <uart1_sendbyte>
 1c4:	08 95       	ret

000001c6 <query_sensors>:

void query_sensors()
{
	uart1_sendbyte(149);				//Opcode for Query List
 1c6:	85 e9       	ldi	r24, 0x95	; 149
 1c8:	59 d0       	rcall	.+178    	; 0x27c <uart1_sendbyte>
	uart1_sendbyte(SENSORS_TO_QUERY);	//Query will send three sensors packets
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	57 d0       	rcall	.+174    	; 0x27c <uart1_sendbyte>
	//uart1_sendbyte(7);					//Packet 7: Bump/Wheeldrop detection
	uart1_sendbyte(8);					//Packet 8: Wall seen?
 1ce:	88 e0       	ldi	r24, 0x08	; 8
 1d0:	55 d0       	rcall	.+170    	; 0x27c <uart1_sendbyte>
	uart1_sendbyte(27);					//Packet 27: Strength of wall signal (Two bytes)
 1d2:	8b e1       	ldi	r24, 0x1B	; 27
 1d4:	53 c0       	rjmp	.+166    	; 0x27c <uart1_sendbyte>
 1d6:	08 95       	ret

000001d8 <send_query_list>:
	//uart1_sendbyte(13);					//Packet 13: Virtual wall seen?
}

void send_query_list()
{
 1d8:	cf 93       	push	r28
 1da:	c3 e0       	ldi	r28, 0x03	; 3
	uint8_t i;
	uint8_t curbyte;
	
	for(i=0; i<SENSORS_TO_QUERY + TWO_BYTE_SENSORS; i++)
	{
		curbyte = uart1_recvbyte();		//Read a byte returned by the robot
 1dc:	57 d0       	rcall	.+174    	; 0x28c <uart1_recvbyte>
		uart0_sendbyte(curbyte);		//Forward the byte back to the base station via BT 
 1de:	38 d0       	rcall	.+112    	; 0x250 <uart0_sendbyte>
 1e0:	c1 50       	subi	r28, 0x01	; 1
void send_query_list()
{
	uint8_t i;
	uint8_t curbyte;
	
	for(i=0; i<SENSORS_TO_QUERY + TWO_BYTE_SENSORS; i++)
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <send_query_list+0x4>
	{
		curbyte = uart1_recvbyte();		//Read a byte returned by the robot
		uart0_sendbyte(curbyte);		//Forward the byte back to the base station via BT 
	}
}
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <main>:

int main()
{
	uart0_init();		//UART0 is used for BT
 1e8:	11 d0       	rcall	.+34     	; 0x20c <uart0_init>
	uart1_init();		//UART1 is used to communicate with the robot
 1ea:	21 d0       	rcall	.+66     	; 0x22e <uart1_init>
	roomba_init();
 1ec:	df df       	rcall	.-66     	; 0x1ac <roomba_init>
	
	uart0_sendstr("Robot initialized!\n");
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	92 e0       	ldi	r25, 0x02	; 2
 1f2:	36 d0       	rcall	.+108    	; 0x260 <uart0_sendstr>
		//drive(100,DRIVE_STRAIGHT);
		//_delay_ms(2000);
		//beep();
		//drive(100,CLOCKWISE_TURN);
		//_delay_ms(2000);
		query_sensors();
 1f4:	e8 df       	rcall	.-48     	; 0x1c6 <query_sensors>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
 1f8:	81 ee       	ldi	r24, 0xE1	; 225
 1fa:	94 e0       	ldi	r25, 0x04	; 4
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0x14>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0x1e>
 206:	00 00       	nop
		_delay_ms(100);
		send_query_list();
 208:	e7 df       	rcall	.-50     	; 0x1d8 <send_query_list>
	}
 20a:	f4 cf       	rjmp	.-24     	; 0x1f4 <main+0xc>

0000020c <uart0_init>:

uint8_t uart0_recvbyte(void)
{
	while(!(UCSR0A & (1<<RXC0)));
	return UDR0;
}
 20c:	10 92 c5 00 	sts	0x00C5, r1
 210:	83 e3       	ldi	r24, 0x33	; 51
 212:	80 93 c4 00 	sts	0x00C4, r24
 216:	e0 ec       	ldi	r30, 0xC0	; 192
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	8d 7f       	andi	r24, 0xFD	; 253
 21e:	80 83       	st	Z, r24
 220:	86 e0       	ldi	r24, 0x06	; 6
 222:	80 93 c2 00 	sts	0x00C2, r24
 226:	88 e1       	ldi	r24, 0x18	; 24
 228:	80 93 c1 00 	sts	0x00C1, r24
 22c:	08 95       	ret

0000022e <uart1_init>:
 22e:	10 92 cd 00 	sts	0x00CD, r1
 232:	83 e3       	ldi	r24, 0x33	; 51
 234:	80 93 cc 00 	sts	0x00CC, r24
 238:	e8 ec       	ldi	r30, 0xC8	; 200
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	8d 7f       	andi	r24, 0xFD	; 253
 240:	80 83       	st	Z, r24
 242:	86 e0       	ldi	r24, 0x06	; 6
 244:	80 93 ca 00 	sts	0x00CA, r24
 248:	88 e1       	ldi	r24, 0x18	; 24
 24a:	80 93 c9 00 	sts	0x00C9, r24
 24e:	08 95       	ret

00000250 <uart0_sendbyte>:
 250:	e0 ec       	ldi	r30, 0xC0	; 192
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	90 81       	ld	r25, Z
 256:	95 ff       	sbrs	r25, 5
 258:	fd cf       	rjmp	.-6      	; 0x254 <uart0_sendbyte+0x4>
 25a:	80 93 c6 00 	sts	0x00C6, r24
 25e:	08 95       	ret

00000260 <uart0_sendstr>:

void uart0_sendstr(char* input)
{
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	ec 01       	movw	r28, r24
	while(*input != 0x00)
 266:	88 81       	ld	r24, Y
 268:	88 23       	and	r24, r24
 26a:	29 f0       	breq	.+10     	; 0x276 <uart0_sendstr+0x16>
 26c:	21 96       	adiw	r28, 0x01	; 1
	{
		uart0_sendbyte(*input);
 26e:	f0 df       	rcall	.-32     	; 0x250 <uart0_sendbyte>
	return UDR0;
}

void uart0_sendstr(char* input)
{
	while(*input != 0x00)
 270:	89 91       	ld	r24, Y+
 272:	81 11       	cpse	r24, r1
 274:	fc cf       	rjmp	.-8      	; 0x26e <uart0_sendstr+0xe>
	{
		uart0_sendbyte(*input);
		input++;
	}
}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <uart1_sendbyte>:

void uart1_sendbyte(uint8_t data)
{
	while(!(UCSR1A & (1<<UDRE1)));
 27c:	e8 ec       	ldi	r30, 0xC8	; 200
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	90 81       	ld	r25, Z
 282:	95 ff       	sbrs	r25, 5
 284:	fd cf       	rjmp	.-6      	; 0x280 <uart1_sendbyte+0x4>
	UDR1 = data;
 286:	80 93 ce 00 	sts	0x00CE, r24
 28a:	08 95       	ret

0000028c <uart1_recvbyte>:
}

uint8_t uart1_recvbyte(void)
{
	while(!(UCSR1A & (1<<RXC1)));
 28c:	e8 ec       	ldi	r30, 0xC8	; 200
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	88 23       	and	r24, r24
 294:	ec f7       	brge	.-6      	; 0x290 <uart1_recvbyte+0x4>
	return UDR1;
 296:	80 91 ce 00 	lds	r24, 0x00CE
}
 29a:	08 95       	ret

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
